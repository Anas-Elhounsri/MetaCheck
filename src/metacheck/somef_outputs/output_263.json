{
  "authors": [
    {
      "confidence": 1,
      "result": {
        "affiliation": "Stanford University",
        "email": "esoroka@stanford.edu",
        "identifier": "0009-0001-2710-469X",
        "type": "String",
        "value": "Emiko Soroka"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/joss-paper/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "Stanford University",
        "email": "mykel@stanford.edu",
        "identifier": "0000-0002-7238-9663",
        "type": "String",
        "value": "Mykel J. Kochenderfer"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/joss-paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "author": [
          {
            "family_name": "Soroka",
            "given_name": "Emiko",
            "name": "Emiko Soroka",
            "type": "Agent",
            "url": "https://orcid.org/0009-0001-2710-469X"
          },
          {
            "family_name": "Kochenderfer",
            "given_name": "Mykel J.",
            "name": "Mykel J. Kochenderfer",
            "type": "Agent",
            "url": "https://orcid.org/0000-0002-7238-9663"
          },
          {
            "family_name": "Lall",
            "given_name": "Sanjay",
            "name": "Sanjay Lall",
            "type": "Agent",
            "url": "https://orcid.org/0000-0002-1783-5309"
          }
        ],
        "datePublished": "2024",
        "doi": "10.6084/m9.figshare.26768461",
        "format": "cff",
        "title": "Satisfiability.jl: Satisfiability Modulo Theories in Julia",
        "type": "File_dump",
        "url": "https://doi.org/10.6084/m9.figshare.26768461",
        "value": "cff-version: \"1.2.0\"\nauthors:\n- family-names: Soroka\n  given-names: Emiko\n  orcid: \"https://orcid.org/0009-0001-2710-469X\"\n- family-names: Kochenderfer\n  given-names: Mykel J.\n  orcid: \"https://orcid.org/0000-0002-7238-9663\"\n- family-names: Lall\n  given-names: Sanjay\n  orcid: \"https://orcid.org/0000-0002-1783-5309\"\ncontact:\n- family-names: Soroka\n  given-names: Emiko\n  orcid: \"https://orcid.org/0009-0001-2710-469X\"\n- family-names: Kochenderfer\n  given-names: Mykel J.\n  orcid: \"https://orcid.org/0000-0002-7238-9663\"\n- family-names: Lall\n  given-names: Sanjay\n  orcid: \"https://orcid.org/0000-0002-1783-5309\"\ndoi: 10.6084/m9.figshare.26768461\nmessage: If you use this software, please cite our article in the\n  Journal of Open Source Software.\npreferred-citation:\n  authors:\n  - family-names: Soroka\n    given-names: Emiko\n    orcid: \"https://orcid.org/0009-0001-2710-469X\"\n  - family-names: Kochenderfer\n    given-names: Mykel J.\n    orcid: \"https://orcid.org/0000-0002-7238-9663\"\n  - family-names: Lall\n    given-names: Sanjay\n    orcid: \"https://orcid.org/0000-0002-1783-5309\"\n  date-published: 2024-08-20\n  doi: 10.21105/joss.06757\n  issn: 2475-9066\n  issue: 100\n  journal: Journal of Open Source Software\n  publisher:\n    name: Open Journals\n  start: 6757\n  title: \"Satisfiability.jl: Satisfiability Modulo Theories in Julia\"\n  type: article\n  url: \"https://joss.theoj.org/papers/10.21105/joss.06757\"\n  volume: 9\ntitle: \"Satisfiability.jl: Satisfiability Modulo Theories in Julia\"\n"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/CITATION.cff",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/elsoroka/Satisfiability.jl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/elsoroka/Satisfiability.jl"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/joss-paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "continuous_integration": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/.github/workflows/TagBot.yml"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/.github/workflows/docs.yml"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/.github/workflows/ci.yml"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/.github/workflows/draft-pdf.yml"
      },
      "technique": "file_exploration"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing\n\nYou can contribute to Satisfiability.jl! (Yes, even if you've never made an open source contribution before.)\n\n## Getting started\n* Please make sure to follow the [Julia community standards](https://julialang.org/community/standards) in all interactions.\n* Here's a [guide to making your first pull request](https://docs.github.com/en/get-started/exploring-projects-on-github/contributing-to-a-project)\n* Here's some more Julia-specific tips by Katharine Hyatt on [Making your first Julia pull request](https://kshyatt.github.io/post/firstjuliapr/).\n* If you're not sure how to fix the bug or add the feature you're interested in (or not sure how it fits into our roadmap), **start an issue to discuss it**.\n\n## What should I work on?\nIf you want to contribute, but aren't sure where to begin:\n\n* Look for issues tagged [good first issue](https://github.com/elsoroka/Satisfiability.jl/labels/good%20first%20issue).\n\n* Help add more examples to our [documentation](https://elsoroka.github.io/Satisfiability.jl/dev/) or improve the documentation itself.\n"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/docs/src/contributing.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributing",
        "parent_header": [
          "<a href=\"https://elsoroka.github.io/Satisfiability.jl\">Satisfiability.jl</a>"
        ],
        "type": "Text_excerpt",
        "value": "Contribution guidelines are [here](https://elsoroka.github.io/Satisfiability.jl/dev/contributing/). If you're not sure how to get started, take a look at the [Roadmap](https://github.com/elsoroka/Satisfiability.jl/issues/46) and anything tagged [help wanted](https://github.com/elsoroka/Satisfiability.jl/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22).\n"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-04-16T21:58:55Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2024-03-27"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/joss-paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_published": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2024-03-27"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/joss-paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2025-09-05T06:13:56Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2024-03-27"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/joss-paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Specify satisfiability modulo theories problems in Julia and use the SMT-LIB format to interact with SMT solvers."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Specify satisfiability modulo theories problems in Julia and use the SMT-LIB format to interact with SMT solvers."
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/joss-paper/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 0.9822745638438013,
      "result": {
        "original_header": "<a href=\"https://elsoroka.github.io/Satisfiability.jl\">Satisfiability.jl</a>",
        "type": "Text_excerpt",
        "value": "Satisfiability.jl is a package for representing satisfiability modulo theories (SMT) problems in Julia. This package provides a simple front-end interface to common SMT solvers, including full support for vector-valued and matrix-valued expressions. Currently, the theories of propositional logic, uninterpreted functions, Integers, Reals and fixed-size BitVectors are supported. We will eventually add support for all [SMT-LIB standard theories](http://smtlib.cs.uiowa.edu/theories.shtml). \nWhat you can do with this package:\n* Cleanly specify SMT expressions using Julia's built-in broadcasting and iteration capabilities to write concise expressions.\n* Generate files in the [SMT-LIB](http://www.smtlib.org/) specification language.\n* Interact with any solver that follows the SMT-LIB standard. We test with Z3, CVC5, and Yices. \n"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/elsoroka/Satisfiability.jl/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Solving the vector-valued Boolean problem",
        "parent_header": [
          "<a href=\"https://elsoroka.github.io/Satisfiability.jl\">Satisfiability.jl</a>",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "(x1 \u2227 y1) \u2228 (\u00acx1 \u2227 y1) \u2227 ... \u2227 (xn \u2227 yn) \u2228 (\u00acxn \u2227 yn)\n```julia\nn = 10\n@satvariable(x[1:n], Bool)\n@satvariable(y[1:n], Bool)\nexpr = (x .\u2227 y) .\u2228 (\u00acx .\u2227 y)\nstatus = sat!(expr, solver=Z3())\nprintln(\"x = $(value(x)), y = $(value(y))\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/elsoroka/Satisfiability.jl/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "elsoroka/Satisfiability.jl"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Satisfiability.jl"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/docs/server.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/joss-paper/joss-compile.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/joss-paper/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.21105/joss.06757"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://joss.theoj.org/papers/10.21105/joss.06757/status.svg"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Installation\n```@contents\nPages = [\"installation.md\"]\nDepth = 3\n```\n\n!!! note \n    **To successfully use this package you need a back-end solver installed.** [Z3](https://www.microsoft.com/en-us/research/publication/z3-an-efficient-smt-solver/) will automatically be installed using `z3_jll`.\n\nYou can also use [cvc5](https://cvc5.github.io/) (although you will have to install it yourself). To use other solvers that implement the [SMT-LIB Standard](http://www.smtlib.org/) standard, [check this page](advanced.md#Custom-solver-options-and-using-other-solvers) for guidelines.\n\n## Installing Satisfiability\nThe usual way! `using Pkg; Pkg.add(\"Satisfiability\")`\n`Satisfiability.jl` will automatically install [Z3](https://www.microsoft.com/en-us/research/publication/z3-an-efficient-smt-solver/) on your system if it isn't already installed.\n\n## Installing other Solvers\n`Satisfiability.jl` uses [Julia's Base.Process](https://github.com/JuliaLang/julia/blob/master/base/process.jl) library to interact with solvers. To successfully install a solver for this package, all you need to do is make sure the appropriate command works in your machine's terminal.\n\n### Debian Linux\n\n**To install CVC5:**\n* Download the appropriate binary [here](https://cvc5.github.io/downloads.html) and save it as `cvc5`. (Note: if you already have `cvc5` installed under the name `cvc5-linux`, make a symlink to the name `cvc5` or [customize your solver command](advanced.md#Custom-solver-options-and-using-other-solvers) to use the name `cvc5-linux`.)\n* Set the executable permission: `chmod +x ./cvc5`.\n* Most users should move the binary to `/usr/local/bin`. This allows it to be found from the command line.\nIf you can launch CVC5 from the command line by typing `cvc5 --interactive --produce-models`, your installation is correct.\n\n**To install Z3 manually** (you shouldn't need to do this), use `sudo apt-get install z3`.\nIf you can launch Z3 from the command line by typing `z3 -smt2 -in`, your installation is correct.\n\n### MacOS\n\n**To install CVC5**\n* Download the appropriate binary [here](https://cvc5.github.io/downloads.html) and save it as `cvc5`. (Note: if you already have `cvc5` installed under another name, make a symlink to the name `cvc5` or [customize your solver command](advanced.md#Custom-solver-options-and-using-other-solvers) to use the name you already have.)\n* Most users should move the binary to `/usr/local/bin`. This allows it to be found from the command line.\n* If you can open your Terminal and launch CVC5 by typing `cvc5 --interactive --produce-models`, your installation is correct.\n\n\n**To install Z3 manually** (you shouldn't need to do this):\n\n* `brew install z3` should work if you have Homebrew installed.\n\nAlternatively:\n\n* Download the appropriate zip file for the [latest Z3 release](https://github.com/Z3Prover/z3/releases) and install following the instructions on that page.\n* If you can open your Terminal and launch z3 by typing `z3 -smt2 -in`, your installation is correct.\n\n\n### Windows\n\n**To install cvc5**\n* Download the [latest release](https://github.com/cvc5/cvc5/releases/) of cvc5. Make sure you save the exe file as `cvc5.exe`, not `cvc5-Win64.exe` or anything else.\n* Make a note of the file path where you put cvc5.exe.\n* Add the cvc5.exe file path to your PATH environment variable ([here's how to do this](https://helpdeskgeek.com/windows-10/add-windows-path-environment-variable/)).\nIf you can open the Windows command line and launch cvc5 by typing `cvc5 --interactive --produce-models`, your installation is correct.\n\n**To install Z3 manually** (you shouldn't need to do this):\n* Download the appropriate zip file for the [latest Z3 release](https://github.com/Z3Prover/z3/releases).\n* Unzip the file and put it in your applications folder.\n* Find z3.exe. Typically this will be in a bin file in your unzipped folder. Don't move it, but make a note of this file path.\n* Add the z3.exe file path to your PATH environment variable ([here's how to do this](https://helpdeskgeek.com/windows-10/add-windows-path-environment-variable/)).\nIf you can open the WIndows command line and launch z3 by typing `z3.exe -smt2 -in`, your installation is correct.\n\n\n### Installing Yices\nPlease follow the [official instructions](https://yices.csl.sri.com/).\n\n## Installing other solvers\nThe workflow for installing any solver is the same!\n* Download the solver\n* Make sure you can invoke it from the command line. On Windows this might include adding its location to your system PATH variable.\n\nThe command you use is the command `Satisfiability.jl` will use. You can specify exactly the command you want by writing `solver = Solver(\"My Solver\", `program_name --option1 --option2`)` - [see here](advanced.md) for more details.\n\nBe aware of the limitations of your back-end solver - check the manual to ensure it supports the theories you plan to use, and make sure you set the right command line flags. If you're having difficulty using another solver, a good troubleshooting step is to `save` your problem to SMT format in `Satisfiability.jl`, then feed it to the solver on your command line.\n\n!!! note \n    **`Satisfiability.jl` does not warn you if your problem contains a theory or operation that your back-end solver does not support!** For example, if you set the wrong theory in [Yices](https://yices.csl.sri.com/)), `sat!` will hang.\n    Future versions of `Satisfiability.jl` may implement warnings about logic/problem mismatches, however difficulties can arise in maintaining the correctness of these warnings as solvers are updated and improved.\n"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/docs/src/installation.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Install Problem\n\nThis tutorial demonstrates how to solve the Install Problem, which involves determining\nwhether a set of software packages can be installed on a system given a set of dependencies\nand conflicts. The install problem was introduced in the paper\n[OPIUM: Optimal Package Install/Uninstall Manager](https://ieeexplore.ieee.org/document/4222580).\n\n# Problem Description\n\nA typical software distribution includes a collection of packages, each associated with\nmetadata describing its requirements. This metadata contains:\n\n- **Dependencies**: Packages that must be installed for a given package to function.\n- **Conflicts**: Packages that cannot coexist with the given package.\n\nThe goal is to determine whether a valid installation profile can be constructed that\nsatisfies all dependency and conflict constraints.\n\n# Example Metadata\n\nFor example, consider a distribution with the following packages and rules:\n\n- Package a depends on packages b, c, and z.\n- Package b depends on package d.\n- Package c depends on at least one of (d, e) and one of (f, g).\n- Package d conflicts with package e.\n\n# Constraints Representation\n\nThe above rules can be represented as logical constraints:\n\n- \u00aca\u2228b\u00aca\u2228b\n- \u00aca\u2228c\u00aca\u2228c\n- \u00aca\u2228z\u00aca\u2228z\n- \u00acb\u2228d\u00acb\u2228d\n- \u00acc\u2228(d\u2228e)\u00acc\u2228(d\u2228e)\n- \u00acc\u2228(f\u2228g)\u00acc\u2228(f\u2228g)\n- \u00acd\u2228\u00ace\u00acd\u2228\u00ace\n\nThese logical constraints form the basis for solving the problem using satisfiability (SAT) solvers.\n\n# Dependency Graph and Conflicts\n\nThe metadata rules can also be visualized using a Dependency Graph and Conflict Relationships. To\nrepresent both dependencies and conflicts in a single graph:\n\n```\n        (a)\n       / | \\\n     (b) (c) (z)\n       |    | \\\n      (d)  (d) (e)\n       |     |   |\n       |    (f) (g)\n       |_________|\nConflicts:\n(d) --- (e)\n```\n# Solving the Install Problem\n\nHere\u2019s the program that defines the metadata rules and solves the problem:\n\n```jldoctest label3; output = false\nusing Satisfiability\n@satvariable(a, Bool)\n@satvariable(b, Bool)\n@satvariable(c, Bool)\n@satvariable(d, Bool)\n@satvariable(e, Bool)\n@satvariable(f, Bool)\n@satvariable(g, Bool)\n@satvariable(z, Bool)\n\nfunction DependsOn(pack, deps)\n    if typeof(deps) <: AbstractExpr\n        return implies(pack, deps)\n    else\n        return and([implies(pack, dep) for dep in deps]...)\n    end\nend\n\nfunction Conflict(packs...)\n    return or([not(pack) for pack in packs]...)\nend\n\nfunction install_check(constraints...)\n    open(Z3()) do solver\n        # Assert constraints\n        for constraint in constraints\n            assert!(solver, constraint)\n        end\n        status, model = sat!(solver)\n        println(status)\n        for (key, value) in model\n            println(\"$key => $value\")\n        end\n   end\nend\n\n\n# Example 1: Section 2 of https://ieeexplore.ieee.org/document/4222580\ninstall_check(\n    DependsOn(a, [b, c, z]),\n    DependsOn(b, [d]),\n    DependsOn(c, [or(d, e), or(f, g)]),\n    Conflict(d, e),\n    a,\n    z\n)\n\n# output\n\nSAT\nf => true\ng => false\nc => true\ne => false\nb => true\nz => true\na => true\nd => true\n```\n"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/docs/src/example_install_program.md",
      "technique": "file_exploration"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/elsoroka/Satisfiability.jl/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "satisfiability-modulo-theories, smt-lib"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": [
          "satisfiability modulo theories",
          "julia",
          "smt-lib"
        ]
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/joss-paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2023 Emi Soroka\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/MIT",
        "spdx_id": "MIT",
        "type": "License",
        "value": "MIT"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/joss-paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Satisfiability.jl"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "elsoroka"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Julia",
        "size": 157868,
        "type": "Programming_language",
        "value": "Julia"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 5825,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 124,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "elsoroka",
          "type": "User"
        },
        "date_created": "2024-11-20T19:55:54Z",
        "date_published": "2024-11-21T17:10:53Z",
        "description": "Support Unicode variable names.\r\nAdd experimental support for 3D tensor variables.",
        "html_url": "https://github.com/elsoroka/Satisfiability.jl/releases/tag/v0.2.0",
        "name": "v0.2.0",
        "release_id": 186697839,
        "tag": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/elsoroka/Satisfiability.jl/tarball/v0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/elsoroka/Satisfiability.jl/releases/186697839",
        "value": "https://api.github.com/repos/elsoroka/Satisfiability.jl/releases/186697839",
        "zipball_url": "https://api.github.com/repos/elsoroka/Satisfiability.jl/zipball/v0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "elsoroka",
          "type": "User"
        },
        "date_created": "2024-05-23T18:15:16Z",
        "date_published": "2024-05-28T21:17:44Z",
        "description": "If Z3 is not already installed, automatically install it when users install Satisfiability.jl. Credit to @mykelk for this improvement :)",
        "html_url": "https://github.com/elsoroka/Satisfiability.jl/releases/tag/v0.1.2",
        "name": "v0.1.2",
        "release_id": 157876982,
        "tag": "v0.1.2",
        "tarball_url": "https://api.github.com/repos/elsoroka/Satisfiability.jl/tarball/v0.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/elsoroka/Satisfiability.jl/releases/157876982",
        "value": "https://api.github.com/repos/elsoroka/Satisfiability.jl/releases/157876982",
        "zipball_url": "https://api.github.com/repos/elsoroka/Satisfiability.jl/zipball/v0.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "elsoroka",
          "type": "User"
        },
        "date_created": "2023-12-15T22:45:59Z",
        "date_published": "2023-12-17T00:43:40Z",
        "description": "* Fixed bugs in issues #21 and #26.\r\n*Added remaining operators defined in SMT-LIB QF_BV (bitvector) specification (issue #22)\r\n* Add ^ for square\r\n* Correctly promote expressions containing mixed `BoolExpr`, `IntExpr` and `RealExpr` types. When a Boolean variable `z` is used in an arithmetic expression, it is rewritten to `ite(z 1 0)` (int) or `ite(z 1.0 0.0)` (real), which matches Z3's behavior. The SMT-LIB functions to_real and to_int are used to convert mixed `IntExpr`s and `RealExpr`s.",
        "html_url": "https://github.com/elsoroka/Satisfiability.jl/releases/tag/Releases",
        "name": "v0.1.1",
        "release_id": 134203063,
        "tag": "Releases",
        "tarball_url": "https://api.github.com/repos/elsoroka/Satisfiability.jl/tarball/Releases",
        "type": "Release",
        "url": "https://api.github.com/repos/elsoroka/Satisfiability.jl/releases/134203063",
        "value": "https://api.github.com/repos/elsoroka/Satisfiability.jl/releases/134203063",
        "zipball_url": "https://api.github.com/repos/elsoroka/Satisfiability.jl/zipball/Releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "support",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2025-09-19 01:12:43",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 49
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Investigating rounding of real numbers",
        "parent_header": [
          "<a href=\"https://elsoroka.github.io/Satisfiability.jl\">Satisfiability.jl</a>",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "This problem (from Microsoft's [Z3 tutorials](https://microsoft.github.io/z3guide/docs/theories/Arithmetic)) uses mixed integer and real variables to figure out whether there exists a constant `a` and two real numbers `xR` and `yR` such that `round(xR) +  round(yR)  > a` while `xR + yR < a`.\n```julia\n@satvariable(xR, Real)\n@satvariable(yR, Real)\n@satvariable(x, Int) # x represents a rounded version of xR\n@satvariable(y, Int) # y represents a rounded version of yR\n@satvariable(a, Int)\n\nexprs = [xR + yR < a,\n         x + y > a,\n         or(x == xR, ((x < xR) \u2227 (xR < x+1)), ((x-1 < xR) \u2227 (xR < x))),\n         or(y == yR, ((y < yR) \u2227 (yR < y+1)), ((y-1 < yR) \u2227 (yR < y))),\n        ]\nstatus = sat!(exprs)\nprintln(\"status = $status, xR=$(value(xR)), yR=$(value(yR))\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Uninterpreted functions",
        "parent_header": [
          "<a href=\"https://elsoroka.github.io/Satisfiability.jl\">Satisfiability.jl</a>",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "An uninterpreted function is a function where the input-to-output mapping isn't known. The task of the SMT solver is to find this mapping such that some logical statements hole true. Let's find out if there exists a function `f(x)` such that `f(f(x)) == x`, `f(x) == y` and `x != y`.\n\n```julia\n@satvariable(x, Bool)\n@satvariable(y, Bool)\n@uninterpreted(f, Bool, Bool)\n\nstatus = sat!(distinct(x,y), f(x) == y, f(f(x)) == x, solver=Z3())\nprintln(\"status = $status\")\n```\n\nThe problem is `:SAT`, so there is such a function! Since the satisfying assignment for an uninterpreted function is itself a function, Satisfiability.jl sets the value of `f` to this function. Now calling `f(value)` returns the value of this satisfying assignment.\n"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using a different solver",
        "parent_header": [
          "<a href=\"https://elsoroka.github.io/Satisfiability.jl\">Satisfiability.jl</a>",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "Now let's suppose we want to use Yices, another SMT solver. Unlike Z3, Yices requires setting the logic manually. Here we set it to \"QF_UFLIA\" - \"Quantifier free uninterpreted functions, linear integer arithmetic\".\n\n```julia\n@satvariable(x, Bool)\n@satvariable(y, Bool)\n@uninterpreted(f, Bool, Bool)\n\nstatus = sat!(distinct(x,y), f(x) == y, f(f(x)) == x, solver=Yices(), logic=\"QF_UFLIA\")\nprintln(\"status = $status\")\n\nprintln(f(x.value))               # prints 0\nprintln(f(x.value) == y.value)    # true\nprintln(f(f(x.value)) == x.value) # true\n```\nWe see this yields the same result.\n"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Proving a bitwise version of de Morgan's law.",
        "parent_header": [
          "<a href=\"https://elsoroka.github.io/Satisfiability.jl\">Satisfiability.jl</a>",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "In this example we want to show there is NO possible value of x and y such that de Morgan's bitwise law doesn't hold.\n```julia\n@satvariable(x, BitVector, 64)\n@satvariable(y, BitVector, 64)\n\nexpr = not((~x & ~y) == ~(x | y))\n\nstatus = sat!(expr, solver=Z3())\nprintln(status) # if status is UNSAT we proved it.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "version": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "v0.1.1"
      },
      "source": "https://raw.githubusercontent.com/elsoroka/Satisfiability.jl/main/joss-paper/codemeta.json",
      "technique": "code_parser"
    }
  ]
}