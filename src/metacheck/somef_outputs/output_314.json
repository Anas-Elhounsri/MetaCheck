{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "File: Acknowledgements.txt\n\nTHIS WORK IS FUNDED IN PART BY:\n\n1.  The United States Department of Defense under Contract No. FA8702-15-D-0002\n    with Carnegie Mellon University for the operation of the Software\n    Engineering Institute, a federally funded research and development center.\n2.  The United States Department of Defense under Contract No. FA8650-18-2-7835\n    and HR0011-18-3-0007\n3.  NVIDIA, Intel, MIT Lincoln Laboratory, MathWorks, IBM, and Julia Computing.\n4.  The National Science Foundation (1514406, OAC-1740333, CCF-1629657).\n5.  The United States Department of Energy, Office of Science, ASCR Contract\n    No. DE-AC02-05CH11231.\n\n\nTHIS WORK BUILDS UPON THE FOLLOWING PRIOR WORKS:\n1.  SuiteSparse:GraphBLAS, \n    (http://faculty.cse.tamu.edu/davis/GraphBLAS.html) \n    Copyright 2017-2023  Timothy A. Davis (Author), AldenMath.com.\n    By Tim Davis, Texas A&M University. Note that while SuiteSparse:GraphBLAS\n    is itself under the Apache 2 license, any contributions derived from\n    SuiteSparse:GraphBLAS and incorporated by the Author into LAGraph are\n    contributed under the LAGraph license.\n2.  GraphBLAS Template Library (GBTL). Version 1.0.0\n    (https://github.com/cmu-sei/gbtl/blob/1.0.0)\n    Copyright 2015 Carnegie Mellon University and The Trustees of Indiana.\n    DM-0002659\n3.  GraphBLAS Template Library (GBTL). Version 3.0 (and prior versions)\n    (https://github.com/cmu-sei/gbtl/blob/3.0.0)\n    Copyright 2017-2020 Carnegie Mellon University, Battelle Memorial\n    Institute, and Authors. DM17-0037, DM18-0559, DM20-0442\n4.  Combinatorial BLAS, \n    (https://people.eecs.berkeley.edu/~aydin/CombBLAS/) \n    Copyright 2011-2018  The Regents of the University of California,\n    through Lawrence Berkeley National Laboratory (subject to receipt of any\n    required approvals from the U.S. Dept. of Energy) and University of\n    California, Santa Barbara. \n5.  GraphBLAST,\n    (https://github.com/gunrock/graphblast)\n    Copyright 2015-2019  The Regents of the University of California.\n\nLAGraph depends upon the following 3rd party libraries:\n\n    * json.h:  a simple JSON parser by Neil Henning,\n        ( https://github.com/sheredom/json.h ). Includes its own test suite.\n        required by experimental/utilities/LAGraph_SRead.c\n\n"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/LAGraph/Acknowledgments.txt",
      "technique": "file_exploration"
    }
  ],
  "authors": [
    {
      "confidence": 1,
      "result": {
        "email": "petsc-maint@mcs.anl.gov",
        "type": "Agent",
        "value": "ceed-users@llnl.gov"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "Ahmad",
        "last_name": "Abdelfattah",
        "name": "Ahmad Abdelfattah",
        "type": "Agent",
        "value": "Ahmad Abdelfattah"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/AUTHORS",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "Valeria",
        "last_name": "Barra",
        "name": "Valeria Barra",
        "type": "Agent",
        "value": "Valeria Barra"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/AUTHORS",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "Natalie",
        "last_name": "Beams",
        "name": "Natalie Beams",
        "type": "Agent",
        "value": "Natalie Beams"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/AUTHORS",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "Jed",
        "last_name": "Brown",
        "name": "Jed Brown",
        "type": "Agent",
        "value": "Jed Brown"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/AUTHORS",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "Jean-Sylvain",
        "last_name": "Camier",
        "name": "Jean-Sylvain Camier",
        "type": "Agent",
        "value": "Jean-Sylvain Camier"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/AUTHORS",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "Veselin",
        "last_name": "Dobrev",
        "name": "Veselin Dobrev",
        "type": "Agent",
        "value": "Veselin Dobrev"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/AUTHORS",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "Yohann",
        "last_name": "Dudouit",
        "name": "Yohann Dudouit",
        "type": "Agent",
        "value": "Yohann Dudouit"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/AUTHORS",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "Leila",
        "last_name": "Ghaffari",
        "name": "Leila Ghaffari",
        "type": "Agent",
        "value": "Leila Ghaffari"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/AUTHORS",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "Sebastian",
        "last_name": "Grimberg",
        "name": "Sebastian Grimberg",
        "type": "Agent",
        "value": "Sebastian Grimberg"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/AUTHORS",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "Tzanio",
        "last_name": "Kolev",
        "name": "Tzanio Kolev",
        "type": "Agent",
        "value": "Tzanio Kolev"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/AUTHORS",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "David",
        "last_name": "Medina",
        "name": "David Medina",
        "type": "Agent",
        "value": "David Medina"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/AUTHORS",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "Will",
        "last_name": "Pazner",
        "name": "Will Pazner",
        "type": "Agent",
        "value": "Will Pazner"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/AUTHORS",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "Thilina",
        "last_name": "Ratnayaka",
        "name": "Thilina Ratnayaka",
        "type": "Agent",
        "value": "Thilina Ratnayaka"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/AUTHORS",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "Rezgar",
        "last_name": "Shakeri",
        "name": "Rezgar Shakeri",
        "type": "Agent",
        "value": "Rezgar Shakeri"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/AUTHORS",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "Jeremy",
        "last_name": "L. Thompson",
        "name": "Jeremy L. Thompson",
        "type": "Agent",
        "value": "Jeremy L. Thompson"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/AUTHORS",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "Stan",
        "last_name": "Tomov",
        "name": "Stan Tomov",
        "type": "Agent",
        "value": "Stan Tomov"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/AUTHORS",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "James",
        "last_name": "Wright III",
        "name": "James Wright III",
        "type": "Agent",
        "value": "James Wright III"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/AUTHORS",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "Texas A&M University",
        "email": "scottk@tamu.edu",
        "identifier": "https://orcid.org/0000-0001-8340-0824",
        "type": "String",
        "value": "Scott Kolodziej"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "Texas A&M University",
        "email": "davis@tamu.edu",
        "identifier": "https://orcid.org/0000-0001-7614-6899",
        "type": "String",
        "value": "Timothy Davis"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "Microsoft Corporation",
        "identifier": "https://orcid.org/0000-0002-8689-5268",
        "type": "String",
        "value": "Nuri Yeralan"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "University of Florida",
        "email": "hager@ufl.edu",
        "type": "String",
        "value": "William Hager"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "datePublished": "2019",
        "format": "bibtex",
        "type": "File_dump",
        "value": "\n@article{10.1145/3322125,\nauthor = {Davis, Timothy A.},\ntitle = {Algorithm 1000: SuiteSparse:GraphBLAS: Graph Algorithms in the Language of Sparse Linear Algebra},\nyear = {2019},\nissue_date = {December 2019},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {45},\nnumber = {4},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/3322125},\ndoi = {10.1145/3322125},\nabstract = {SuiteSparse:GraphBLAS is a full implementation of the GraphBLAS standard, which defines a set of sparse matrix operations on an extended algebra of semirings using an almost unlimited variety of operators and types. When applied to sparse adjacency matrices, these algebraic operations are equivalent to computations on graphs. GraphBLAS provides a powerful and expressive framework for creating graph algorithms based on the elegant mathematics of sparse matrix operations on a semiring. An overview of the GraphBLAS specification is given, followed by a description of the key features and performance of its implementation in the SuiteSparse:GraphBLAS package.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {dec},\narticleno = {44},\nnumpages = {25},\nkeywords = {GraphBLAS, Graph algorithms, sparse matrices}\n}\n\n@book{FA02,\n    author={T. A. Davis},\n    title={Direct Methods for Sparse Linear Systems},\n    publisher={SIAM},\n    address={Philadelphia, PA},\n    year={2006},\n    url={https://doi.org/10.1137/1.9780898718881},\n    doi={10.1137/1.9780898718881}}\n\n\n@article{10.1145/2049662.2049670,\nauthor = {Davis, Timothy A.},\ntitle = {Algorithm 915, SuiteSparseQR: Multifrontal Multithreaded Rank-Revealing Sparse QR Factorization},\nyear = {2011},\nissue_date = {November 2011},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {38},\nnumber = {1},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/2049662.2049670},\ndoi = {10.1145/2049662.2049670},\nabstract = {SuiteSparseQR is a sparse QR factorization package based on the multifrontal method. Within each frontal matrix, LAPACK and the multithreaded BLAS enable the method to obtain high performance on multicore architectures. Parallelism across different frontal matrices is handled with Intel's Threading Building Blocks library. The symbolic analysis and ordering phase pre-eliminates singletons by permuting the input matrix A into the form [R11 R12; 0 A22] where R11 is upper triangular with diagonal entries above a given tolerance. Next, the fill-reducing ordering, column elimination tree, and frontal matrix structures are found without requiring the formation of the pattern of ATA. Approximate rank-detection is performed within each frontal matrix using Heath's method. While Heath's method is not always exact, it has the advantage of not requiring column pivoting and thus does not interfere with the fill-reducing ordering. For sufficiently large problems, the resulting sparse QR factorization obtains a substantial fraction of the theoretical peak performance of a multicore computer.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {dec},\narticleno = {8},\nnumpages = {22},\nkeywords = {least-square problems, sparse matrices, QR factorization}\n}\n\n@article{10.1145/3065870,\nauthor = {Yeralan, Sencer Nuri and Davis, Timothy A. and Sid-Lakhdar, Wissam M. and Ranka, Sanjay},\ntitle = {Algorithm 980: Sparse QR Factorization on the GPU},\nyear = {2017},\nissue_date = {June 2018},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {44},\nnumber = {2},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/3065870},\ndoi = {10.1145/3065870},\nabstract = {Sparse matrix factorization involves a mix of regular and irregular computation, which is a particular challenge when trying to obtain high-performance on the highly parallel general-purpose computing cores available on graphics processing units (GPUs). We present a sparse multifrontal QR factorization method that meets this challenge and is significantly faster than a highly optimized method on a multicore CPU. Our method factorizes many frontal matrices in parallel and keeps all the data transmitted between frontal matrices on the GPU. A novel bucket scheduler algorithm extends the communication-avoiding QR factorization for dense matrices by exploiting more parallelism and by exploiting the staircase form present in the frontal matrices of a sparse multifrontal method.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {aug},\narticleno = {17},\nnumpages = {29},\nkeywords = {GPU, QR factorization, least-square problems, sparse matrices}\n}\n\n@article{10.1145/1391989.1391995,\nauthor = {Chen, Yanqing and Davis, Timothy A. and Hager, William W. and Rajamanickam, Sivasankaran},\ntitle = {Algorithm 887: CHOLMOD, Supernodal Sparse Cholesky Factorization and Update/Downdate},\nyear = {2008},\nissue_date = {October 2008},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {35},\nnumber = {3},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/1391989.1391995},\ndoi = {10.1145/1391989.1391995},\nabstract = {CHOLMOD is a set of routines for factorizing sparse symmetric positive definite matrices of the form A or AAT, updating/downdating a sparse Cholesky factorization, solving linear systems, updating/downdating the solution to the triangular system Lx\u2009=\u2009b, and many other sparse matrix functions for both symmetric and unsymmetric matrices. Its supernodal Cholesky factorization relies on LAPACK and the Level-3 BLAS, and obtains a substantial fraction of the peak performance of the BLAS. Both real and complex matrices are supported. CHOLMOD is written in ANSI/ISO C, with both C and MATLABTM interfaces. It appears in MATLAB 7.2 as x\u2009=\u2009Ab when A is sparse symmetric positive definite, as well as in several other sparse matrix functions.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {oct},\narticleno = {22},\nnumpages = {14},\nkeywords = {sparse matrices, linear equations, Cholesky factorization}\n}\n\n@article{10.1145/1462173.1462176,\nauthor = {Davis, Timothy A. and Hager, William W.},\ntitle = {Dynamic Supernodes in Sparse Cholesky Update/Downdate and Triangular Solves},\nyear = {2009},\nissue_date = {February 2009},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {35},\nnumber = {4},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/1462173.1462176},\ndoi = {10.1145/1462173.1462176},\nabstract = {The supernodal method for sparse Cholesky factorization represents the factor L as a set of supernodes, each consisting of a contiguous set of columns of L with identical nonzero pattern. A conventional supernode is stored as a dense submatrix. While this is suitable for sparse Cholesky factorization where the nonzero pattern of L does not change, it is not suitable for methods that modify a sparse Cholesky factorization after a low-rank change to A (an update/downdate, undefined = A \u00b1 WWT). Supernodes merge and split apart during an update/downdate. Dynamic supernodes are introduced which allow a sparse Cholesky update/downdate to obtain performance competitive with conventional supernodal methods. A dynamic supernodal solver is shown to exceed the performance of the conventional (BLAS-based) supernodal method for solving triangular systems. These methods are incorporated into CHOLMOD, a sparse Cholesky factorization and update/downdate package which forms the basis of x = Ab MATLAB when A is sparse and symmetric positive definite.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {feb},\narticleno = {27},\nnumpages = {23},\nkeywords = {sparse matrices, linear equations, Cholesky factorization}\n}\n\n\n@article{doi:10.1137/S089547980343641X,\nauthor = {Davis, Timothy A. and Hager, William W.},\ntitle = {Row Modifications of a Sparse Cholesky Factorization},\njournal = {SIAM Journal on Matrix Analysis and Applications},\nvolume = {26},\nnumber = {3},\npages = {621-639},\nyear = {2005},\ndoi = {10.1137/S089547980343641X},\nURL = {https://doi.org/10.1137/S089547980343641X },\neprint = { https://doi.org/10.1137/S089547980343641X } ,\n    abstract = { Given a sparse, symmetric positive definite matrix C and an associated sparse Cholesky factorization LDL\\$\\tr\\$, we develop sparse techniques for updating the factorization after a symmetric modification of a row and column of C. We show how the modification in the Cholesky factorization associated with this rank-2 modification of C can be computed efficiently using a sparse rank-1 technique developed in [T. A. Davis and W. W. Hager, SIAM J. Matrix Anal. Appl., 20 (1999), pp. 606--627]. We also determine how the solution of a linear system Lx = b changes after changing a row and column of C or after a rank-r change in C. }\n}\n\n\n@article{doi:10.1137/S0895479899357346,\nauthor = {Davis, Timothy A. and Hager, William W.},\ntitle = {Multiple-Rank Modifications of a Sparse Cholesky Factorization},\njournal = {SIAM Journal on Matrix Analysis and Applications},\nvolume = {22},\nnumber = {4},\npages = {997-1013},\nyear = {2001},\ndoi = {10.1137/S0895479899357346},\nURL = { https://doi.org/10.1137/S0895479899357346 },\neprint = { https://doi.org/10.1137/S0895479899357346 } ,\n    abstract = { Given a sparse symmetric positive definite matrix \\$\\mathbf{AA}\\tr\\$ and an associated sparse Cholesky factorization \\$\\mathbf{LDL}\\tr\\$ or \\$\\mathbf{LL}\\tr\\$, we develop sparse techniques for updating the factorization after either adding a collection of columns to A or deleting a collection of columns from A. Our techniques are based on an analysis and manipulation of the underlying graph structure, using the framework developed in an earlier paper on rank-1 modifications [T. A. Davis and W. W. Hager, SIAM J. Matrix Anal. Appl., 20 (1999), pp. 606--627]. Computationally, the multiple-rank update has better memory traffic and executes much faster than an equivalent series of rank-1 updates since the multiple-rank update makes one pass through L computing the new entries, while a series of rank-1 updates requires multiple passes through L. }\n}\n\n\n\n@article{doi:10.1137/S0895479897321076,\nauthor = {Davis, Timothy A. and Hager, William W.},\ntitle = {Modifying a Sparse Cholesky Factorization},\njournal = {SIAM Journal on Matrix Analysis and Applications},\nvolume = {20},\nnumber = {3},\npages = {606-627},\nyear = {1999},\ndoi = {10.1137/S0895479897321076},\nURL = { https://doi.org/10.1137/S0895479897321076 },\neprint = { https://doi.org/10.1137/S0895479897321076 } ,\n    abstract = { Given a sparse symmetric positive definite matrix \\${\\bf AA}^{\\sf T}\\$ and an associated sparse Cholesky factorization \\${\\bf LDL}^{\\sf T}\\$ or \\${\\bf LL}^{\\sf T}\\$, we develop sparse techniques for obtaining the new factorization associated with either adding a column to \\${\\bf A}\\$ or deleting a column from \\${\\bf A}\\$. Our techniques are based on an analysis and manipulation of the underlying graph structure and on ideas of Gill et al.\\ [ Math. Comp., 28 (1974), pp. 505--535] for modifying a dense Cholesky factorization. We show that our methods extend to the general case where an arbitrary sparse symmetric positive definite matrix is modified. Our methods are optimal in the sense that they take time proportional to the number of nonzero entries in \\${\\bf L}\\$ and \\${\\bf D}\\$ that change. }\n}\n\n\n@article{RENNICH2016140,\ntitle = {Accelerating sparse Cholesky factorization on GPUs},\njournal = {Parallel Computing},\nvolume = {59},\npages = {140-150},\nyear = {2016},\nnote = {Theory and Practice of Irregular Applications},\nissn = {0167-8191},\ndoi = {https://doi.org/10.1016/j.parco.2016.06.004},\nurl = {https://www.sciencedirect.com/science/article/pii/S016781911630059X},\nauthor = {Steven C. Rennich and Darko Stosic and Timothy A. Davis},\nkeywords = {Sparse, Cholesky, Factorization, GPU, Parallel},\nabstract = {Sparse factorization is a fundamental tool in scientific computing. As the major component of a sparse direct solver, it represents the dominant computational cost for many analyses. For factorizations which involve sufficient dense math, the substantial computational capability provided by GPUs (Graphics Processing Units) can help alleviate this cost. However, for many other cases, the prevalence of small/irregular dense math and the relatively slow communication between the host and device over the PCIe bus, make it challenging to significantly accelerate sparse factorization using the GPU. In this paper we describe a left-looking supernodal Cholesky factorization algorithm which permits improved utilization of the GPU when factoring sparse matrices. The central idea is to stream subtrees of the elimination tree through the GPU and perform the factorization of each subtree entirely on the GPU. This avoids the majority of the PCIe communication without the need for a complex task scheduler. Importantly, within these subtrees, many independent, small, dense operations are batched to minimize kernel launch overhead and many of these batched kernels are executed concurrently to maximize device utilization. Performance results for commonly studied matrices are presented along with suggested actions for further optimization.}\n}\n\n@article{10.1145/1024074.1024081,\nauthor = {Amestoy, Patrick R. and Davis, Timothy A. and Duff, Iain S.},\ntitle = {Algorithm 837: AMD, an Approximate Minimum Degree Ordering Algorithm},\nyear = {2004},\nissue_date = {September 2004},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {30},\nnumber = {3},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/1024074.1024081},\ndoi = {10.1145/1024074.1024081},\nabstract = {AMD is a set of routines that implements the approximate minimum degree ordering algorithm to permute sparse matrices prior to numerical factorization. There are versions written in both C and Fortran 77. A MATLAB interface is included.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {sep},\npages = {381\u2013388},\nnumpages = {8},\nkeywords = {sparse matrices, Linear equations, ordering methods, minimum degree}\n}\n\n\n\n\n\n\n\n@article{doi:10.1137/S0895479894278952,\nauthor = {Amestoy, Patrick R. and Davis, Timothy A. and Duff, Iain S.},\ntitle = {An Approximate Minimum Degree Ordering Algorithm},\njournal = {SIAM Journal on Matrix Analysis and Applications},\nvolume = {17},\nnumber = {4},\npages = {886-905},\nyear = {1996},\ndoi = {10.1137/S0895479894278952},\nURL = { https://doi.org/10.1137/S0895479894278952 },\neprint = { https://doi.org/10.1137/S0895479894278952 } ,\n    abstract = { Abstract. An approximate minimum degree (AMD), ordering algorithm for preordering a symmetric sparse matrix prior to numerical factorization is presented. We use techniques based on the quotient graph for matrix factorization that allow us to obtain computationally cheap bounds for the minimum degree. We show that these bounds are often equal to the actual degree. The resulting algorithm is typically much faster than previous minimum degree ordering algorithms and produces results that are comparable in quality with the best orderings from other minimum degree algorithms. }\n}\n\n\n@article{10.1145/1024074.1024080,\nauthor = {Davis, Timothy A. and Gilbert, John R. and Larimore, Stefan I. and Ng, Esmond G.},\ntitle = {Algorithm 836: COLAMD, a Column Approximate Minimum Degree Ordering Algorithm},\nyear = {2004},\nissue_date = {September 2004},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {30},\nnumber = {3},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/1024074.1024080},\ndoi = {10.1145/1024074.1024080},\nabstract = {Two codes are discussed, COLAMD and SYMAMD, that compute approximate minimum degree orderings for sparse matrices in two contexts: (1) sparse partial pivoting, which requires a sparsity preserving column pre-ordering prior to numerical factorization, and (2) sparse Cholesky factorization, which requires a symmetric permutation of both the rows and columns of the matrix being factorized. These orderings are computed by COLAMD and SYMAMD, respectively. The ordering from COLAMD is also suitable for sparse QR factorization, and the factorization of matrices of the form ATA and AAT, such as those that arise in least-squares problems and interior point methods for linear programming problems. The two routines are available both in MATLAB and C-callable forms. They appear as built-in routines in MATLAB Version 6.0.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {sep},\npages = {377\u2013380},\nnumpages = {4},\nkeywords = {sparse nonsymmetric matrices, ordering methods, Linear equations}\n}\n\n@article{10.1145/1024074.1024079,\nauthor = {Davis, Timothy A. and Gilbert, John R. and Larimore, Stefan I. and Ng, Esmond G.},\ntitle = {A Column Approximate Minimum Degree Ordering Algorithm},\nyear = {2004},\nissue_date = {September 2004},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {30},\nnumber = {3},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/1024074.1024079},\ndoi = {10.1145/1024074.1024079},\nabstract = {Sparse Gaussian elimination with partial pivoting computes the factorization PAQ = LU of a sparse matrix A, where the row ordering P is selected during factorization using standard partial pivoting with row interchanges. The goal is to select a column preordering, Q, based solely on the nonzero pattern of A, that limits the worst-case number of nonzeros in the factorization. The fill-in also depends on P, but Q is selected to reduce an upper bound on the fill-in for any subsequent choice of P. The choice of Q can have a dramatic impact on the number of nonzeros in L and U. One scheme for determining a good column ordering for A is to compute a symmetric ordering that reduces fill-in in the Cholesky factorization of ATA. A conventional minimum degree ordering algorithm would require the sparsity structure of ATA to be computed, which can be expensive both in terms of space and time since ATA may be much denser than A. An alternative is to compute Q directly from the sparsity structure of A; this strategy is used by MATLAB's COLMMD preordering algorithm. A new ordering algorithm, COLAMD, is presented. It is based on the same strategy but uses a better ordering heuristic. COLAMD is faster and computes better orderings, with fewer nonzeros in the factors of the matrix.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {sep},\npages = {353\u2013376},\nnumpages = {24},\nkeywords = {linear equations, Sparse nonsymmetric matrices, ordering methods}\n}\n\n@article{10.1145/992200.992206,\nauthor = {Davis, Timothy A.},\ntitle = {Algorithm 832: UMFPACK V4.3---an Unsymmetric-Pattern Multifrontal Method},\nyear = {2004},\nissue_date = {June 2004},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {30},\nnumber = {2},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/992200.992206},\ndoi = {10.1145/992200.992206},\nabstract = {An ANSI C code for sparse LU factorization is presented that combines a column pre-ordering strategy with a right-looking unsymmetric-pattern multifrontal numerical factorization. The pre-ordering and symbolic analysis phase computes an upper bound on fill-in, work, and memory usage during the subsequent numerical factorization. User-callable routines are provided for ordering and analyzing a sparse matrix, computing the numerical factorization, solving a system with the LU factors, transposing and permuting a sparse matrix, and converting between sparse matrix representations. The simple user interface shields the user from the details of the complex sparse factorization data structures by returning simple handles to opaque objects. Additional user-callable routines are provided for printing and extracting the contents of these opaque objects. An even simpler way to use the package is through its MATLAB interface. UMFPACK is incorporated as a built-in operator in MATLAB 6.5 as x = Ab when A is sparse and unsymmetric.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {jun},\npages = {196\u2013199},\nnumpages = {4},\nkeywords = {ordering methods, multifrontal method, sparse nonsymmetric matrices, linear equations}\n}\n\n\n@article{10.1145/992200.992205,\nauthor = {Davis, Timothy A.},\ntitle = {A Column Pre-Ordering Strategy for the Unsymmetric-Pattern Multifrontal Method},\nyear = {2004},\nissue_date = {June 2004},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {30},\nnumber = {2},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/992200.992205},\ndoi = {10.1145/992200.992205},\nabstract = {A new method for sparse LU factorization is presented that combines a column pre-ordering strategy with a right-looking unsymmetric-pattern multifrontal numerical factorization. The column ordering is selected to give a good a priori upper bound on fill-in and then refined during numerical factorization (while preserving the bound). Pivot rows are selected to maintain numerical stability and to preserve sparsity. The method analyzes the matrix and automatically selects one of three pre-ordering and pivoting strategies. The number of nonzeros in the LU factors computed by the method is typically less than or equal to those found by a wide range of unsymmetric sparse LU factorization methods, including left-looking methods and prior multifrontal methods.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {jun},\npages = {165\u2013195},\nnumpages = {31},\nkeywords = {linear equations, multifrontal method, sparse nonsymmetric matrices, ordering methods}\n}\n\n@article{10.1145/305658.287640,\nauthor = {Davis, Timothy A. and Duff, Iain S.},\ntitle = {A Combined Unifrontal/Multifrontal Method for Unsymmetric Sparse Matrices},\nyear = {1999},\nissue_date = {March 1999},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {25},\nnumber = {1},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/305658.287640},\ndoi = {10.1145/305658.287640},\nabstract = {We discuss the organization of frontal matrices in multifrontal methods for the solution of large sparse sets of unsymmetric linear equations. In the multifrontal method, work on a frontal matrix can be suspended, the frontal matrix can be stored for later reuse, and a new frontal matrix can be generated. There are thus several frontal matrices stored during the factorization, and one or more of these are assembled (summed) when creating a new frontal matrix. Although this means that arbitrary sparsity patterns can be handled efficiently, extra work is required to sum the frontal matrices together and can be costly because indirect addressing is requred. The (uni)frontal method avoids this extra work by factorizing the matrix with a single frontal matrix. Rows and columns are added  to the frontal matrix, and pivot rows and columns are removed. Data movement is simpler, but higher fill-in can result if the matrix cannot be permuted into a variable-band form with small profile. We consider a combined unifrontal/multifrontal algorithm to enable general fill-in reduction orderings to be applied without the data movement of previous multifrontal approaches.  We discuss this technique in the context of a code designed for the solution of sparse systems with unsymmetric pattern.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {mar},\npages = {1\u201320},\nnumpages = {20},\nkeywords = {linear equations, frontal methods, sparse unsymmetric matrices, multifrontal methods}\n}\n\n\n\n\n\n\n\n\n@article{doi:10.1137/S0895479894246905,\nauthor = {Davis, Timothy A. and Duff, Iain S.},\ntitle = {An Unsymmetric-Pattern Multifrontal Method for Sparse LU Factorization},\njournal = {SIAM Journal on Matrix Analysis and Applications},\nvolume = {18},\nnumber = {1},\npages = {140-158},\nyear = {1997},\ndoi = {10.1137/S0895479894246905},\nURL = { https://doi.org/10.1137/S0895479894246905 },\neprint = { https://doi.org/10.1137/S0895479894246905 } ,\n    abstract = { Sparse matrix factorization algorithms for general problems are typically characterized by irregular memory access patterns that limit their performance on parallel-vector supercomputers. For symmetric problems, methods such as the multifrontal method avoid indirect addressing in the innermost loops by using dense matrix kernels. However, no efficient LU factorization algorithm based primarily on dense matrix kernels exists for matrices whose pattern is very unsymmetric. We address this deficiency and present a new unsymmetric-pattern multifrontal method based on dense matrix kernels. As in the classical multifrontal method, advantage is taken of repetitive structure in the matrix by factorizing more than one pivot in each frontal matrix, thus enabling the use of Level 2 and Level 3 BLAS. The performance is compared with the classical multifrontal method and other unsymmetric solvers on a CRAY C-98. }\n}\n\n\n@article{10.1145/2491491.2491498,\nauthor = {Davis, Timothy A.},\ntitle = {Algorithm 930: FACTORIZE: An Object-Oriented Linear System Solver for MATLAB},\nyear = {2013},\nissue_date = {July 2013},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {39},\nnumber = {4},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/2491491.2491498},\ndoi = {10.1145/2491491.2491498},\nabstract = {The MATLAB\u2122 backslash (x=Ab) is an elegant and powerful interface to a suite of high-performance factorization methods for the direct solution of the linear system Ax = b and the least-squares problem minx \u2016b - Ax\u2016. It is a meta-algorithm that selects the best factorization method for a particular matrix, whether sparse or dense. However, the simplicity and elegance of its single-character interface prohibits the reuse of its factorization for subsequent systems. Requiring MATLAB users to find the best factorization method on their own can lead to suboptimal choices; even MATLAB experts can make the wrong choice. Furthermore, naive MATLAB users have a tendency to translate mathematical expressions from linear algebra directly into MATLAB, so that x = A-1b becomes the inferior yet all-to-prevalent x=inv(A)*b. To address these issues, an object-oriented FACTORIZE method is presented. Via simple-to-use operator overloading, solving two linear systems can be written as F=factorize(A); x=Fb; y=Fc, where A is factorized only once. The selection of the best factorization method (LU, Cholesky, LDLT, QR, or a complete orthogonal decomposition for rank-deficient matrices) is hidden from the user. The mathematical expression x = A-1b directly translates into the MATLAB expression x=inverse(A)*b, which does not compute the inverse at all, but does the right thing by factorizing A and solving the corresponding triangular systems.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {jul},\narticleno = {28},\nnumpages = {18},\nkeywords = {object-oriented methods, least-square problems, matrix factorization, Linear systems}\n}\n\n\n@article{10.1145/1824801.1824814,\nauthor = {Davis, Timothy A. and Palamadai Natarajan, Ekanathan},\ntitle = {Algorithm 907: KLU, A Direct Sparse Solver for Circuit Simulation Problems},\nyear = {2010},\nissue_date = {September 2010},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {37},\nnumber = {3},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/1824801.1824814},\ndoi = {10.1145/1824801.1824814},\nabstract = {KLU is a software package for solving sparse unsymmetric linear systems of equations that arise in circuit simulation applications. It relies on a permutation to Block Triangular Form (BTF), several methods for finding a fill-reducing ordering (variants of approximate minimum degree and nested dissection), and Gilbert/Peierls\u2019 sparse left-looking LU factorization algorithm to factorize each block. The package is written in C and includes a MATLAB interface. Performance results comparing KLU with SuperLU, Sparse 1.3, and UMFPACK on circuit simulation matrices are presented. KLU is the default sparse direct solver in the XyceTMcircuit simulation package developed by Sandia National Laboratories.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {sep},\narticleno = {36},\nnumpages = {17},\nkeywords = {LU factorization, circuit simulation, sparse matrices}\n}\n\n@article{10.1145/1114268.1114277,\nauthor = {Davis, Timothy A.},\ntitle = {Algorithm 849: A Concise Sparse Cholesky Factorization Package},\nyear = {2005},\nissue_date = {December 2005},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {31},\nnumber = {4},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/1114268.1114277},\ndoi = {10.1145/1114268.1114277},\nabstract = {The LDL software package is a set of short, concise routines for factorizing symmetric positive-definite sparse matrices, with some applicability to symmetric indefinite matrices. Its primary purpose is to illustrate much of the basic theory of sparse matrix algorithms in as concise a code as possible, including an elegant method of sparse symmetric factorization that computes the factorization row-by-row but stores it column-by-column. The entire symbolic and numeric factorization consists of less than 50 executable lines of code. The package is written in C, and includes a MATLAB interface.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {dec},\npages = {587\u2013591},\nnumpages = {5},\nkeywords = {Cholesky factorization, linear equations, sparse matrices}\n}\n\n@article{10.1145/2049662.2049663,\nauthor = {Davis, Timothy A. and Hu, Yifan},\ntitle = {The University of Florida Sparse Matrix Collection},\nyear = {2011},\nissue_date = {November 2011},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {38},\nnumber = {1},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/2049662.2049663},\ndoi = {10.1145/2049662.2049663},\nabstract = {We describe the University of Florida Sparse Matrix Collection, a large and actively growing set of sparse matrices that arise in real applications. The Collection is widely used by the numerical linear algebra community for the development and performance evaluation of sparse matrix algorithms. It allows for robust and repeatable experiments: robust because performance results with artificially generated matrices can be misleading, and repeatable because matrices are curated and made publicly available in many formats. Its matrices cover a wide spectrum of domains, include those arising from problems with underlying 2D or 3D geometry (as structural engineering, computational fluid dynamics, model reduction, electromagnetics, semiconductor devices, thermodynamics, materials, acoustics, computer graphics/vision, robotics/kinematics, and other discretizations) and those that typically do not have such geometry (optimization, circuit simulation, economic and financial modeling, theoretical and quantum chemistry, chemical process simulation, mathematics and statistics, power networks, and other networks and graphs). We provide software for accessing and managing the Collection, from MATLAB\u2122, Mathematica\u2122, Fortran, and C, as well as an online search capability. Graph visualization of the matrices is provided, and a new multilevel coarsening scheme is proposed to facilitate this task.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {dec},\narticleno = {1},\nnumpages = {25},\nkeywords = {sparse matrices, Graph drawing, performance evaluation, multilevel algorithms}\n}\n\n\n@article{Kolodziej2019,\n  doi = {10.21105/joss.01244},\n  url = {https://doi.org/10.21105/joss.01244},\n  year = {2019},\n  publisher = {The Open Journal},\n  volume = {4},\n  number = {35},\n  pages = {1244},\n  author = {Scott P. Kolodziej and Mohsen Aznaveh and Matthew Bullock and Jarrett David and Timothy A. Davis and Matthew Henderson and Yifan Hu and Read Sandstrom},\n  title = {The SuiteSparse Matrix Collection Website Interface},\n  journal = {Journal of Open Source Software}\n}\n\n\n@article{10.1145/2513109.2513116,\nauthor = {Foster, Leslie V. and Davis, Timothy A.},\ntitle = {Algorithm 933: Reliable Calculation of Numerical Rank, Null Space Bases, Pseudoinverse Solutions, and Basic Solutions Using SuitesparseQR},\nyear = {2013},\nissue_date = {September 2013},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {40},\nnumber = {1},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/2513109.2513116},\ndoi = {10.1145/2513109.2513116},\nabstract = {The SPQR_RANK package contains routines that calculate the numerical rank of large, sparse, numerically rank-deficient matrices. The routines can also calculate orthonormal bases for numerical null spaces, approximate pseudoinverse solutions to least squares problems involving rank-deficient matrices, and basic solutions to these problems. The algorithms are based on SPQR from SuiteSparseQR (ACM Transactions on Mathematical Software 38, Article 8, 2011). SPQR is a high-performance routine for forming QR factorizations of large, sparse matrices. It returns an estimate for the numerical rank that is usually, but not always, correct. The new routines improve the accuracy of the numerical rank calculated by SPQR and reliably determine the numerical rank in the sense that, based on extensive testing with matrices from applications, the numerical rank is almost always accurately determined when our methods report that the numerical rank should be correct. Reliable determination of numerical rank is critical to the other calculations in the package. The routines work well for matrices with either small or large null space dimensions.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {oct},\narticleno = {7},\nnumpages = {23},\nkeywords = {QR factorization, pseudoinverse, Numerical rank, null space, rank revealing, sparse matrices}\n}\n\n@article{10.1145/3337792,\nauthor = {Davis, Timothy A. and Hager, William W. and Kolodziej, Scott P. and Yeralan, S. Nuri},\ntitle = {Algorithm 1003: Mongoose, a Graph Coarsening and Partitioning Library},\nyear = {2020},\nissue_date = {March 2020},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {46},\nnumber = {1},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/3337792},\ndoi = {10.1145/3337792},\nabstract = {Partitioning graphs is a common and useful operation in many areas, from parallel computing to VLSI design to sparse matrix algorithms. In this article, we introduce Mongoose, a multilevel hybrid graph partitioning algorithm and library. Building on previous work in multilevel partitioning frameworks and combinatoric approaches, we introduce novel stall-reducing and stall-free coarsening strategies, as well as an efficient hybrid algorithm leveraging (1) traditional combinatoric methods and (2) continuous quadratic programming formulations. We demonstrate how this new hybrid algorithm outperforms either strategy in isolation, and we also compare Mongoose to METIS and demonstrate its effectiveness on large and social networking (power law) graphs.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {mar},\narticleno = {7},\nnumpages = {18},\nkeywords = {vertex matching, Graph partitioning, graph coarsening}\n}\n\n\n@article{10.1145/3519024,\nauthor = {Lourenco, Christopher and Chen, Jinhao and Moreno-Centeno, Erick and Davis, Timothy A.},\ntitle = {Algorithm 1021: SPEX Left LU, Exactly Solving Sparse Linear Systems via a Sparse Left-Looking Integer-Preserving LU Factorization},\nyear = {2022},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/3519024},\ndoi = {10.1145/3519024},\nabstract = {SPEX Left LU is a software package for exactly solving unsymmetric sparse linear systems. As a component of the sparse exact (SPEX) software package, SPEX Left LU can be applied to any input matrix, A, whose entries are integral, rational, or decimal, and provides a solution to the system Ax = b which is either exact or accurate to user-specified precision. SPEX Left LU preorders the matrix A with a user-specified fill-reducing ordering and computes a left-looking LU factorization with the special property that each operation used to compute the L and U matrices is integral. Notable additional applications of this package include benchmarking the stability and accuracy of state-of-the-art linear solvers, and determining whether singular-to-double-precision matrices are indeed singular. Computationally, this paper evaluates the impact of several novel pivoting schemes in exact arithmetic, benchmarks the exact iterative solvers within Linbox, and benchmarks the accuracy of MATLAB sparse backslash. Most importantly, it is shown that SPEX Left LU outperforms the exact iterative solvers in run time on easy instances and in stability as the iterative solver fails on a sizeable subset of the tested (both easy and hard) instances. The SPEX Left LU package is written in ANSI C, comes with a MATLAB interface, and is distributed via GitHub, as a component of the SPEX software package, and as a component of SuiteSparse.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {jun},\nkeywords = {exact matrix factorization, sparse linear systems, sparse matrix algorithms, exactly solving linear systems, roundoff errors}\n}\n\n"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/CITATION.bib",
      "technique": "file_exploration"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "## Code of Conduct:\n\nhttps://en.wikipedia.org/wiki/Golden_Rule\n\n## Scope:\n\nUniversal.  When in doubt, assume the rule applies to you as it does to\nthe most sensitive person you can imagine (your grandmother, perhaps).\nPut yourself in their shoes, and then apply the rule to them.  Then\ntreat that person in the same manner.  This addresses the one major\npossible criticism of the Golden Rule\n( https://en.wikipedia.org/wiki/Golden_Rule#Criticism )\n\n## Enforcement:\n\nContact Tim Davis, DrTimothyAldenDavis@gmail.com.  I take this very\nseriously.\n"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/OpenDigitalTwin-Dev/NLA"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://libceed.org"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://slepc.upv.es/"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://petsc.org/"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ScottKolo/Mongoose"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "continuous_integration": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://travis-ci.com/ScottKolo/Mongoose"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing to SuiteSparse\n\nTo add an issue for a bug report (gasp!) or a feature request,\nyou can use the issue tracker on github.com, at\n[`https://github.com/DrTimothyAldenDavis/SuiteSparse/issues`]\n(https://github.com/DrTimothyAldenDavis/SuiteSparse/issues).\n\nTo contribute code, you can submit a pull request.  To do so,\nyou must first agree to the Contributor License Agreement\n[`CONTRIBUTOR-LICENSE.txt`](CONTRIBUTOR-LICENSE.txt).\nPrint a copy of the txt file (as a PDF), sign and date it,\nand email it to me at DrTimothyAldenDavis@gmail.com.  Pull\nrequests will only be included into SuiteSparse after I receive\nyour email with the signed PDF.\n\nDo not submit a pull request to the default branch.\nInstead, use the dev or dev2 branches.\n\n"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "contributors": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributions to the OpenBLAS project\n\n## Creator & Maintainer\n\n* Zhang Xianyi <traits.zhang@gmail.com>\n\n## Active Developers\n\n* Wang Qian <traz0824@gmail.com>\n  * Optimize BLAS3 on ICT Loongson 3A.\n  * Optimize BLAS3 on Intel Sandy Bridge.\n\n* Werner Saar <wernsaar@googlemail.com>\n  * [2013-03-04] Optimize AVX and FMA4 DGEMM on AMD Bulldozer\n  * [2013-04-27] Optimize AVX and FMA4 TRSM on AMD Bulldozer\n  * [2013-06-09] Optimize AVX and FMA4 SGEMM on AMD Bulldozer\n  * [2013-06-11] Optimize AVX and FMA4 ZGEMM on AMD Bulldozer\n  * [2013-06-12] Optimize AVX and FMA4 CGEMM on AMD Bulldozer\n  * [2013-06-16] Optimize dgemv_n kernel on AMD Bulldozer\n  * [2013-06-20] Optimize ddot, daxpy kernel on AMD Bulldozer\n  * [2013-06-21] Optimize dcopy kernel on AMD Bulldozer\n  * Porting and Optimization on ARM Cortex-A9\n  * Optimization on AMD Piledriver\n  * Optimization on Intel Haswell\n\n* Chris Sidebottom <chris.sidebottom@arm.com>\n  * Optimizations and other improvements targeting AArch64\n\n## Previous Developers\n\n* Zaheer Chothia <zaheer.chothia@gmail.com>\n  * Improve the compatibility about complex number\n  * Build LAPACKE: C interface to LAPACK\n  * Improve the windows build.\n\n* Chen Shaohu <huhumartinwar@gmail.com>\n  * Optimize GEMV on the Loongson 3A processor.\n\n* Luo Wen\n  * Intern. Test Level-2 BLAS.\n\n## Contributors\n\nIn chronological order:\n\n* pipping <http://page.mi.fu-berlin.de/pipping>\n  * [2011-06-11] Make USE_OPENMP=0 disable openmp.\n\n* Stefan Karpinski <stefan@karpinski.org>\n  * [2011-12-28] Fix a bug about SystemStubs on Mac OS X.\n\n* Alexander Ebersp\u00e4cher <https://github.com/aeberspaecher>\n  * [2012-05-02] Add note on patch for segfaults on Linux kernel 2.6.32.\n\n* Mike Nolta <mike@nolta.net>\n  * [2012-05-19] Fix building bug on FreeBSD and NetBSD.\n\n* Sylvestre Ledru <https://github.com/sylvestre>\n  * [2012-07-01] Improve the detection of sparc. Fix building bug under\n    Hurd and kfreebsd.\n\n* Jameson Nash <https://github.com/vtjnash>\n  * [2012-08-20] Provide support for passing CFLAGS, FFLAGS, PFLAGS, FPFLAGS to\n    make on the command line.\n\n* Alexander Nasonov <alnsn@yandex.ru>\n  * [2012-11-10] Fix NetBSD build.\n\n* S\u00e9bastien Villemot <sebastien@debian.org>\n  * [2012-11-14] Fix compilation with TARGET=GENERIC. Patch applied to Debian package.\n  * [2013-08-28] Avoid failure on qemu guests declaring an Athlon CPU without 3dnow!\n\n* Kang-Che Sung <Explorer09@gmail.com>\n  * [2013-05-17] Fix typo in the document. Re-order the architecture list in getarch.c.\n\n* Kenneth Hoste <kenneth.hoste@gmail.com>\n  * [2013-05-22] Adjust Makefile about downloading LAPACK source files.\n\n* Lei WANG <https://github.com/wlbksy>\n  * [2013-05-22] Fix a bug about wget.\n\n* Dan Luu <http://www.linkedin.com/in/danluu>\n  * [2013-06-30] Add Intel Haswell support (using sandybridge optimizations).\n\n* grisuthedragon <https://github.com/grisuthedragon>\n  * [2013-07-11] create openblas_get_parallel to retrieve information which parallelization\n    model is used by OpenBLAS.\n\n* Elliot Saba <staticfloat@gmail.com>\n  * [2013-07-22] Add in return value for `interface/trtri.c`\n\n* S\u00e9bastien Fabbro <bicatali@gentoo.org>\n  * [2013-07-24] Modify makefile to respect user's LDFLAGS\n  * [2013-07-24] Add stack markings for GNU as arch-independent for assembler files\n\n* Viral B. Shah <viral@mayin.org>\n  * [2013-08-21] Patch LAPACK XLASD4.f as discussed in JuliaLang/julia#2340\n\n* Lars Buitinck <https://github.com/larsmans>\n  * [2013-08-28] get rid of the generated cblas_noconst.h file\n  * [2013-08-28] Missing threshold in gemm.c\n  * [2013-08-28] fix default prefix handling in makefiles\n\n* yieldthought <https://github.com/yieldthought>\n  * [2013-10-08] Remove -Wl,--retain-symbols-file from dynamic link line to fix tool support\n\n* Keno Fischer <https://github.com/loladiro>\n  * [2013-10-23] Use FC instead of CC to link the dynamic library on OS X\n\n* Christopher Meng <cickumqt@gmail.com>\n  * [2013-12-09] Add DESTDIR support for easier building on RPM based distros.\n                 Use install command instead of cp to install files with permissions control.\n\n* Lucas Beyer <lucasb.eyer.be@gmail.com>\n  * [2013-12-10] Added support for NO_SHARED in make install.\n\n* carlkl <https://github.com/carlkl>\n  * [2013-12-13] Fixed LAPACKE building bug on Windows\n\n* Isaac Dunham <https://github.com/idunham>\n  * [2014-08-03] Fixed link error on Linux/musl\n\n* Dave Nuechterlein\n  * [2014-10-10] trmm and sgemm kernels (optimized for APM's X-Gene 1).\n                 ARMv8 support.\n\n* Jerome Robert <jeromerobert@gmx.com>\n  * [2015-01-01] Speed-up small `ger` and `gemv` using stack allocation (bug #478)\n  * [2015-12-23] `stack_check` in `gemv.c` (bug #722)\n  * [2015-12-28] Allow to force the number of parallel make job\n  * [2015-12-28] Fix detection of AMD E2-3200 detection\n  * [2015-12-31] Let `make MAX_STACK_ALLOC=0` do what expected\n  * [2016-01-19] Disable multi-threading in `ger` and `swap` for small matrices (bug #731)\n  * [2016-01-24] Use `GEMM_MULTITHREAD_THRESHOLD` as a number of ops (bug #742)\n  * [2016-01-26] Let `openblas_get_num_threads` return the number of active threads (bug #760)\n  * [2016-01-30] Speed-up small `zger`, `zgemv`, `ztrmv` using stack allocation (bug #727)\n\n* Dan Kortschak\n  * [2015-01-07] Added test for drotmg bug #484.\n\n* Ton van den Heuvel <https://github.com/ton>\n  * [2015-03-18] Fix race condition during shutdown causing a crash in gotoblas_set_affinity().\n\n* Martin Koehler <https://github.com/grisuthedragon/>\n  * [2015-09-07] Improved imatcopy\n\n* Ashwin Sekhar T K <https://github.com/ashwinyes/>\n  * [2015-11-09] Assembly kernels for Cortex-A57 (ARMv8)\n  * [2015-11-20] lapack-test fixes for Cortex-A57\n  * [2016-03-14] Additional functional Assembly Kernels for Cortex-A57\n  * [2016-03-14] Optimize Dgemm 4x4 for Cortex-A57\n\n* theoractice <https://github.com/theoractice/>\n  * [2016-03-20] Fix compiler error in VisualStudio with CMake\n  * [2016-03-22] Fix access violation on Windows while static linking\n\n* Paul Musti\u00e8re <https://github.com/buffer51/>\n  * [2016-02-04] Fix Android build on ARMV7\n  * [2016-04-26] Android build with LAPACK for ARMV7 & ARMV8\n\n* Shivraj Patil <https://github.com/sva-img/>\n  * [2016-05-03] DGEMM optimization for MIPS P5600 and I6400 using MSA\n\n* Kaustubh Raste <https://github.com/ksraste/>\n  * [2016-05-09] DTRSM optimization for MIPS P5600 and I6400 using MSA\n  * [2016-05-20] STRSM optimization for MIPS P5600 and I6400 using MSA\n\n* Abdelrauf  <https://github.com/quickwritereader>\n  * [2017-01-01] dgemm and dtrmm kernels for IBM z13\n  * [2017-02-26] ztrmm kernel for IBM z13\n  * [2017-03-13] strmm and ctrmm kernel for IBM z13\n  * [2017-09-01] initial Blas Level-1,2 (double precision) for IBM z13\n  * [2018-03-07] added missing Blas Level 1-2  (double precision) simd codes\n  * [2019-02-01] added missing Blas Level-1,2 (single precision)  simd codes\n  * [2019-03-14] power9 dgemm/dtrmm kernel\n  * [2019-04-29] power9 sgemm/strmm kernel \n\n* Jiachen Wang <https://github.com/wjc404>\n  * [2019-07-29] optimize AVX2 DGEMM\n  * [2019-10-20] AVX512 DGEMM kernel (4x8)\n  * [2019-11-06] optimize AVX512 SGEMM\n  * [2019-11-12] AVX512 CGEMM & ZGEMM kernels\n  * [2019-12-23] optimize AVX2 CGEMM and ZGEMM\n  * [2019-12-30] AVX2 CGEMM3M & ZGEMM3M kernels\n  * [2020-01-07] optimize AVX2 SGEMM and STRMM\n\n* Rajalakshmi Srinivasaraghavan <https://github.com/RajalakshmiSR>\n  * [2020-04-15] Half-precision GEMM for bfloat16\n\n* Marius Hillenbrand <https://github.com/mhillenibm>\n  * [2020-05-12] Revise dynamic architecture detection for IBM z\n  * [2020-05-12] Add new sgemm and strmm kernel for IBM z14\n  * [2020-09-07] Fix builds with clang on IBM z, including dynamic architecture support\n\n* Danfeng Zhang <https://github.com/craft-zhang>\n  * [2020-05-20] Improve performance of SGEMM and STRMM on Arm Cortex-A53\n\n* PingTouGe Semiconductor Co., Ltd.\n  * [2020-10] Add RISC-V Vector (0.7.1) support. Optimize BLAS kernels for Xuantie C910\n\n* River Dillon <oss@outerpassage.net>\n  * [2021-07-10] fix compilation with musl libc\n\n* Bine Brank <https://github.com/binebrank>\n  * [2021-10-27] Add vector-length-agnostic DGEMM kernels for Arm SVE\n  * [2021-11-20] Vector-length-agnostic Arm SVE copy routines for DGEMM, DTRMM, DSYMM\n  * [2021-11-12] SVE kernels for SGEMM, STRMM and corresponding SVE copy functions\n  * [2022-01-06] SVE kernels for CGEMM, ZGEMM, CTRMM, ZTRMM and corresponding SVE copy functions\n  * [2022-01-18] SVE kernels and copy functions for TRSM\n\n* Ilya Kurdyukov <https://github.com/ilyakurdyukov>\n  * [2021-02-21] Add basic support for the Elbrus E2000 architecture\n\n* PLCT Lab, Institute of Software Chinese Academy of Sciences\n  * [2022-03] Support RISC-V Vector Intrinisc 1.0 version.\n  \n* Pablo Romero <https://github.com/pablorcum>\n  * [2022-08] Fix building from sources for QNX\n\n* Mark Seminatore <https://github.com/mseminatore>\n  * [2023-11-09] Improve Windows threading performance scaling\n  * [2024-02-09] Introduce MT_TRACE facility and improve code consistency\n\n* Dirreke <https://github.com/mseminatore>\n  * [2024-01-16] Add basic support for the CSKY architecture\n"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/openblas/CONTRIBUTORS.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-18T05:14:12Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2018-04-09"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_published": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2018-05-25"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2025-05-31T02:42:20Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2024-03-22"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Numerical Linear Algebra"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "libCEED: Code for Efficient Extensible Discretization"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Mongoose is a hybrid graph partitioning library."
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "development_status": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "active"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/OpenDigitalTwin-Dev/NLA/tree/main/lapack/DOCS"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/OpenDigitalTwin-Dev/NLA/tree/main/hypre/src/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/OpenDigitalTwin-Dev/NLA/tree/main/hypre/src/examples/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/OpenDigitalTwin-Dev/NLA/tree/main/openblas/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/OpenDigitalTwin-Dev/NLA/tree/main/openblas/lapack-netlib/DOCS"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/OpenDigitalTwin-Dev/NLA/releases"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ScottKolo/Mongoose/archive/v3.3.3.zip"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/examples/python/tutorial-5-operator.ipynb"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/examples/python/tutorial-5-operator.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/examples/python/tutorial-0-ceed.ipynb"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/examples/python/tutorial-0-ceed.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/examples/python/tutorial-6-shell.ipynb"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/examples/python/tutorial-6-shell.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/examples/python/tutorial-4-qfunction.ipynb"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/examples/python/tutorial-4-qfunction.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/examples/python/tutorial-2-elemrestriction.ipynb"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/examples/python/tutorial-2-elemrestriction.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/examples/python/tutorial-1-vector.ipynb"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/examples/python/tutorial-1-vector.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/examples/python/tutorial-3-basis.ipynb"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/examples/python/tutorial-3-basis.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/binding/petsc4py/docs/ipynb/dmplex.ipynb"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/binding/petsc4py/docs/ipynb/dmplex.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/OpenDigitalTwin-Dev/NLA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OpenDigitalTwin-Dev/NLA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Numerical Linear Algebra Suite"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "setup.py",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/setup.py"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/setup.py",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "pyproject.toml",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/pyproject.toml"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/pyproject.toml",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "requirements.txt",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/requirements.txt"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/requirements.txt",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "requirements.txt",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/doc/sphinx/requirements.txt"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/doc/sphinx/requirements.txt",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "requirements.txt",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/scripts/requirements.txt"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/scripts/requirements.txt",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "setup.py",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/setup.py"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/setup.py",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "pyproject.toml",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/pyproject.toml"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/pyproject.toml",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "setup.py",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/src/binding/slepc4py/setup.py"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/src/binding/slepc4py/setup.py",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "pyproject.toml",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/src/binding/slepc4py/pyproject.toml"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/src/binding/slepc4py/pyproject.toml",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "setup.py",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/setup.py"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/setup.py",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "pyproject.toml",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/pyproject.toml"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/pyproject.toml",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "setup.py",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/binding/petsc4py/setup.py"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/binding/petsc4py/setup.py",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "pyproject.toml",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/binding/petsc4py/pyproject.toml"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/binding/petsc4py/pyproject.toml",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "setup.py",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/binding/petsc4py/demo/legacy/wrap-f2py/setup.py"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/binding/petsc4py/demo/legacy/wrap-f2py/setup.py",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "setup.py",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/binding/petsc4py/demo/legacy/wrap-cython/setup.py"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/binding/petsc4py/demo/legacy/wrap-cython/setup.py",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "setup.py",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/binding/petsc4py/demo/legacy/wrap-swig/setup.py"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/binding/petsc4py/demo/legacy/wrap-swig/setup.py",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/docker/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/docker/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "requirements.txt",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/packages/Search/examples/viz/requirements.txt"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/packages/Search/examples/viz/requirements.txt",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "docker_compose",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/packages/Search/docker/docker-compose.yml"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/packages/Search/docker/docker-compose.yml",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/packages/Search/docker/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/packages/Search/docker/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "requirements.txt",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/packages/Search/scripts/requirements.txt"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/packages/Search/scripts/requirements.txt",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "requirements.txt",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/tribits/doc/sphinx/requirements.txt"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/tribits/doc/sphinx/requirements.txt",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "requirements.txt",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/docs/usr-manual/requirements.txt"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/docs/usr-manual/requirements.txt",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/LAGraph/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/LAGraph/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "requirements.txt",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/LAGraph/rtdocs/requirements.txt"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/LAGraph/rtdocs/requirements.txt",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "setup.py",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/SPEX/Python/SPEXpy/setup.py"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/SPEX/Python/SPEXpy/setup.py",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/GraphBLAS/cpu_features/ci/docker/toolchain/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/GraphBLAS/cpu_features/ci/docker/toolchain/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/GraphBLAS/cpu_features/ci/docker/amd64/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/GraphBLAS/cpu_features/ci/docker/amd64/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/GraphBLAS/cpu_features/.github/workflows/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/GraphBLAS/cpu_features/.github/workflows/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_package_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "pyproject.toml"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "pyproject.toml"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "pyproject.toml"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/src/binding/slepc4py/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "pyproject.toml"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "pyproject.toml"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/binding/petsc4py/pyproject.toml",
      "technique": "code_parser"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/uninstall.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/examples/fluids/conv_test.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/examples/nek/nek-examples.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/python/test-wheel.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/benchmarks/petsc-bpsraw.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/benchmarks/petsc-bps.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/benchmarks/benchmark.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/.flock.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/.mktmp.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/.state.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/uninstall.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/scripts/tool_getenvars.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/scripts/tool_analyze.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/scripts/tool_inspector.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/scripts/tool_envrestore.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/scripts/tool_logrept.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/scripts/libxsmm_source.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/scripts/tool_logperf.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/scripts/tool_test.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/scripts/tool_cpuinfo.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/scripts/tool_pexec.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/uninstall.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/lib/slepc/bin/maint/listauthors.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/lib/slepc/bin/maint/listexamples.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/src/binding/slepc4py/conf/cythonize.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/uninstall.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/config/petsc_harness.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/ts/tutorials/extchem.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/ts/tutorials/hybrid/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/benchmarks/run_petsc_benchmarks.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/binding/petsc4py/conf/cythonize.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/strumpack/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/strumpack/.ci_tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/strumpack/example_build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/strumpack/uninstall.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/strumpack/src/fortran/run_swig.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/strumpack/src/structured/fortran/run_swig.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/config.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/.travis_tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/.ci_tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/run_cmake_build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/cmake_thimble.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/config_cleanlinux.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/uninstall.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_ascent_gcc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_summit_ibm_7cpu1gpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_hybridOMPMPI_3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_sunspot_oneAPI_mkl_cpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_summit_gcc_cuda10_3dtrisolve.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_perlmutter_gcc_nogpu_concurrent.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_spock_gnu_nogpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_hybridOMPMPI.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_summit_4k.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_frontier_gnu_gpu_hip_amd.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_vtune.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_summit_ibm.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_summit_nvshmem_gpu_Nan.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_tulip_cce_hip.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_spock_cce_hip.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_traverse_pgi.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_summit_ibm_gpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_summit_ibm_nvshmem.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_spock_gcc_hip.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_tulip_cce_gpu_cuda.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_cori_openmpi4.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_perlmutter_gcc_gpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_perlmutter_gcc_nvshmem.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_sunspot_intel_nogpu_OMP.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_perlmutter_3dsolve_nvidia_nvshmem.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_perlmutter_gcc_nvshmem_openblas.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_perlmutter_nvidia_nvshmem_longint.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_traverse.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_tulip_cce_gpu_hip_nvidia.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit8.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit9.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_summit_nvshmem_3dsolve_gpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_perlmutter_gcc_nogpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_summit_gcc_gpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_summit_nvshmem_gpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_perlmutter_gcc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_summit_nvshmem_2dsolve_gpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_cori_haswell_gcc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_haswell_openmpi4.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_summit_gcc_gpu_10.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_pureOMP_1.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_hybridOMPMPI_6.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_crusher_gcc_hip_3dsolve.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit6.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_spock_gnu_gpu_hip_amd.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_perlmutter_nvidia_nvshmem.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_tulip_cce_gpu_hip_amd.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_debug.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit4.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_hybridOMPMPI_4.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_perlmutter_nvidia_nvshmem.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_sunspot_oneAPI_openblas_cpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_tulip_gcc_gpu_cuda.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_cori_gpu_openmpi4.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_instinct_gnu_gpu_hip_amd.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_summit_gcc_nogpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_haswell_intel.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_crusher_gcc_hip.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_tulip_cce_nogpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit11.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_spock_cce_gpu_hip_amd.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_cori_gpu_openmpi4.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_perlmutter_gcc_gpu_openblas.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_jlse.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/pddrive3d.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_sunspot_intel_nogpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_perlmutter_gcc_gpu_longint.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_crusher_gnu_nogpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_crusher_gnu_gpu_hip_amd.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_perlmutter_gcc_nvshmem_longint.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_perlmutter_gcc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_summit_gcc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit5.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_tulip_gcc_nogpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_hybridOMPMPI5.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_perlmutter_3dsolve_nvidia_nvshmem_single.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_cori_gpu_nvshmem.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_summit_gcc_cuda10_pdtesthang.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_summit_gcc_cuda10.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_haswell_gnu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_hybridOMPMPI_2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_tulip_cce_cuda.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_perlmutter_3dsolve_nvidia_nvshmem_complex.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_perlmutter_3dsolve_gcc_nvshmem_complex.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_perlmutter_nvhpc_gpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit7.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit10.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_tulip_gcc_nogpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_frontier_gcc_hip.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/install_nvshmem_perlmutter.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_traverse_pgi20_openmp_06_01_21.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_perlmutter_3dsolve_gcc_nvshmem_openblas.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_perlmutter_3dsolve_gcc_nvshmem.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_tulip_cce_nogpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/nvshmem_run_6node.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_traverse_sml.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/batch_script_mpi_runit_tulip_gcc_nvdia.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu_dist/example_scripts/run_cmake_build_perlmutter_gcc_nogpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/faspsolver/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/faspsolver/uninstall.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/faspsolver/benchmark/makeinstall.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/faspsolver/benchmark/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/faspsolver/util/stat.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/faspsolver/util/setup.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/faspsolver/util/compreg.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/faspsolver/util/fix_fenics.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/faspsolver/util/memusg.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/faspsolver/util/rmctrlm.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/faspsolver/util/backup.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/faspsolver/util/change_tabs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/faspsolver/util/push2sf.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/faspsolver/util/clearexe.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/faspsolver/util/fhead.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/faspsolver/util/push2mg.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sparse_checkout.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/uninstall.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-sierra-smp.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-trilinos-test2-jw.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-sems-intel-16.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-rodimus.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/osx-homme-gnu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-godel-remote.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/egext-rabartl.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-fissile4.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-brain-trilinos-toolset.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-trilinos-test2-rabartl.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-using-sems-modules.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-godel.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-alegra-westley.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-brain-gcc-4.5.1-rpath.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-orthanc-remote-test-push.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-neams-smp.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/remote_sync_repo_s915879.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-scicolan-nightly.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-brain.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-brain-gcc-4.5.1.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-orthanc-remote-test-push-zan-remote-driver.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-trilinos-test2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-gabriel.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-local.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-cygwin-rabartl.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-trilinos-test2-remote-jw.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-cee-compute011.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-s903186.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-s903186-rabartl.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/checkin-test-scicolan-rabartl.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/git-profiles/git-config-bartlettra.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/sampleScripts/git-profiles/git-config-dridzal.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/docker/travis/check_no_trailing_whitespaces_or_tabs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/docker/travis/check_doxygen_documentation.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/docker/travis/check_build_sphinx_documentation.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/docker/travis/check_format_cpp.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/scripts/changelog.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/scripts/check_no_trailing_whitespaces_or_tabs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/scripts/set_kokkos_env.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/scripts/setup_hooks.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/scripts/check_format_cpp.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/packages/Search/scripts/check_format_cpp.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/common_tools/cloc/cloc-core-langauges.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/common_tools/cloc/cloc-script-langauges.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/common_tools/git/find_largest_git_files.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/common_tools/git/sparse_checkout.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/common_tools/git/hooks/full_repo_setup.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/common_tools/git/hooks/setup-shared-repo.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/common_tools/git/hooks/copy_hooks_scripts.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/common_tools/setup/setup-shared-dir.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/refactoring/remove_std_tribits_includes_r.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/tribits/python_utils/gitdist-setup.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/tribits/python_utils/git-config-alias.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/tribits/examples/TribitsExampleProject/sampleScripts/linux-serial-debug.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/tribits/examples/TribitsExampleProject/sampleScripts/linux-mpi-debug.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/tribits/examples/TribitsExampleProject/packages/with_subpackages/b/stuff/exec_script.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/tribits/doc/publish_docs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/tribits/doc/build_docs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/tribits/doc/build_ref/create-build-ref.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/tribits/doc/tutorial/generate-tutorial.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/tribits/doc/developers_guide/generate-dev-guide.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/tribits/doc/developers_guide/scripts/dummy_test_commit.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/cmake/tribits/tribits/doc/utils/gen_doc_utils.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/commonTools/framework/get-changed-trilinos-packages.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/commonTools/framework/get-changed-trilinos-packages-helpers.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/commonTools/framework/get-changed-trilinos-packages-helpers-unit-tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/commonTools/framework/github_issue_creator/create_trilinos_github_test_failure_issue_driver.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/commonTools/buildTools/install-package-scripts.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/commonTools/stuff/sizes_of_package_source_and_dir.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/commonTools/git/log_pushes/log_pushed_commits.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/commonTools/git/log_pushes/loop_log_pushed_commits.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/commonTools/build_stats/remove_all_target_timing_files.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/commonTools/refactoring/refactors/remove_kokkos_subpackages_r.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/commonTools/refactoring/refactors/remove_kokkos_subpackages_change_test_names_r.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/commonTools/refactoring/refactors/remove_kokkos_subpackages_from_trilinos_packages_r.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/doc/build_ref/create-build-ref.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/load_sems_dev_env.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/unload_sems_dev_env.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/update-tribits-snapshot.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/backouts/bad_zoltan_commit_20100312.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/sems/checkin-test-sems.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/sems/get_default_modules.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/checkin-test-atdm.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/atdm_devops_install_defaults.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/ctest-s-local-test-driver.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/load-env.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/cts1empire/custom_builds_unit_tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/cts1empire/environment_new.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/cts1empire/environment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/cts1empire/all_supported_builds.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/cts1empire/custom_builds.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/cts1/custom_builds_unit_tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/cts1/environment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/cts1/all_supported_builds.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/cts1/custom_builds.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/contributed/weaver/environment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/contributed/spack-rhel/environment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/contributed/spack-rhel/all_supported_builds.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/contributed/spack-rhel/custom_builds.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/contributed/blake/environment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/contributed/kokkos-dev-2/environment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/examples/my-sems-rhel7-config/environment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/van1-tx2/custom_builds_unit_tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/van1-tx2/environment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/van1-tx2/all_supported_builds.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/van1-tx2/custom_builds.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/cee-rhel7/custom_builds_unit_tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/cee-rhel7/environment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/cee-rhel7/all_supported_builds.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/cee-rhel7/custom_builds.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/ats1/custom_builds_unit_tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/ats1/environment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/ats1/all_supported_builds.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/ats1/custom_builds.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/common/define_run_on_slurm_compute_node_func.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/common/define_run_on_local_node_func.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/common/define_run_on_lsf_compute_node_func.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/common/toss3/environment_new.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/common/toss3/environment_tlcc2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/sems-rhel7/environment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/sems-rhel7/all_supported_builds.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/utils/get_system_info_utils.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/utils/unset_atdm_config_vars_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/utils/set_build_options.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/utils/kokkos_arch_array.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/utils/get_known_system_info.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/utils/get_system_info.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/utils/unset_atdm_config_vars_environment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/utils/unset_atdm_config_vars_build_options.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/utils/get_num_cores_on_machine.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/utils/set_custom_system_info_vars.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/utils/define_sparc_dev_module_name.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/utils/atdm_config_helper_funcs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/utils/get_custom_system_info.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/utils/unset_atdm_config_vars_system_info.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/utils/define_atdm_match_keyword.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/utils/checkin-test-atdm-single.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/tlcc2/environment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/tlcc2/all_supported_builds.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/ats2/trilinos_jsrun_test_me.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/ats2/custom_builds_unit_tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/ats2/environment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/ats2/all_supported_builds.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/std/atdm/ats2/custom_builds.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/refactoring/package-arch-refactoring-20081223.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/refactoring/tribits-namespace-refactor.20111117.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/refactoring/change-TRILINOS-cache-variables-to-Trilinos.20081025.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/refactoring/utils-refactoring-20081223.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/refactoring/TrilinosCreateClientTemplateHeaders-refactor.20111202.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/tribits/python_utils/gitdist-setup.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/tribits/python_utils/git-config-alias.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/tribits/examples/TribitsExampleProject/sampleScripts/linux-serial-debug.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/tribits/examples/TribitsExampleProject/sampleScripts/linux-mpi-debug.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/tribits/examples/TribitsExampleProject/packages/with_subpackages/b/stuff/exec_script.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/tribits/doc/publish_docs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/tribits/doc/build_docs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/tribits/doc/build_ref/create-build-ref.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/tribits/doc/tutorial/generate-tutorial.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/tribits/doc/sphinx/build_sphinx_docs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/tribits/doc/utils/gen_doc_utils.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/tribits/doc/guides/generate-guide.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/tribits/doc/guides/scripts/dummy_test_commit.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/tribits/refactoring/lower-case-cmake-tree.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/lapack/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/lapack/uninstall.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/mumps/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/mumps/uninstall.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/uninstall.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/config/update.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/config/astyle-apply.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/config/update-cmake.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/config/version.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/examples/docs/build_doc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/examples/vis/glvis-ex15.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/examples/vis/glvis-ex1.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/examples/vis/glvis-ex7.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/examples/vis/glvis-ex8.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/examples/vis/glvis-ex2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/examples/vis/glvis-ex5.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/examples/vis/glvis-ex12.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/examples/vis/glvis-ex9.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/examples/vis/glvis-ex4.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/examples/vis/glvis-ex6.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/examples/vis/glvis-ex13.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/examples/vis/glvis-ex3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/examples/vis/glvis-ex11.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/examples/vis/glvis-ex14.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/examples/vis/glvis-ex10.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/examples/vis/glvis-ex16.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/docs/update-release.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/utilities/version.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/openblas/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/openblas/uninstall.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/openblas/benchmark/Make_exe.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/openblas/benchmark/plot-filter.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/openblas/exports/check_objs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/uninstall.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/LAGraph/rtdocs/make_docs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/GraphBLAS/cpu_features/ci/doc/generate_image.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/GraphBLAS/cpu_features/scripts/run_integration.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/GraphBLAS/cpu_features/scripts/test_integration.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/GraphBLAS/cpu_features/scripts/make_release.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/ParU/Tcov/trigger.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/CHOLMOD/Demo/gpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/SPQR/Demo/demo_colamd2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/SPQR/Demo/demo_colamd3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/SPQR/Demo/demo_colamd.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/SPQR/Demo/demo_metis2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/SPQR/Demo/demo_metis3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/SPQR/Demo/demo_metis.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/scalapack/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/scalapack/uninstall.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/superlu/uninstall.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Mongoose"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "<!--\nCopyright (c) 1998 Lawrence Livermore National Security, LLC and other\nHYPRE Project Developers. See the top-level COPYRIGHT file for details.\n\nSPDX-License-Identifier: (Apache-2.0 OR MIT)\n-->\n\nHYPRE Installation Information for Unix-based systems\n=====================================================\n\nThe simplest way to build HYPRE is:\n\n1. From within the `src` directory, type `configure` to configure the package\n   for your system.\n\n   While configure runs, it prints messages indicating which features it is\n   checking for.  Two output files are created: config.status and config.log.\n   The config.status file can be run to recreate the current configuration, and\n   config.log is useful for debugging configure.  Upon successful completion,\n   the file `config/Makefile.config` is created from its template\n   `Makefile.config.in` and HYPRE is ready to be made.\n\n2. Type `make install` to compile and install HYPRE.\n\n3. You can remove the program binaries and object files from the source code by\n   typing `make clean`.  To remove additional files created by configure, type\n   `make distclean`.\n\nOptional Features:\n\nConfigure has many options to allow the user to override and refine the defaults\nof any system.  To display the available options, type `configure --help`.\n\nThe make step in building HYPRE is where the compiling, loading and creation of\nlibraries occurs.  Make has several options called targets, which can be listed\nby running `make help`.\n\nWhen building HYPRE without the install target, the libraries and include files\nare copied into the directories, `src/hypre/lib` and `src/hypre/include`.\n\nWhen building with the install target, the libraries and files are copied into\nthe directories specified by the configure option, --prefix=/usr/apps.  If none\nwere specified, the default directories are used, hypre/lib and hypre/include.\n\n\nHYPRE Installation Information using CMake\n==========================================\n\nCMake is another way to build HYPRE that is particularly useful for building the\ncode on Windows machines.  CMake provides a uniform interface for setting\nconfiguration options on different platforms.  It does not actually build the\ncode, but generates input for other \"native\" build systems such as Make (Unix\nplatforms) or Visual Studio (Windows).  Here are the basic steps:\n\n1. First, ensure that CMake version 3.13.0 or later is installed on the system.\n\n2. To build the library, run CMake on the top-level HYPRE source directory to\n   generate files appropriate for the native build system.  To prevent writing\n   over the Makefiles in HYPRE's configure/make system above, only out-of-source\n   builds are currently allowed with CMake. The directory `src/cmbuild`\n   is provided in the release for convenience, but\n   alternative build directories may be created by the user:\n\n   - Unix: From the `src/cmbuild` directory, type `cmake ..`.\n\n   - Windows: Set the source and build directories to `src` and `src/cmbuild`,\n     then click on 'Configure' following by 'Generate'.\n\n3. To complete the build of the library, compile with the native build system:\n\n   - Unix: From the `src/cmbuild` directory, type `make install`.\n\n   - Windows Visual Studio: Open the 'hypre' VS solution file generated by CMake\n     and build the 'ALL_BUILD' target, then the 'INSTALL' target.\n\nOptional Features:\n\nVarious configuration options can be set from within CMake.  Change these as\nappropriate, then reconfigure/generate:\n\n- Unix: From the `src/cmbuild` directory, type `ccmake ..`, change options, then\n  type `c` then `q`.\n\n- Windows VS: Change options, then click on 'Configure' then 'Generate'.\n\n\nABI Compatibility\n=================\n\nThe hypre team currently does nothing to ensure application binary interface\n(ABI) compatibility.  As a result, all releases (major, minor, or patch) should\nbe treated as incompatible.\n\n"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/INSTALL.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Install OpenBLAS\n\n!!! note\n    Lists of precompiled packages are not comprehensive, is not meant to validate nor endorse a particular third-party build over others, and may not always lead to the newest version\n\n\n## Quick install\n\nPrecompiled packages have recently become available for a number of platforms through their normal installation procedures, so for users of desktop devices at least, the instructions below are mostly relevant when you want to try the most recent development snapshot from git. See your platform's relevant \"Precompiled packages\" section.\n\nThe [Conda-Forge](https://github.com/conda-forge) project maintains packages for the conda package manager at <https://github.com/conda-forge/openblas-feedstock>.\n\n## Source\nDownload the latest [stable version](https://github.com/xianyi/OpenBLAS/releases) from release page.\n\n## Platforms\n\n### Linux\n\nJust type `make` to compile the library.\n\nNotes:\n\n* OpenBLAS doesn't support g77. Please use gfortran or other Fortran compilers. e.g. `make FC=gfortran`.\n* When building in an emulator (KVM,QEMU etc.) make sure that the combination of CPU features exposed to\n  the virtual environment matches that of an existing CPU to allow detection of the cpu model to succeed. \n  (With qemu, this can be done by passing `-cpu host` or a supported model name at invocation)\n\n\n#### Precompiled packages\n\n##### Debian/Ubuntu/Mint/Kali\n OpenBLAS package is available in default repositories and can act as default BLAS in system\n\nExample installation commands:\n```bash\n$ sudo apt update\n$ apt search openblas\n$ sudo apt install libopenblas-dev\n$ sudo update-alternatives --config libblas.so.3\n```\n Alternatively, if distributor's package proves unsatisfactory, you may try latest version of OpenBLAS, [Following guide in OpenBLAS FAQ](faq.md#debianlts)\n \n##### openSuSE/SLE\n Recent OpenSUSE versions include OpenBLAS in default repositories and also permit OpenBLAS to act as replacement of system-wide BLAS.\n\n Example installation commands:\n```bash\n$ sudo zypper ref\n$ zypper se openblas\n$ sudo zypper in openblas-devel\n$ sudo update-alternatives --config libblas.so.3\n``` \nShould you be using older OpenSUSE or SLE that provides no OpenBLAS, you can attach optional or experimental openSUSE repository as a new package source to acquire recent build of OpenBLAS following [instructions on openSUSE software site](https://software.opensuse.org/package/openblas)\n\n##### Fedora/CentOS/RHEL\nFedora provides OpenBLAS in default installation repositories.\n\nTo install it try following:\n```bash\n$ dnf search openblas\n$ dnf install openblas-devel\n```\nFor CentOS/RHEL/Scientific Linux packages are provided via [Fedora EPEL repository](https://fedoraproject.org/wiki/EPEL)\n\nAfter adding repository and repository keys installation is pretty straightforward:\n```bash\n$ yum search openblas\n$ yum install openblas-devel\n```\nNo alternatives mechanism is provided for BLAS, and packages in system repositories are linked against NetLib BLAS or ATLAS BLAS libraries. You may wish to re-package RPMs to use OpenBLAS instead [as described here](https://fedoraproject.org/wiki/How_to_create_an_RPM_package)\n\n##### Mageia\nMageia offers ATLAS and NetLIB LAPACK in base repositories.\nYou can build your own OpenBLAS replacement, and once installed in /opt\nTODO: populate /usr/lib64 /usr/include accurately to replicate netlib with update-alternatives\n\n##### Arch/Manjaro/Antergos\n```bash\n$ sudo pacman -S openblas\n```\n\n### Windows\n\nThe precompiled binaries available with each release (in <https://github.com/xianyi/OpenBLAS/releases>) are\ncreated with MinGW using an option list of \n\"NUM_THREADS=64 TARGET=GENERIC DYNAMIC_ARCH=1 DYNAMIC_OLDER=1 CONSISTENT_FPCSR=1\" - they should work on\nany x86 or x86_64 computer. The zip archive contains the include files, static and dll libraries as well\nas configuration files for getting them found via CMAKE or pkgconfig - just create a suitable folder for\nyour OpenBLAS installation and unzip it there. (Note that you will need to edit the provided openblas.pc\nand OpenBLASConfig.cmake to reflect the installation path on your computer, as distributed they have \"win\"\nor \"win64\" reflecting the local paths on the system they were built on). Some programs will expect the DLL\nname to be lapack.dll, blas.dll, or (in the case of the statistics package \"R\") even Rblas.dll to act as a\ndirect replacement for whatever other implementation of BLAS and LAPACK they use by default. Just copy the\nopenblas.dll to the desired name(s).\nNote that the provided binaries are built with INTERFACE64=0, meaning they use standard 32bit integers for\narray indexing and the like (as is the default for most if not all BLAS and LAPACK implementations). If the\ndocumentation of whatever program you are using with OpenBLAS mentions 64bit integers (INTERFACE64=1) for\naddressing huge matrix sizes, you will need to build OpenBLAS from source (or open an issue ticket to make\nthe demand for such a precompiled build known).\n\n#### Precompiled packages\n\n* <http://sourceforge.net/projects/openblas/files>\n* <https://www.nuget.org/packages?q=openblas>\n\n#### Visual Studio\n\nAs of OpenBLAS v0.2.15, we support MinGW and Visual Studio (using CMake to generate visual studio solution files &ndash; note that you will need at least version 3.11 of CMake for linking to work correctly) to build OpenBLAS on Windows.\n\nNote that you need a Fortran compiler if you plan to build and use the LAPACK functions included with OpenBLAS. The sections below describe using either `flang` as an add-on to clang/LLVM or `gfortran` as part of MinGW for this purpose. If you want to use the Intel Fortran compiler `ifort` for this, be sure to also use the Intel C compiler `icc` for building the C parts, as the ABI imposed by `ifort` is incompatible with `msvc`.\n\n##### 1. Native (MSVC) ABI\n\nA fully-optimized OpenBLAS that can be statically or dynamically linked to your application can currently be built for the 64-bit architecture with the LLVM compiler infrastructure. We're going to use Miniconda3 to grab all of the tools we need, since some of them are in an experimental status. Before you begin, you'll need to have Microsoft Visual Studio 2015 or newer installed.\n\n1. Install Miniconda3 for 64 bits using `winget install --id Anaconda.Miniconda3` or easily download from [conda.io](https://docs.conda.io/en/latest/miniconda.html).\n2. Open the \"Anaconda Command Prompt,\" now available in the Start Menu, or at `%USERPROFILE%\\miniconda3\\shell\\condabin\\conda-hook.ps1`.\n3. In that command prompt window, use `cd` to change to the directory where you want to build OpenBLAS\n4. Now install all of the tools we need:\n\n   ```\n   conda update -n base conda\n   conda config --add channels conda-forge\n   conda install -y cmake flang clangdev perl libflang ninja\n   ```\n\n5. Still in the Anaconda Command Prompt window, activate the MSVC environment for 64 bits with `vcvarsall x64`. On Windows 11 with Visual Studio 2022, this would be done by invoking:\n\n   ```shell\n   \"c:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\vc\\Auxiliary\\Build\\vcvars64.bat\"\n   ```\n\n   With VS2019, the command should be the same &ndash; except for the year number, obviously. For other/older versions of MSVC,\n   the VS documentation or a quick search on the web should turn up the exact wording you need.\n\n   Confirm that the environment is active by typing `link` &ndash; this should return a long list of possible options for the `link` command. If it just \n   returns \"command not found\" or similar, review and retype the call to vcvars64.bat.\n   **NOTE:** if you are working from a Visual Studio Command prompt window instead (so that you do not have to do the vcvars call), you need to invoke \n   `conda activate` so that CONDA_PREFIX etc. get set up correctly before proceeding to step 6. Failing to do so will lead to link errors like \n   libflangmain.lib not getting found later in the build.\n\n6. Now configure the project with CMake. Starting in the project directory, execute the following:\n\n   ```\n   set \"LIB=%CONDA_PREFIX%\\Library\\lib;%LIB%\"\n   set \"CPATH=%CONDA_PREFIX%\\Library\\include;%CPATH%\"\n   mkdir build\n   cd build\n   cmake .. -G \"Ninja\" -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_C_COMPILER=clang-cl -DCMAKE_Fortran_COMPILER=flang -DCMAKE_MT=mt -DBUILD_WITHOUT_LAPACK=no -DNOFORTRAN=0 -DDYNAMIC_ARCH=ON -DCMAKE_BUILD_TYPE=Release\n   ```\n\n   You may want to add further options in the `cmake` command here &ndash; for instance, the default only produces a static .lib version of the library. If you would rather have a DLL, add -DBUILD_SHARED_LIBS=ON above. Note that this step only creates some command files and directories, the actual build happens next.\n\n\n7. Build the project:\n\n   ```\n   cmake --build . --config Release\n   ```\n   This step will create the OpenBLAS library in the \"lib\" directory, and various build-time tests in the `test`, `ctest` and `openblas_utest` directories. However it will not separate the header files you might need for building your own programs from those used internally. To put all relevant files in a more convenient arrangement, run the next step.\n\n8. Install all relevant files created by the build\n\n   ```\n   cmake --install . --prefix c:\\opt -v\n   ```\n   This will copy all files that are needed for building and running your own programs with OpenBLAS to the given location, creating appropriate subdirectories for the individual kinds of files. In the case of \"C:\\opt\" as given above, this would be C:\\opt\\include\\openblas for the header files, \n   C:\\opt\\bin for the libopenblas.dll and C:\\opt\\lib for the static library. C:\\opt\\share holds various support files that enable other cmake-based build scripts to find OpenBLAS automatically.\n\n###### Visual studio 2017+ (C++2017 standard)\n\nIn newer visual studio versions, Microsoft has changed [how it handles complex types](https://docs.microsoft.com/en-us/cpp/c-runtime-library/complex-math-support?view=msvc-170#types-used-in-complex-math). Even when using a precompiled version of OpenBLAS, you might need to define `LAPACK_COMPLEX_CUSTOM` in order to define complex types properly for MSVC. For example, some variant of the following might help:\n\n```\n#if defined(_MSC_VER)\n    #include <complex.h>\n    #define LAPACK_COMPLEX_CUSTOM\n    #define lapack_complex_float _Fcomplex\n    #define lapack_complex_double _Dcomplex\n#endif\n```\n\nFor reference, see https://github.com/xianyi/OpenBLAS/issues/3661, https://github.com/Reference-LAPACK/lapack/issues/683, and https://stackoverflow.com/questions/47520244/using-openblas-lapacke-in-visual-studio.\n\n###### CMake and Visual Studio\n\nTo build OpenBLAS for the 32-bit architecture, you'll need to use the builtin Visual Studio compilers.\n\n!!! note\n    This method may produce binaries which demonstrate significantly lower performance than those built with the other methods. (The Visual Studio compiler does not support the dialect of assembly used in the cpu-specific optimized files, so only the \"generic\" TARGET which is\n    written in pure C will get built. For the same reason it is not possible (and not necessary) to use -DDYNAMIC_ARCH=ON in a Visual Studio build) You may consider building for the 32-bit architecture using the GNU (MinGW) ABI.\n\n####### 1. Install CMake at Windows\n\n####### 2. Use CMake to generate Visual Studio solution files\n\n```\n# Do this from Powershell so cmake can find visual studio\ncmake -G \"Visual Studio 14 Win64\" -DCMAKE_BUILD_TYPE=Release .\n```\n\n###### Build the solution at Visual Studio\n\nNote that this step depends on perl, so you'll need to install perl for windows, and put perl on your path so VS can start perl (http://stackoverflow.com/questions/3051049/active-perl-installation-on-windows-operating-system).\n\nStep 2 will build the OpenBLAS solution, open it in VS, and build the projects. Note that the dependencies do not seem to be automatically configured: if you try to build libopenblas directly, it will fail with a message saying that some .obj files aren't found, but if you build the projects libopenblas depends on before building libopenblas, the build will succeed.\n\n###### Build OpenBLAS for Universal Windows Platform\n\nOpenBLAS can be built for use on the [Universal Windows Platform](https://en.wikipedia.org/wiki/Universal_Windows_Platform) using a two step process since commit [c66b842](https://github.com/xianyi/OpenBLAS/commit/c66b842d66c5516e52804bf5a0544d18b1da1b44).\n\n####### 1. Follow steps 1 and 2 above to build the Visual Studio solution files for Windows. This builds the helper executables which are required when building the OpenBLAS Visual Studio solution files for UWP in step 2.\n\n####### 2. Remove the generated CMakeCache.txt and CMakeFiles directory from the OpenBLAS source directory and re-run CMake with the following options:\n\n```\n# do this to build UWP compatible solution files\ncmake -G \"Visual Studio 14 Win64\" -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=\"10.0\" -DCMAKE_SYSTEM_PROCESSOR=AMD64 -DVS_WINRT_COMPONENT=TRUE -DCMAKE_BUILD_TYPE=Release .\n```\n\n####### Build the solution with Visual Studio\n\nThis will build the OpenBLAS binaries with the required settings for use with UWP.\n\n##### 2. GNU (MinGW) ABI\n\nThe resulting library can be used in Visual Studio, but it can only be linked dynamically. This configuration has not been thoroughly tested and should be considered experimental.\n\n###### Incompatible x86 calling conventions\n\nDue to incompatibilities between the calling conventions of MinGW and Visual Studio you will need to make the following modifications ( **32-bit only** ):\n\n1. Use the newer GCC 4.7.0. The older GCC (<4.7.0) has an ABI incompatibility for returning aggregate structures larger than 8 bytes with MSVC. \n\n\n###### Build OpenBLAS on Windows OS\n1. Install the MinGW (GCC) compiler suite, either 32-bit (http://www.mingw.org/) or 64-bit (http://mingw-w64.sourceforge.net/). Be sure to install its gfortran package as well (unless you really want to build the BLAS part of OpenBLAS only) and check that gcc and gfortran are the same version &ndash; mixing compilers from different sources or release versions can lead to strange error messages in the linking stage. In addition, please install MSYS with MinGW.\n1. Build OpenBLAS in the MSYS shell. Usually, you can just type \"make\". OpenBLAS will detect the compiler and CPU automatically. \n1. After the build is complete, OpenBLAS will generate the static library \"libopenblas.a\" and the shared dll library \"libopenblas.dll\" in the folder. You can type \"make PREFIX=/your/installation/path install\" to install the library to a certain location.\n\n!!! note\n    We suggest using official MinGW or MinGW-w64 compilers. A user reported that s/he met `Unhandled exception` by other compiler suite. https://groups.google.com/forum/#!topic/openblas-users/me2S4LkE55w\n\nNote also that older versions of the alternative builds of mingw-w64 available through http://www.msys2.org may contain a defect that leads to a compilation failure accompanied by the error message\n```\n<command-line>:0:4: error: expected identifier or '(' before numeric constant\n```\nIf you encounter this, please upgrade your msys2 setup or see https://github.com/xianyi/OpenBLAS/issues/1503 for a workaround.\n\n###### Generate import library (before 0.2.10 version)\n\n1. First, you will need to have the `lib.exe` tool in the Visual Studio command prompt. \n1. Open the command prompt and type `cd OPENBLAS_TOP_DIR/exports`, where OPENBLAS_TOP_DIR is the main folder of your OpenBLAS installation.\n1. For a 32-bit library, type `lib /machine:i386 /def:libopenblas.def`. For 64-bit, type `lib /machine:X64 /def:libopenblas.def`.\n1. This will generate the import library \"libopenblas.lib\" and the export library \"libopenblas.exp\" in OPENBLAS_TOP_DIR/exports. Although these two files have the same name, they are totally different.\n\n###### Generate import library (0.2.10 and after version)\n1. OpenBLAS already generated the import library \"libopenblas.dll.a\" for \"libopenblas.dll\".\n\n###### generate windows native PDB files from gcc/gfortran build\nTool to do so is available at https://github.com/rainers/cv2pdb\n\n###### Use OpenBLAS .dll library in Visual Studio\n1. Copy the import library (before 0.2.10: \"OPENBLAS_TOP_DIR/exports/libopenblas.lib\", 0.2.10 and after: \"OPENBLAS_TOP_DIR/libopenblas.dll.a\") and .dll library \"libopenblas.dll\" into the same folder(The folder of your project that is going to use the BLAS library. You may need to add the libopenblas.dll.a to the linker input list: properties->Linker->Input).\n1. Please follow the documentation about using third-party .dll libraries in MS Visual Studio 2008 or 2010.  Make sure to link against a library for the correct architecture.  For example, you may receive an error such as \"The application was unable to start correctly (0xc000007b)\" which typically indicates a mismatch between 32/64-bit libraries.\n\n!!! note\n    If you need CBLAS, you should include cblas.h in /your/installation/path/include in Visual Studio.  Please read [this page](http://github.com/xianyi/OpenBLAS/issues/95).\n\n###### Limitations\n* Both static and dynamic linking are supported with MinGW.  With Visual Studio, however, only dynamic linking is supported and so you should use the import library.\n* Debugging from Visual Studio does not work because MinGW and Visual Studio have incompatible formats for debug information (PDB vs. DWARF/STABS).  You should either debug with GDB on the command-line or with a visual frontend, for instance [Eclipse](http://www.eclipse.org/cdt/) or [Qt Creator](http://qt.nokia.com/products/developer-tools/).\n\n\n#### Windows on Arm\n\n##### Prerequisites\n\nFollowing tools needs to be installed\n\n###### 1. Download and install clang for windows on arm\n\nFind the latest LLVM build for WoA from [LLVM release page](https://releases.llvm.org/)\n\nE.g: LLVM 12 build for WoA64 can be found [here](https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.0/LLVM-12.0.0-woa64.exe)\n\nRun the LLVM installer and ensure that LLVM is added to environment PATH.\n\n###### 2. Download and install classic flang for windows on arm\n\nClassic flang is the only available FORTRAN compiler for windows on arm for now and a pre-release build can be found [here](https://github.com/kaadam/flang/releases/tag/v0.1)\n\nThere is no installer for classic flang and the zip package can be extracted and the path needs to be added to environment PATH.\n\nE.g: on PowerShell\n\n```\n$env:Path += \";C:\\flang_woa\\bin\"\n```\n\n##### Build\n\nThe following steps describe how to build the static library for OpenBLAS with and without LAPACK\n\n###### 1. Build OpenBLAS static library with BLAS and LAPACK routines with Make\n\nFollowing command can be used to build OpenBLAS static library with BLAS and LAPACK routines\n\n```bash\n$ make CC=\"clang-cl\" HOSTCC=\"clang-cl\" AR=\"llvm-ar\" BUILD_WITHOUT_LAPACK=0 NOFORTRAN=0 DYNAMIC_ARCH=0 TARGET=ARMV8 ARCH=arm64 BINARY=64 USE_OPENMP=0 PARALLEL=1 RANLIB=\"llvm-ranlib\" MAKE=make F_COMPILER=FLANG FC=FLANG FFLAGS_NOOPT=\"-march=armv8-a -cpp\" FFLAGS=\"-march=armv8-a -cpp\" NEED_PIC=0 HOSTARCH=arm64 libs netlib\n```\n\n###### 2. Build static library with BLAS routines using CMake\n\nClassic flang has compatibility issues with cmake hence only BLAS routines can be compiled with CMake\n\n```bash\n$ mkdir build\n$ cd build\n$ cmake ..  -G Ninja -DCMAKE_C_COMPILER=clang -DBUILD_WITHOUT_LAPACK=1 -DNOFORTRAN=1 -DDYNAMIC_ARCH=0 -DTARGET=ARMV8 -DARCH=arm64 -DBINARY=64 -DUSE_OPENMP=0 -DCMAKE_SYSTEM_PROCESSOR=ARM64 -DCMAKE_CROSSCOMPILING=1 -DCMAKE_SYSTEM_NAME=Windows\n$ cmake --build . --config Release\n```\n\n###### `getarch.exe` execution error\n\nIf you notice that platform-specific headers by `getarch.exe` are not generated correctly, It could be due to a known debug runtime DLL issue for arm64 platforms. Please check out [link](https://linaro.atlassian.net/wiki/spaces/WOAR/pages/28677636097/Debug+run-time+DLL+issue#Workaround) for the workaround.\n\n#### MinGW import library\n\nMicrosoft Windows has this thing called \"import libraries\". You don't need it in MinGW because the `ld` linker from GNU Binutils is smart, but you may still want it for whatever reason.\n\n##### Make the `.def`\n\nImport libraries are compiled from a list of what symbols to use, `.def`. This should be already in your `exports` directory: `cd OPENBLAS_TOP_DIR/exports`.\n\n##### Making a MinGW import library\n\nMinGW import libraries have the suffix `.a`, same as static libraries. (It's actually more common to do `.dll.a`...)\n\nYou need to first prepend `libopenblas.def` with a line `LIBRARY libopenblas.dll`:\n\n    cat <(echo \"LIBRARY libopenblas.dll\") libopenblas.def > libopenblas.def.1\n    mv libopenblas.def.1 libopenblas.def\n\nNow it probably looks like:\n\n    LIBRARY libopenblas.dll\n    EXPORTS\n\t   caxpy=caxpy_  @1\n\t   caxpy_=caxpy_  @2\n           ...\n\nThen, generate the import library: `dlltool -d libopenblas.def -l libopenblas.a`\n\nAgain, there is basically **no point** in making an import library for use in MinGW. It actually slows down linking.\n\n##### Making a MSVC import library\n\nUnlike MinGW, MSVC absolutely requires an import library. Now the C ABI of MSVC and MinGW are actually identical, so linking is actually okay. (Any incompatibility in the C ABI would be a bug.)\n\nThe import libraries of MSVC have the suffix `.lib`. They are generated from a `.def` file using MSVC's `lib.exe`. See [the MSVC instructions](use_visual_studio.md#generate-import-library-before-0210-version).\n\n##### Notes\n\n* Always remember that MinGW is **not the same** as MSYS2 or Cygwin. MSYS2 and Cygwin are full POSIX environments with a lot of magic such as `fork()` and its own `malloc()`. MinGW, which builds on the normal Microsoft C Runtime, has none of that. Be clear about which one you are building for.\n\n### Mac OSX\n\nIf your CPU is Sandy Bridge, please use Clang version 3.1 and above. The Clang 3.0 will generate the wrong AVX binary code of OpenBLAS.\n\n#### Precompiled packages\n\n<https://www.macports.org/ports.php?by=name&substr=openblas>\n\n`brew install openblas`\n\nor using the conda package manager from\n<https://github.com/conda-forge/miniforge#download>\n(which also has packages for the new M1 cpu)\n\n `conda install openblas`\n\n#### Build on Apple M1\n\nOn newer versions of Xcode and on arm64, you might need to compile with a newer macOS target (11.0) than the default (10.8) with `MACOSX_DEPLOYMENT_TARGET=11.0`, or switch your command-line tools to use an older SDK (e.g., [13.1](https://developer.apple.com/download/all/?q=Xcode%2013)).\n\n* without Fortran compiler \uff08cannot build LAPACK)\n  ```bash\n  $ make CC=cc NOFORTRAN=1\n  ```\n* with Fortran compiler (you could `brew install gfortran`) https://github.com/xianyi/OpenBLAS/issues/3032\n  ```bash\n  $ export MACOSX_DEPLOYMENT_TARGET=11.0\n  $ make CC=cc FC=gfortran\n  ```\n\n### Android\n\n#### Prerequisites\n\nIn addition to the Android NDK, you will need both Perl and a C compiler on the build host as these are currently\nrequired by the OpenBLAS build environment.\n\n\n#### Building with android NDK using clang compiler\nAround version 11 Android NDKs stopped supporting gcc, so you would need to use clang to compile OpenBLAS. clang is supported from OpenBLAS 0.2.20 version onwards. See below sections on how to build with clang for ARMV7 and ARMV8 targets. The same basic principles as described below for ARMV8 should also apply to building an x86 or x86_64 version (substitute something like NEHALEM for the target instead of ARMV8 and replace all the aarch64 in the toolchain paths obviously)\n\"Historic\" notes:\nSince version 19 the default toolchain is provided as a standalone toolchain, so building one yourself following [building a standalone toolchain](http://developer.android.com/ndk/guides/standalone_toolchain.html) should no longer be necessary.\nIf you want to use static linking with an old NDK version older than about r17, you need to choose an API level below 23 currently due to NDK bug 272 (https://github.com/android-ndk/ndk/issues/272 , the libc.a lacks a definition of stderr) that will probably be fixed in r17 of the NDK.\n\n#### Build ARMV7 with clang\n```\n## Set path to ndk-bundle\nexport NDK_BUNDLE_DIR=/path/to/ndk-bundle\n\n## Set the PATH to contain paths to clang and arm-linux-androideabi-* utilities\nexport PATH=${NDK_BUNDLE_DIR}/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin:${NDK_BUNDLE_DIR}/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH\n\n## Set LDFLAGS so that the linker finds the appropriate libgcc\nexport LDFLAGS=\"-L${NDK_BUNDLE_DIR}/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/lib/gcc/arm-linux-androideabi/4.9.x\"\n\n## Set the clang cross compile flags\nexport CLANG_FLAGS=\"-target arm-linux-androideabi -marm -mfpu=vfp -mfloat-abi=softfp --sysroot ${NDK_BUNDLE_DIR}/platforms/android-23/arch-arm -gcc-toolchain ${NDK_BUNDLE_DIR}/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/\"\n\n#OpenBLAS Compile\nmake TARGET=ARMV7 ONLY_CBLAS=1 AR=ar CC=\"clang ${CLANG_FLAGS}\" HOSTCC=gcc ARM_SOFTFP_ABI=1 -j4\n```\nOn a Mac, it may also be necessary to give the complete path to the `ar` utility in the make command above, like so:\n```\nAR=${NDK_BUNDLE_DIR}/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-gcc-ar\n```\notherwise you may get a linker error complaining about a \"malformed archive header name at 8\" when the native OSX ar command was invoked instead.\n \n#### Build ARMV8 with clang\n```\n## Set path to ndk-bundle\nexport NDK_BUNDLE_DIR=/path/to/ndk-bundle/\n\n## Export PATH to contain directories of clang and aarch64-linux-android-* utilities\nexport PATH=${NDK_BUNDLE_DIR}/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/bin/:${NDK_BUNDLE_DIR}/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH\n\n## Setup LDFLAGS so that loader can find libgcc and pass -lm for sqrt\nexport LDFLAGS=\"-L${NDK_BUNDLE_DIR}/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/lib/gcc/aarch64-linux-android/4.9.x -lm\"\n\n## Setup the clang cross compile options\nexport CLANG_FLAGS=\"-target aarch64-linux-android --sysroot ${NDK_BUNDLE_DIR}/platforms/android-23/arch-arm64 -gcc-toolchain ${NDK_BUNDLE_DIR}/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/\"\n\n## Compile\nmake TARGET=ARMV8 ONLY_CBLAS=1 AR=ar CC=\"clang ${CLANG_FLAGS}\" HOSTCC=gcc -j4\n```\nNote: Using TARGET=CORTEXA57 in place of ARMV8 will pick up better optimized routines. Implementations for CORTEXA57 target is compatible with all other armv8 targets.\n\nNote: For NDK 23b, something as simple as \n```\nexport PATH=/opt/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/bin/:$PATH\nmake HOSTCC=gcc CC=/opt/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android31-clang ONLY_CBLAS=1 TARGET=ARMV8\n```\nappears to be sufficient on Linux.\n\n#### Alternative script which was tested on OSX with NDK(21.3.6528147)\nThis script will build openblas for 3 architecture (ARMV7,ARMV8,X86) and put them with `sudo make install` to `/opt/OpenBLAS/lib`\n```\nexport NDK=YOUR_PATH_TO_SDK/Android/sdk/ndk/21.3.6528147\nexport TOOLCHAIN=$NDK/toolchains/llvm/prebuilt/darwin-x86_64\n\nmake clean\nmake \\\n    TARGET=ARMV7 \\\n    ONLY_CBLAS=1 \\\n    CC=\"$TOOLCHAIN\"/bin/armv7a-linux-androideabi21-clang \\\n    AR=\"$TOOLCHAIN\"/bin/arm-linux-androideabi-ar \\\n    HOSTCC=gcc \\\n    ARM_SOFTFP_ABI=1 \\\n    -j4\nsudo make install\n\nmake clean\nmake \\\n    TARGET=CORTEXA57 \\\n    ONLY_CBLAS=1 \\\n    CC=$TOOLCHAIN/bin/aarch64-linux-android21-clang \\\n    AR=$TOOLCHAIN/bin/aarch64-linux-android-ar \\\n    HOSTCC=gcc \\\n    -j4\nsudo make install\n\nmake clean\nmake \\\n    TARGET=ATOM \\\n    ONLY_CBLAS=1 \\\n    CC=\"$TOOLCHAIN\"/bin/i686-linux-android21-clang \\\n    AR=\"$TOOLCHAIN\"/bin/i686-linux-android-ar \\\n    HOSTCC=gcc \\\n    ARM_SOFTFP_ABI=1 \\\n    -j4\nsudo make install\n\n## This will build for x86_64 \nmake clean\nmake \\\n    TARGET=ATOM BINARY=64\\\n    ONLY_CBLAS=1 \\\n    CC=\"$TOOLCHAIN\"/bin/x86_64-linux-android21-clang \\\n    AR=\"$TOOLCHAIN\"/bin/x86_64-linux-android-ar \\\n    HOSTCC=gcc \\\n    ARM_SOFTFP_ABI=1 \\\n    -j4\nsudo make install\n```\nAlso you can find full list of target architectures in [TargetsList.txt](https://github.com/xianyi/OpenBLAS/blob/develop/TargetList.txt)\n\n***\nanything below this line should be irrelevant nowadays unless you need to perform software archeology\n***\n#### Building OpenBLAS with very old gcc-based versions of the NDK, without Fortran\n\nThe prebuilt Android NDK toolchains do not include Fortran, hence parts like LAPACK cannot be built. You can still build OpenBLAS without it. For instructions on how to build OpenBLAS with Fortran, see the [next section](#building-openblas-with-fortran).\n\nTo use easily the prebuilt toolchains, follow [building a standalone toolchain](http://developer.android.com/ndk/guides/standalone_toolchain.html) for your desired architecture.\nThis would be `arm-linux-androideabi-gcc-4.9` for ARMV7 and `aarch64-linux-android-gcc-4.9` for ARMV8.\n\nYou can build OpenBLAS (0.2.19 and earlier) with:\n```\n## Add the toolchain to your path\nexport PATH=/path/to/standalone-toolchain/bin:$PATH\n\n## Build without Fortran for ARMV7\nmake TARGET=ARMV7 HOSTCC=gcc CC=arm-linux-androideabi-gcc NOFORTRAN=1 libs\n## Build without Fortran for ARMV8\nmake TARGET=ARMV8 BINARY=64 HOSTCC=gcc CC=aarch64-linux-android-gcc NOFORTRAN=1 libs\n```\n\nSince we are cross-compiling, we make the `libs` recipe, not `all`. Otherwise you will get errors when trying to link/run tests as versions up to and including 0.2.19 cannot build a shared library for Android. \n\nFrom 0.2.20 on, you should leave off the \"libs\" to get a full build, and you may want to use the softfp ABI instead of the deprecated hardfp one on ARMV7 so you would use \n```\n## Add the toolchain to your path\nexport PATH=/path/to/standalone-toolchain/bin:$PATH\n\n## Build without Fortran for ARMV7\nmake TARGET=ARMV7 ARM_SOFTFP_ABI=1 HOSTCC=gcc CC=arm-linux-androideabi-gcc NOFORTRAN=1\n## Build without Fortran for ARMV8\nmake TARGET=ARMV8 BINARY=64 HOSTCC=gcc CC=aarch64-linux-android-gcc NOFORTRAN=1\n```\n\nIf you get an error about stdio.h not being found, you need to specify your sysroot in the CFLAGS argument to `make` like\n```CFLAGS=--sysroot=$NDK/platforms/android-16/arch-arm```\nWhen you are done, install OpenBLAS into the desired directory. Be sure to also use all command line options\nhere that you specified for building, otherwise errors may occur as it tries to install things you did not build:\n```\nmake PREFIX=/path/to/install-dir TARGET=... install\n```\n\n#### Building OpenBLAS with Fortran\n\nInstructions on how to build the GNU toolchains with Fortran can be found [here](https://github.com/buffer51/android-gfortran). The [Releases section](https://github.com/buffer51/android-gfortran/releases) provides prebuilt versions, use the standalone one.\n\nYou can build OpenBLAS with:\n```\n## Add the toolchain to your path\nexport PATH=/path/to/standalone-toolchain-with-fortran/bin:$PATH\n\n## Build with Fortran for ARMV7\nmake TARGET=ARMV7 HOSTCC=gcc CC=arm-linux-androideabi-gcc FC=arm-linux-androideabi-gfortran libs\n## Build with LAPACK for ARMV8\nmake TARGET=ARMV8 BINARY=64 HOSTCC=gcc CC=aarch64-linux-android-gcc FC=aarch64-linux-android-gfortran libs\n```\n\nAs mentioned above you can leave off the `libs` argument here when building 0.2.20 and later, and you may want to add ARM_SOFTFP_ABI=1 when building for ARMV7.\n\n#### Linking OpenBLAS (0.2.19 and earlier) for ARMV7\n\nIf you are using `ndk-build`, you need to set the ABI to hard floating points in your Application.mk:\n```\nAPP_ABI := armeabi-v7a-hard\n```\n\nThis will set the appropriate flags for you. If you are not using `ndk-build`, you will want to add the following flags:\n```\nTARGET_CFLAGS += -mhard-float -D_NDK_MATH_NO_SOFTFP=1\nTARGET_LDFLAGS += -Wl,--no-warn-mismatch -lm_hard\n```\n\nFrom 0.2.20 on, it is also possible to build for the softfp ABI by specifying ARM_SOFTFP_ABI=1 during the build.\nIn that case, also make sure that all your dependencies are compiled with -mfloat-abi=softfp as well, as mixing\n\"hard\" and \"soft\" floating point ABIs in a program will make it crash.\n\n### iPhone/iOS\n\nAs none of the current developers uses iOS, the following instructions are what was found to work in our Azure CI setup, but as far as we know this builds a fully working OpenBLAS for this platform.\n\nGo to the directory where you unpacked OpenBLAS,and enter the following commands:\n```\n     CC=/Applications/Xcode_12.4.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang\n\nCFLAGS= -O2 -Wno-macro-redefined -isysroot /Applications/Xcode_12.4.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS14.4.sdk -arch arm64 -miphoneos-version-min=10.0\n\nmake TARGET=ARMV8 DYNAMIC_ARCH=1 NUM_THREADS=32 HOSTCC=clang NOFORTRAN=1\n```\nAdjust MIN_IOS_VERSION as necessary for your installation, e.g. change the version number\nto the minimum iOS version you want to target and execute this file to build the library.\n\n### MIPS\n\nFor mips targets you will need latest toolchains\nP5600 - MTI GNU/Linux Toolchain\nI6400, P6600 - IMG GNU/Linux Toolchain\n\nThe download link is below\n(http://codescape-mips-sdk.imgtec.com/components/toolchain/2016.05-03/downloads.html)\n\nYou can use following commandlines for builds\n\n\n    IMG_TOOLCHAIN_DIR={full IMG GNU/Linux Toolchain path including \"bin\" directory -- for example, /opt/linux_toolchain/bin}\n    IMG_GCC_PREFIX=mips-img-linux-gnu\n    IMG_TOOLCHAIN=${IMG_TOOLCHAIN_DIR}/${IMG_GCC_PREFIX}\n\n    I6400 Build (n32):\n    make BINARY=32 BINARY32=1 CC=$IMG_TOOLCHAIN-gcc AR=$IMG_TOOLCHAIN-ar FC=\"$IMG_TOOLCHAIN-gfortran -EL -mabi=n32\" RANLIB=$IMG_TOOLCHAIN-ranlib HOSTCC=gcc CFLAGS=\"-EL\" FFLAGS=$CFLAGS LDFLAGS=$CFLAGS TARGET=I6400\n\n    I6400 Build (n64):\n    make BINARY=64 BINARY64=1 CC=$IMG_TOOLCHAIN-gcc AR=$IMG_TOOLCHAIN-ar FC=\"$IMG_TOOLCHAIN-gfortran -EL\" RANLIB=$IMG_TOOLCHAIN-ranlib HOSTCC=gcc CFLAGS=\"-EL\" FFLAGS=$CFLAGS LDFLAGS=$CFLAGS TARGET=I6400\n\n    P6600 Build (n32):\n    make BINARY=32 BINARY32=1 CC=$IMG_TOOLCHAIN-gcc AR=$IMG_TOOLCHAIN-ar FC=\"$IMG_TOOLCHAIN-gfortran -EL -mabi=n32\" RANLIB=$IMG_TOOLCHAIN-ranlib HOSTCC=gcc CFLAGS=\"-EL\" FFLAGS=$CFLAGS LDFLAGS=$CFLAGS TARGET=P6600\n\n    P6600 Build (n64):\n    make BINARY=64 BINARY64=1 CC=$IMG_TOOLCHAIN-gcc AR=$IMG_TOOLCHAIN-ar FC=\"$IMG_TOOLCHAIN-gfortran -EL\" RANLIB=$IMG_TOOLCHAIN-ranlib HOSTCC=gcc CFLAGS=\"-EL\" FFLAGS=\"$CFLAGS\" LDFLAGS=\"$CFLAGS\" TARGET=P6600\n\n    MTI_TOOLCHAIN_DIR={full MTI GNU/Linux Toolchain path including \"bin\" directory -- for example, /opt/linux_toolchain/bin}\n    MTI_GCC_PREFIX=mips-mti-linux-gnu\n    MTI_TOOLCHAIN=${IMG_TOOLCHAIN_DIR}/${IMG_GCC_PREFIX}\n\n    P5600 Build:\n\n    make BINARY=32 BINARY32=1 CC=$MTI_TOOLCHAIN-gcc AR=$MTI_TOOLCHAIN-ar FC=\"$MTI_TOOLCHAIN-gfortran -EL\"    RANLIB=$MTI_TOOLCHAIN-ranlib HOSTCC=gcc CFLAGS=\"-EL\" FFLAGS=$CFLAGS LDFLAGS=$CFLAGS TARGET=P5600\n\n### FreeBSD\n\nYou will need to install the following tools from the FreeBSD ports tree:\n* lang/gcc [1]\n* lang/perl5.12\n* ftp/curl\n* devel/gmake\n* devel/patch\n\nTo compile run the command:\n\n    $ gmake CC=gcc46 FC=gfortran46\n\nNote that you need to build with GNU make and manually specify the compiler, otherwhise gcc 4.2 from the base system would be used.\n\n[1]: [Removal of Fortran from the FreeBSD base system](http://www.bsdunix.ch/serendipity/index.php?/archives/345-Removal-of-Fortran-from-the-FreeBSD-base-system.html)\n\n\n```\npkg install openblas\n```\n\nsee <https://www.freebsd.org/ports/index.html>\n\n### Cortex-M\n\nCortex-M is a widely used microcontroller that is present in a variety of industrial and consumer electronics.\nA common variant of the Cortex-M is the STM32F4xx series. Here, we will give instructions for building for\nthe STM32F4xx.\n\nFirst, install the embedded arm gcc compiler from the arm website. Then, create the following toolchain file and build as follows.\n\n```cmake\n# cmake .. -G Ninja -DCMAKE_C_COMPILER=arm-none-eabi-gcc -DCMAKE_TOOLCHAIN_FILE:PATH=\"toolchain.cmake\" -DNOFORTRAN=1 -DTARGET=ARMV5 -DEMBEDDED=1\n\nset(CMAKE_SYSTEM_NAME Generic)\nset(CMAKE_SYSTEM_PROCESSOR arm)\n\nset(CMAKE_C_COMPILER \"arm-none-eabi-gcc.exe\")\nset(CMAKE_CXX_COMPILER \"arm-none-eabi-g++.exe\")\n\nset(CMAKE_EXE_LINKER_FLAGS \"--specs=nosys.specs\" CACHE INTERNAL \"\")\n\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n```\n\nIn your embedded application, the following functions need to be provided for OpenBLAS to work correctly:\n\n```C\nvoid free(void* ptr);\nvoid* malloc(size_t size);\n```\n\n!!! note\n    If you are developing for an embedded platform, it is your responsibility to make sure that the device has sufficient memory for malloc calls. [Libmemory][2] provides one implementation of malloc for embedded platforms.\n\n[2]: https://github.com/embeddedartistry/libmemory\n"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/openblas/docs/install.md",
      "technique": "file_exploration"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/OpenDigitalTwin-Dev/NLA/issues"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ScottKolo/Mongoose/issues"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "libCEED"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SLEPc"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PETSc"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MPI"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PETSc"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MPI"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": [
          "Mongoose",
          "SuiteSparse",
          "software",
          "graph partitioning",
          "sparse matrices",
          "graph coarsening",
          "edge cut",
          "scientific software",
          "mathematical software"
        ]
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 2-Clause",
        "spdx_id": "BSD-2-Clause",
        "type": "File_dump",
        "value": "Copyright (c) 1992-2011 The University of Tennessee and The University\n                        of Tennessee Research Foundation.  All rights\n                        reserved.\nCopyright (c) 2000-2011 The University of California Berkeley. All\n                        rights reserved.\nCopyright (c) 2006-2011 The University of Colorado Denver.  All rights\n                        reserved.\n\n$COPYRIGHT$\n\nAdditional copyrights may follow\n\n$HEADER$\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n- Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n\n- Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer listed\n  in this license in the documentation and/or other materials\n  provided with the distribution.\n\n- Neither the name of the copyright holders nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nThe copyright holders provide no reassurances that the source code\nprovided does not infringe any patent, copyright, or any other\nintellectual property rights of third parties.  The copyright holders\ndisclaim any liability to any recipient for claims brought against\nrecipient by any third party for infringement of that parties\nintellectual property rights.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/scalapack/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "License",
        "value": "BSD 2"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "License",
        "value": "BSD-2-Clause"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "License",
        "value": "BSD-2-Clause"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/https://spdx.org/licenses/GPL-3.0-only.html",
        "spdx_id": "https://spdx.org/licenses/GPL-3.0-only.html",
        "type": "License",
        "value": "https://spdx.org/licenses/GPL-3.0-only.html"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NLA"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Mongoose: A Graph Coarsening and Partitioning Library"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "OpenDigitalTwin-Dev"
      },
      "technique": "GitHub_API"
    }
  ],
  "package_id": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "libceed"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "slepc"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "petsc"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Bratu3D"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/binding/petsc4py/demo/legacy/wrap-cython/setup.py",
      "technique": "code_parser"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 261284178,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Fortran",
        "size": 152958905,
        "type": "Programming_language",
        "value": "Fortran"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Assembly",
        "size": 31071379,
        "type": "Programming_language",
        "value": "Assembly"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 22525696,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 7434211,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 5887777,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 4067055,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 3364491,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 2280218,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 2258364,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cython",
        "size": 2207625,
        "type": "Programming_language",
        "value": "Cython"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2188478,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cuda",
        "size": 1995527,
        "type": "Programming_language",
        "value": "Cuda"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 973368,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Rust",
        "size": 319872,
        "type": "Programming_language",
        "value": "Rust"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 316921,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 273799,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "PostScript",
        "size": 253776,
        "type": "Programming_language",
        "value": "PostScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Julia",
        "size": 203216,
        "type": "Programming_language",
        "value": "Julia"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 135368,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 74465,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 65405,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Ruby",
        "size": 51657,
        "type": "Programming_language",
        "value": "Ruby"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 46200,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "XSLT",
        "size": 32878,
        "type": "Programming_language",
        "value": "XSLT"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "SWIG",
        "size": 32503,
        "type": "Programming_language",
        "value": "SWIG"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Groovy",
        "size": 31620,
        "type": "Programming_language",
        "value": "Groovy"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "BibTeX Style",
        "size": 22212,
        "type": "Programming_language",
        "value": "BibTeX Style"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 19212,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "GLSL",
        "size": 15412,
        "type": "Programming_language",
        "value": "GLSL"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Scilab",
        "size": 14141,
        "type": "Programming_language",
        "value": "Scilab"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Awk",
        "size": 11941,
        "type": "Programming_language",
        "value": "Awk"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 11769,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Meson",
        "size": 9720,
        "type": "Programming_language",
        "value": "Meson"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "SourcePawn",
        "size": 4397,
        "type": "Programming_language",
        "value": "SourcePawn"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "BitBake",
        "size": 3470,
        "type": "Programming_language",
        "value": "BitBake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 3176,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Lua",
        "size": 2636,
        "type": "Programming_language",
        "value": "Lua"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "SystemVerilog",
        "size": 2315,
        "type": "Programming_language",
        "value": "SystemVerilog"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Zig",
        "size": 2175,
        "type": "Programming_language",
        "value": "Zig"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Raku",
        "size": 1924,
        "type": "Programming_language",
        "value": "Raku"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "sed",
        "size": 1692,
        "type": "Programming_language",
        "value": "sed"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Vim Script",
        "size": 1515,
        "type": "Programming_language",
        "value": "Vim Script"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Starlark",
        "size": 882,
        "type": "Programming_language",
        "value": "Starlark"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Emacs Lisp",
        "size": 308,
        "type": "Programming_language",
        "value": "Emacs Lisp"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "type": "Programming_language",
        "value": "MATLAB",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "fengsim",
          "type": "User"
        },
        "date_created": "2025-04-02T05:47:00Z",
        "date_published": "2025-05-30T03:52:18Z",
        "html_url": "https://github.com/OpenDigitalTwin-Dev/NLA/releases/tag/v3.25.5",
        "release_id": 221980921,
        "tag": "v3.25.5",
        "tarball_url": "https://api.github.com/repos/OpenDigitalTwin-Dev/NLA/tarball/v3.25.5",
        "type": "Release",
        "url": "https://api.github.com/repos/OpenDigitalTwin-Dev/NLA/releases/221980921",
        "value": "https://api.github.com/repos/OpenDigitalTwin-Dev/NLA/releases/221980921",
        "zipball_url": "https://api.github.com/repos/OpenDigitalTwin-Dev/NLA/zipball/v3.25.5"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "name": "setuptools",
        "type": "Software_application",
        "value": "setuptools>=40.8.0",
        "version": ">=40.8.0"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "wheel",
        "type": "Software_application",
        "value": "wheel",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "cffi",
        "type": "Software_application",
        "value": "cffi",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "cffi",
        "type": "Software_application",
        "value": "cffi",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "numpy",
        "type": "Software_application",
        "value": "numpy",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "altair",
        "type": "Software_application",
        "value": "altair>=5.0",
        "version": ">=5.0"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/doc/sphinx/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "breathe",
        "type": "Software_application",
        "value": "breathe>=4.30",
        "version": ">=4.30"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/doc/sphinx/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "myst-parser[linkify]",
        "type": "Software_application",
        "value": "myst-parser[linkify]>=0.14.0",
        "version": ">=0.14.0"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/doc/sphinx/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "sphinx-hoverxref",
        "type": "Software_application",
        "value": "sphinx-hoverxref>=0.3b1",
        "version": ">=0.3b1"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/doc/sphinx/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "sphinx-design",
        "type": "Software_application",
        "value": "sphinx-design",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/doc/sphinx/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "sphinx",
        "type": "Software_application",
        "value": "sphinx>=5.3,<6",
        "version": ">=5.3,<6"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/doc/sphinx/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "sphinx_rtd_theme",
        "type": "Software_application",
        "value": "sphinx_rtd_theme",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/doc/sphinx/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "sphinxcontrib-bibtex",
        "type": "Software_application",
        "value": "sphinxcontrib-bibtex==2.5",
        "version": "==2.5"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/doc/sphinx/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "sphinxcontrib-katex",
        "type": "Software_application",
        "value": "sphinxcontrib-katex",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/doc/sphinx/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "sphinxcontrib-mermaid",
        "type": "Software_application",
        "value": "sphinxcontrib-mermaid",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/doc/sphinx/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "sphinxcontrib-svg2pdfconverter",
        "type": "Software_application",
        "value": "sphinxcontrib-svg2pdfconverter",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/doc/sphinx/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "sphinxext-altair",
        "type": "Software_application",
        "value": "sphinxext-altair",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/doc/sphinx/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "docutils",
        "type": "Software_application",
        "value": "docutils",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libceed/doc/sphinx/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "matplotlib",
        "type": "Software_application",
        "value": "matplotlib",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/scripts/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "numpy",
        "type": "Software_application",
        "value": "numpy",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/scripts/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Pillow",
        "type": "Software_application",
        "value": "Pillow",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/scripts/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Requests",
        "type": "Software_application",
        "value": "Requests",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/libxsmm/scripts/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "setuptools",
        "type": "Software_application",
        "value": "setuptools",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "wheel",
        "type": "Software_application",
        "value": "wheel",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "patchelf; platform_system",
        "type": "Software_application",
        "value": "patchelf; platform_system=='Linux'",
        "version": "=='Linux'"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "cython",
        "type": "Software_application",
        "value": "cython >= 3",
        "version": ">= 3"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/src/binding/slepc4py/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "numpy",
        "type": "Software_application",
        "value": "numpy",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/src/binding/slepc4py/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "setuptools",
        "type": "Software_application",
        "value": "setuptools",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/slepc/src/binding/slepc4py/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "setuptools",
        "type": "Software_application",
        "value": "setuptools",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "wheel",
        "type": "Software_application",
        "value": "wheel",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "patchelf; platform_system",
        "type": "Software_application",
        "value": "patchelf; platform_system=='Linux'",
        "version": "=='Linux'"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "cython",
        "type": "Software_application",
        "value": "cython >= 3",
        "version": ">= 3"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/binding/petsc4py/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "numpy",
        "type": "Software_application",
        "value": "numpy",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/binding/petsc4py/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "setuptools",
        "type": "Software_application",
        "value": "setuptools",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/petsc/src/binding/petsc4py/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "docopt",
        "type": "Software_application",
        "value": "docopt",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/packages/Search/examples/viz/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "matplotlib",
        "type": "Software_application",
        "value": "matplotlib",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/packages/Search/examples/viz/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "numpy",
        "type": "Software_application",
        "value": "numpy",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/packages/Search/examples/viz/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "docopt",
        "type": "Software_application",
        "value": "docopt",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/packages/Search/scripts/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "matplotlib",
        "type": "Software_application",
        "value": "matplotlib",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/packages/Search/scripts/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "numpy",
        "type": "Software_application",
        "value": "numpy",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/DataTransferKit/packages/Search/scripts/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Sphinx",
        "type": "Software_application",
        "value": "Sphinx==7.2.6",
        "version": "==7.2.6"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/tribits/doc/sphinx/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "sphinx-rtd-theme",
        "type": "Software_application",
        "value": "sphinx-rtd-theme==0.5.2",
        "version": "==0.5.2"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/trilinos/cmake/tribits/doc/sphinx/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "sphinx",
        "type": "Software_application",
        "value": "sphinx>=5.3",
        "version": ">=5.3"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/docs/usr-manual/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "breathe",
        "type": "Software_application",
        "value": "breathe>=4.34",
        "version": ">=4.34"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/docs/usr-manual/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "sphinx-rtd-theme",
        "type": "Software_application",
        "value": "sphinx-rtd-theme>=1.1.1",
        "version": ">=1.1.1"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/docs/usr-manual/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "docutils",
        "type": "Software_application",
        "value": "docutils>=0.17.1",
        "version": ">=0.17.1"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/hypre/src/docs/usr-manual/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "sphinx",
        "type": "Software_application",
        "value": "sphinx==4.0.3",
        "version": "==4.0.3"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/LAGraph/rtdocs/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "sphinx_rtd_theme",
        "type": "Software_application",
        "value": "sphinx_rtd_theme>=0.5.2",
        "version": ">=0.5.2"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/LAGraph/rtdocs/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "breathe",
        "type": "Software_application",
        "value": "breathe",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/LAGraph/rtdocs/requirements.txt",
      "technique": "code_parser"
    }
  ],
  "somef_missing_categories": [
    "run",
    "download",
    "contact",
    "usage",
    "faq",
    "support"
  ],
  "somef_provenance": {
    "date": "2025-09-19 01:23:15",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "version": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "3.3.3"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "3.3.3"
      },
      "source": "https://raw.githubusercontent.com/OpenDigitalTwin-Dev/NLA/main/suitesparse/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ]
}