{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "File: Acknowledgements.txt\n\nTHIS WORK IS FUNDED IN PART BY:\n\n1.  The United States Department of Defense under Contract No. FA8702-15-D-0002\n    with Carnegie Mellon University for the operation of the Software\n    Engineering Institute, a federally funded research and development center.\n2.  The United States Department of Defense under Contract No. FA8650-18-2-7835\n    and HR0011-18-3-0007\n3.  NVIDIA, Intel, MIT Lincoln Laboratory, MathWorks, IBM, and Julia Computing.\n4.  The National Science Foundation (1514406, OAC-1740333, CCF-1629657).\n5.  The United States Department of Energy, Office of Science, ASCR Contract\n    No. DE-AC02-05CH11231.\n\n\nTHIS WORK BUILDS UPON THE FOLLOWING PRIOR WORKS:\n1.  SuiteSparse:GraphBLAS, \n    (http://faculty.cse.tamu.edu/davis/GraphBLAS.html) \n    Copyright 2017-2023  Timothy A. Davis (Author), AldenMath.com.\n    By Tim Davis, Texas A&M University. Note that while SuiteSparse:GraphBLAS\n    is itself under the Apache 2 license, any contributions derived from\n    SuiteSparse:GraphBLAS and incorporated by the Author into LAGraph are\n    contributed under the LAGraph license.\n2.  GraphBLAS Template Library (GBTL). Version 1.0.0\n    (https://github.com/cmu-sei/gbtl/blob/1.0.0)\n    Copyright 2015 Carnegie Mellon University and The Trustees of Indiana.\n    DM-0002659\n3.  GraphBLAS Template Library (GBTL). Version 3.0 (and prior versions)\n    (https://github.com/cmu-sei/gbtl/blob/3.0.0)\n    Copyright 2017-2020 Carnegie Mellon University, Battelle Memorial\n    Institute, and Authors. DM17-0037, DM18-0559, DM20-0442\n4.  Combinatorial BLAS, \n    (https://people.eecs.berkeley.edu/~aydin/CombBLAS/) \n    Copyright 2011-2018  The Regents of the University of California,\n    through Lawrence Berkeley National Laboratory (subject to receipt of any\n    required approvals from the U.S. Dept. of Energy) and University of\n    California, Santa Barbara. \n5.  GraphBLAST,\n    (https://github.com/gunrock/graphblast)\n    Copyright 2015-2019  The Regents of the University of California.\n\nLAGraph depends upon the following 3rd party libraries:\n\n    * json.h:  a simple JSON parser by Neil Henning,\n        ( https://github.com/sheredom/json.h ). Includes its own test suite.\n        required by experimental/utilities/LAGraph_SRead.c\n\n"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/LAGraph/Acknowledgments.txt",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "type": "Text_excerpt",
        "value": "Markus M\u00fctzel contributed the most recent update of the SuiteSparse build\nsystem for all SuiteSparse packages, extensively porting it and modernizing it.\n\nI would also like to thank Fran\u00e7ois Bissey, Sebastien Villemot, Erik Welch, Jim\nKitchen, and Fabian Wein for their valuable feedback on the\nSuiteSparse build system and how it works with various Linux / Python distros\nand other package managers.  If you are a maintainer of a SuiteSparse packaging\nfor a Linux distro, conda-forge, R, spack, brew, vcpkg, etc, please feel free\nto contact me if there's anything I can do to make your life easier.\nI would also like to thank Raye Kimmerer for adding support for 32-bit\nrow/column indices in SPQR v4.2.0.\n\nSee also the various Acknowledgements within each package.\n\n"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "authors": [
    {
      "confidence": 1,
      "result": {
        "affiliation": "Texas A&M University",
        "email": "scottk@tamu.edu",
        "identifier": "https://orcid.org/0000-0001-8340-0824",
        "type": "String",
        "value": "Scott Kolodziej"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "Texas A&M University",
        "email": "davis@tamu.edu",
        "identifier": "https://orcid.org/0000-0001-7614-6899",
        "type": "String",
        "value": "Timothy Davis"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "Microsoft Corporation",
        "identifier": "https://orcid.org/0000-0002-8689-5268",
        "type": "String",
        "value": "Nuri Yeralan"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "University of Florida",
        "email": "hager@ufl.edu",
        "type": "String",
        "value": "William Hager"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "datePublished": "2019",
        "format": "bibtex",
        "type": "File_dump",
        "value": "\n@article{10.1145/3322125,\nauthor = {Davis, Timothy A.},\ntitle = {Algorithm 1000: SuiteSparse:GraphBLAS: Graph Algorithms in the Language of Sparse Linear Algebra},\nyear = {2019},\nissue_date = {December 2019},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {45},\nnumber = {4},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/3322125},\ndoi = {10.1145/3322125},\nabstract = {SuiteSparse:GraphBLAS is a full implementation of the GraphBLAS standard, which defines a set of sparse matrix operations on an extended algebra of semirings using an almost unlimited variety of operators and types. When applied to sparse adjacency matrices, these algebraic operations are equivalent to computations on graphs. GraphBLAS provides a powerful and expressive framework for creating graph algorithms based on the elegant mathematics of sparse matrix operations on a semiring. An overview of the GraphBLAS specification is given, followed by a description of the key features and performance of its implementation in the SuiteSparse:GraphBLAS package.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {dec},\narticleno = {44},\nnumpages = {25},\nkeywords = {GraphBLAS, Graph algorithms, sparse matrices}\n}\n\n@book{FA02,\n    author={T. A. Davis},\n    title={Direct Methods for Sparse Linear Systems},\n    publisher={SIAM},\n    address={Philadelphia, PA},\n    year={2006},\n    url={https://doi.org/10.1137/1.9780898718881},\n    doi={10.1137/1.9780898718881}}\n\n\n@article{10.1145/2049662.2049670,\nauthor = {Davis, Timothy A.},\ntitle = {Algorithm 915, SuiteSparseQR: Multifrontal Multithreaded Rank-Revealing Sparse QR Factorization},\nyear = {2011},\nissue_date = {November 2011},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {38},\nnumber = {1},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/2049662.2049670},\ndoi = {10.1145/2049662.2049670},\nabstract = {SuiteSparseQR is a sparse QR factorization package based on the multifrontal method. Within each frontal matrix, LAPACK and the multithreaded BLAS enable the method to obtain high performance on multicore architectures. Parallelism across different frontal matrices is handled with Intel's Threading Building Blocks library. The symbolic analysis and ordering phase pre-eliminates singletons by permuting the input matrix A into the form [R11 R12; 0 A22] where R11 is upper triangular with diagonal entries above a given tolerance. Next, the fill-reducing ordering, column elimination tree, and frontal matrix structures are found without requiring the formation of the pattern of ATA. Approximate rank-detection is performed within each frontal matrix using Heath's method. While Heath's method is not always exact, it has the advantage of not requiring column pivoting and thus does not interfere with the fill-reducing ordering. For sufficiently large problems, the resulting sparse QR factorization obtains a substantial fraction of the theoretical peak performance of a multicore computer.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {dec},\narticleno = {8},\nnumpages = {22},\nkeywords = {least-square problems, sparse matrices, QR factorization}\n}\n\n@article{10.1145/3065870,\nauthor = {Yeralan, Sencer Nuri and Davis, Timothy A. and Sid-Lakhdar, Wissam M. and Ranka, Sanjay},\ntitle = {Algorithm 980: Sparse QR Factorization on the GPU},\nyear = {2017},\nissue_date = {June 2018},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {44},\nnumber = {2},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/3065870},\ndoi = {10.1145/3065870},\nabstract = {Sparse matrix factorization involves a mix of regular and irregular computation, which is a particular challenge when trying to obtain high-performance on the highly parallel general-purpose computing cores available on graphics processing units (GPUs). We present a sparse multifrontal QR factorization method that meets this challenge and is significantly faster than a highly optimized method on a multicore CPU. Our method factorizes many frontal matrices in parallel and keeps all the data transmitted between frontal matrices on the GPU. A novel bucket scheduler algorithm extends the communication-avoiding QR factorization for dense matrices by exploiting more parallelism and by exploiting the staircase form present in the frontal matrices of a sparse multifrontal method.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {aug},\narticleno = {17},\nnumpages = {29},\nkeywords = {GPU, QR factorization, least-square problems, sparse matrices}\n}\n\n@article{10.1145/1391989.1391995,\nauthor = {Chen, Yanqing and Davis, Timothy A. and Hager, William W. and Rajamanickam, Sivasankaran},\ntitle = {Algorithm 887: CHOLMOD, Supernodal Sparse Cholesky Factorization and Update/Downdate},\nyear = {2008},\nissue_date = {October 2008},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {35},\nnumber = {3},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/1391989.1391995},\ndoi = {10.1145/1391989.1391995},\nabstract = {CHOLMOD is a set of routines for factorizing sparse symmetric positive definite matrices of the form A or AAT, updating/downdating a sparse Cholesky factorization, solving linear systems, updating/downdating the solution to the triangular system Lx\u2009=\u2009b, and many other sparse matrix functions for both symmetric and unsymmetric matrices. Its supernodal Cholesky factorization relies on LAPACK and the Level-3 BLAS, and obtains a substantial fraction of the peak performance of the BLAS. Both real and complex matrices are supported. CHOLMOD is written in ANSI/ISO C, with both C and MATLABTM interfaces. It appears in MATLAB 7.2 as x\u2009=\u2009Ab when A is sparse symmetric positive definite, as well as in several other sparse matrix functions.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {oct},\narticleno = {22},\nnumpages = {14},\nkeywords = {sparse matrices, linear equations, Cholesky factorization}\n}\n\n@article{10.1145/1462173.1462176,\nauthor = {Davis, Timothy A. and Hager, William W.},\ntitle = {Dynamic Supernodes in Sparse Cholesky Update/Downdate and Triangular Solves},\nyear = {2009},\nissue_date = {February 2009},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {35},\nnumber = {4},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/1462173.1462176},\ndoi = {10.1145/1462173.1462176},\nabstract = {The supernodal method for sparse Cholesky factorization represents the factor L as a set of supernodes, each consisting of a contiguous set of columns of L with identical nonzero pattern. A conventional supernode is stored as a dense submatrix. While this is suitable for sparse Cholesky factorization where the nonzero pattern of L does not change, it is not suitable for methods that modify a sparse Cholesky factorization after a low-rank change to A (an update/downdate, undefined = A \u00b1 WWT). Supernodes merge and split apart during an update/downdate. Dynamic supernodes are introduced which allow a sparse Cholesky update/downdate to obtain performance competitive with conventional supernodal methods. A dynamic supernodal solver is shown to exceed the performance of the conventional (BLAS-based) supernodal method for solving triangular systems. These methods are incorporated into CHOLMOD, a sparse Cholesky factorization and update/downdate package which forms the basis of x = Ab MATLAB when A is sparse and symmetric positive definite.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {feb},\narticleno = {27},\nnumpages = {23},\nkeywords = {sparse matrices, linear equations, Cholesky factorization}\n}\n\n\n@article{doi:10.1137/S089547980343641X,\nauthor = {Davis, Timothy A. and Hager, William W.},\ntitle = {Row Modifications of a Sparse Cholesky Factorization},\njournal = {SIAM Journal on Matrix Analysis and Applications},\nvolume = {26},\nnumber = {3},\npages = {621-639},\nyear = {2005},\ndoi = {10.1137/S089547980343641X},\nURL = {https://doi.org/10.1137/S089547980343641X },\neprint = { https://doi.org/10.1137/S089547980343641X } ,\n    abstract = { Given a sparse, symmetric positive definite matrix C and an associated sparse Cholesky factorization LDL\\$\\tr\\$, we develop sparse techniques for updating the factorization after a symmetric modification of a row and column of C. We show how the modification in the Cholesky factorization associated with this rank-2 modification of C can be computed efficiently using a sparse rank-1 technique developed in [T. A. Davis and W. W. Hager, SIAM J. Matrix Anal. Appl., 20 (1999), pp. 606--627]. We also determine how the solution of a linear system Lx = b changes after changing a row and column of C or after a rank-r change in C. }\n}\n\n\n@article{doi:10.1137/S0895479899357346,\nauthor = {Davis, Timothy A. and Hager, William W.},\ntitle = {Multiple-Rank Modifications of a Sparse Cholesky Factorization},\njournal = {SIAM Journal on Matrix Analysis and Applications},\nvolume = {22},\nnumber = {4},\npages = {997-1013},\nyear = {2001},\ndoi = {10.1137/S0895479899357346},\nURL = { https://doi.org/10.1137/S0895479899357346 },\neprint = { https://doi.org/10.1137/S0895479899357346 } ,\n    abstract = { Given a sparse symmetric positive definite matrix \\$\\mathbf{AA}\\tr\\$ and an associated sparse Cholesky factorization \\$\\mathbf{LDL}\\tr\\$ or \\$\\mathbf{LL}\\tr\\$, we develop sparse techniques for updating the factorization after either adding a collection of columns to A or deleting a collection of columns from A. Our techniques are based on an analysis and manipulation of the underlying graph structure, using the framework developed in an earlier paper on rank-1 modifications [T. A. Davis and W. W. Hager, SIAM J. Matrix Anal. Appl., 20 (1999), pp. 606--627]. Computationally, the multiple-rank update has better memory traffic and executes much faster than an equivalent series of rank-1 updates since the multiple-rank update makes one pass through L computing the new entries, while a series of rank-1 updates requires multiple passes through L. }\n}\n\n\n\n@article{doi:10.1137/S0895479897321076,\nauthor = {Davis, Timothy A. and Hager, William W.},\ntitle = {Modifying a Sparse Cholesky Factorization},\njournal = {SIAM Journal on Matrix Analysis and Applications},\nvolume = {20},\nnumber = {3},\npages = {606-627},\nyear = {1999},\ndoi = {10.1137/S0895479897321076},\nURL = { https://doi.org/10.1137/S0895479897321076 },\neprint = { https://doi.org/10.1137/S0895479897321076 } ,\n    abstract = { Given a sparse symmetric positive definite matrix \\${\\bf AA}^{\\sf T}\\$ and an associated sparse Cholesky factorization \\${\\bf LDL}^{\\sf T}\\$ or \\${\\bf LL}^{\\sf T}\\$, we develop sparse techniques for obtaining the new factorization associated with either adding a column to \\${\\bf A}\\$ or deleting a column from \\${\\bf A}\\$. Our techniques are based on an analysis and manipulation of the underlying graph structure and on ideas of Gill et al.\\ [ Math. Comp., 28 (1974), pp. 505--535] for modifying a dense Cholesky factorization. We show that our methods extend to the general case where an arbitrary sparse symmetric positive definite matrix is modified. Our methods are optimal in the sense that they take time proportional to the number of nonzero entries in \\${\\bf L}\\$ and \\${\\bf D}\\$ that change. }\n}\n\n\n@article{RENNICH2016140,\ntitle = {Accelerating sparse Cholesky factorization on GPUs},\njournal = {Parallel Computing},\nvolume = {59},\npages = {140-150},\nyear = {2016},\nnote = {Theory and Practice of Irregular Applications},\nissn = {0167-8191},\ndoi = {https://doi.org/10.1016/j.parco.2016.06.004},\nurl = {https://www.sciencedirect.com/science/article/pii/S016781911630059X},\nauthor = {Steven C. Rennich and Darko Stosic and Timothy A. Davis},\nkeywords = {Sparse, Cholesky, Factorization, GPU, Parallel},\nabstract = {Sparse factorization is a fundamental tool in scientific computing. As the major component of a sparse direct solver, it represents the dominant computational cost for many analyses. For factorizations which involve sufficient dense math, the substantial computational capability provided by GPUs (Graphics Processing Units) can help alleviate this cost. However, for many other cases, the prevalence of small/irregular dense math and the relatively slow communication between the host and device over the PCIe bus, make it challenging to significantly accelerate sparse factorization using the GPU. In this paper we describe a left-looking supernodal Cholesky factorization algorithm which permits improved utilization of the GPU when factoring sparse matrices. The central idea is to stream subtrees of the elimination tree through the GPU and perform the factorization of each subtree entirely on the GPU. This avoids the majority of the PCIe communication without the need for a complex task scheduler. Importantly, within these subtrees, many independent, small, dense operations are batched to minimize kernel launch overhead and many of these batched kernels are executed concurrently to maximize device utilization. Performance results for commonly studied matrices are presented along with suggested actions for further optimization.}\n}\n\n@article{10.1145/1024074.1024081,\nauthor = {Amestoy, Patrick R. and Davis, Timothy A. and Duff, Iain S.},\ntitle = {Algorithm 837: AMD, an Approximate Minimum Degree Ordering Algorithm},\nyear = {2004},\nissue_date = {September 2004},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {30},\nnumber = {3},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/1024074.1024081},\ndoi = {10.1145/1024074.1024081},\nabstract = {AMD is a set of routines that implements the approximate minimum degree ordering algorithm to permute sparse matrices prior to numerical factorization. There are versions written in both C and Fortran 77. A MATLAB interface is included.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {sep},\npages = {381\u2013388},\nnumpages = {8},\nkeywords = {sparse matrices, Linear equations, ordering methods, minimum degree}\n}\n\n\n\n\n\n\n\n@article{doi:10.1137/S0895479894278952,\nauthor = {Amestoy, Patrick R. and Davis, Timothy A. and Duff, Iain S.},\ntitle = {An Approximate Minimum Degree Ordering Algorithm},\njournal = {SIAM Journal on Matrix Analysis and Applications},\nvolume = {17},\nnumber = {4},\npages = {886-905},\nyear = {1996},\ndoi = {10.1137/S0895479894278952},\nURL = { https://doi.org/10.1137/S0895479894278952 },\neprint = { https://doi.org/10.1137/S0895479894278952 } ,\n    abstract = { Abstract. An approximate minimum degree (AMD), ordering algorithm for preordering a symmetric sparse matrix prior to numerical factorization is presented. We use techniques based on the quotient graph for matrix factorization that allow us to obtain computationally cheap bounds for the minimum degree. We show that these bounds are often equal to the actual degree. The resulting algorithm is typically much faster than previous minimum degree ordering algorithms and produces results that are comparable in quality with the best orderings from other minimum degree algorithms. }\n}\n\n\n@article{10.1145/1024074.1024080,\nauthor = {Davis, Timothy A. and Gilbert, John R. and Larimore, Stefan I. and Ng, Esmond G.},\ntitle = {Algorithm 836: COLAMD, a Column Approximate Minimum Degree Ordering Algorithm},\nyear = {2004},\nissue_date = {September 2004},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {30},\nnumber = {3},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/1024074.1024080},\ndoi = {10.1145/1024074.1024080},\nabstract = {Two codes are discussed, COLAMD and SYMAMD, that compute approximate minimum degree orderings for sparse matrices in two contexts: (1) sparse partial pivoting, which requires a sparsity preserving column pre-ordering prior to numerical factorization, and (2) sparse Cholesky factorization, which requires a symmetric permutation of both the rows and columns of the matrix being factorized. These orderings are computed by COLAMD and SYMAMD, respectively. The ordering from COLAMD is also suitable for sparse QR factorization, and the factorization of matrices of the form ATA and AAT, such as those that arise in least-squares problems and interior point methods for linear programming problems. The two routines are available both in MATLAB and C-callable forms. They appear as built-in routines in MATLAB Version 6.0.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {sep},\npages = {377\u2013380},\nnumpages = {4},\nkeywords = {sparse nonsymmetric matrices, ordering methods, Linear equations}\n}\n\n@article{10.1145/1024074.1024079,\nauthor = {Davis, Timothy A. and Gilbert, John R. and Larimore, Stefan I. and Ng, Esmond G.},\ntitle = {A Column Approximate Minimum Degree Ordering Algorithm},\nyear = {2004},\nissue_date = {September 2004},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {30},\nnumber = {3},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/1024074.1024079},\ndoi = {10.1145/1024074.1024079},\nabstract = {Sparse Gaussian elimination with partial pivoting computes the factorization PAQ = LU of a sparse matrix A, where the row ordering P is selected during factorization using standard partial pivoting with row interchanges. The goal is to select a column preordering, Q, based solely on the nonzero pattern of A, that limits the worst-case number of nonzeros in the factorization. The fill-in also depends on P, but Q is selected to reduce an upper bound on the fill-in for any subsequent choice of P. The choice of Q can have a dramatic impact on the number of nonzeros in L and U. One scheme for determining a good column ordering for A is to compute a symmetric ordering that reduces fill-in in the Cholesky factorization of ATA. A conventional minimum degree ordering algorithm would require the sparsity structure of ATA to be computed, which can be expensive both in terms of space and time since ATA may be much denser than A. An alternative is to compute Q directly from the sparsity structure of A; this strategy is used by MATLAB's COLMMD preordering algorithm. A new ordering algorithm, COLAMD, is presented. It is based on the same strategy but uses a better ordering heuristic. COLAMD is faster and computes better orderings, with fewer nonzeros in the factors of the matrix.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {sep},\npages = {353\u2013376},\nnumpages = {24},\nkeywords = {linear equations, Sparse nonsymmetric matrices, ordering methods}\n}\n\n@article{10.1145/992200.992206,\nauthor = {Davis, Timothy A.},\ntitle = {Algorithm 832: UMFPACK V4.3---an Unsymmetric-Pattern Multifrontal Method},\nyear = {2004},\nissue_date = {June 2004},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {30},\nnumber = {2},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/992200.992206},\ndoi = {10.1145/992200.992206},\nabstract = {An ANSI C code for sparse LU factorization is presented that combines a column pre-ordering strategy with a right-looking unsymmetric-pattern multifrontal numerical factorization. The pre-ordering and symbolic analysis phase computes an upper bound on fill-in, work, and memory usage during the subsequent numerical factorization. User-callable routines are provided for ordering and analyzing a sparse matrix, computing the numerical factorization, solving a system with the LU factors, transposing and permuting a sparse matrix, and converting between sparse matrix representations. The simple user interface shields the user from the details of the complex sparse factorization data structures by returning simple handles to opaque objects. Additional user-callable routines are provided for printing and extracting the contents of these opaque objects. An even simpler way to use the package is through its MATLAB interface. UMFPACK is incorporated as a built-in operator in MATLAB 6.5 as x = Ab when A is sparse and unsymmetric.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {jun},\npages = {196\u2013199},\nnumpages = {4},\nkeywords = {ordering methods, multifrontal method, sparse nonsymmetric matrices, linear equations}\n}\n\n\n@article{10.1145/992200.992205,\nauthor = {Davis, Timothy A.},\ntitle = {A Column Pre-Ordering Strategy for the Unsymmetric-Pattern Multifrontal Method},\nyear = {2004},\nissue_date = {June 2004},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {30},\nnumber = {2},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/992200.992205},\ndoi = {10.1145/992200.992205},\nabstract = {A new method for sparse LU factorization is presented that combines a column pre-ordering strategy with a right-looking unsymmetric-pattern multifrontal numerical factorization. The column ordering is selected to give a good a priori upper bound on fill-in and then refined during numerical factorization (while preserving the bound). Pivot rows are selected to maintain numerical stability and to preserve sparsity. The method analyzes the matrix and automatically selects one of three pre-ordering and pivoting strategies. The number of nonzeros in the LU factors computed by the method is typically less than or equal to those found by a wide range of unsymmetric sparse LU factorization methods, including left-looking methods and prior multifrontal methods.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {jun},\npages = {165\u2013195},\nnumpages = {31},\nkeywords = {linear equations, multifrontal method, sparse nonsymmetric matrices, ordering methods}\n}\n\n@article{10.1145/305658.287640,\nauthor = {Davis, Timothy A. and Duff, Iain S.},\ntitle = {A Combined Unifrontal/Multifrontal Method for Unsymmetric Sparse Matrices},\nyear = {1999},\nissue_date = {March 1999},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {25},\nnumber = {1},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/305658.287640},\ndoi = {10.1145/305658.287640},\nabstract = {We discuss the organization of frontal matrices in multifrontal methods for the solution of large sparse sets of unsymmetric linear equations. In the multifrontal method, work on a frontal matrix can be suspended, the frontal matrix can be stored for later reuse, and a new frontal matrix can be generated. There are thus several frontal matrices stored during the factorization, and one or more of these are assembled (summed) when creating a new frontal matrix. Although this means that arbitrary sparsity patterns can be handled efficiently, extra work is required to sum the frontal matrices together and can be costly because indirect addressing is requred. The (uni)frontal method avoids this extra work by factorizing the matrix with a single frontal matrix. Rows and columns are added  to the frontal matrix, and pivot rows and columns are removed. Data movement is simpler, but higher fill-in can result if the matrix cannot be permuted into a variable-band form with small profile. We consider a combined unifrontal/multifrontal algorithm to enable general fill-in reduction orderings to be applied without the data movement of previous multifrontal approaches.  We discuss this technique in the context of a code designed for the solution of sparse systems with unsymmetric pattern.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {mar},\npages = {1\u201320},\nnumpages = {20},\nkeywords = {linear equations, frontal methods, sparse unsymmetric matrices, multifrontal methods}\n}\n\n\n\n\n\n\n\n\n@article{doi:10.1137/S0895479894246905,\nauthor = {Davis, Timothy A. and Duff, Iain S.},\ntitle = {An Unsymmetric-Pattern Multifrontal Method for Sparse LU Factorization},\njournal = {SIAM Journal on Matrix Analysis and Applications},\nvolume = {18},\nnumber = {1},\npages = {140-158},\nyear = {1997},\ndoi = {10.1137/S0895479894246905},\nURL = { https://doi.org/10.1137/S0895479894246905 },\neprint = { https://doi.org/10.1137/S0895479894246905 } ,\n    abstract = { Sparse matrix factorization algorithms for general problems are typically characterized by irregular memory access patterns that limit their performance on parallel-vector supercomputers. For symmetric problems, methods such as the multifrontal method avoid indirect addressing in the innermost loops by using dense matrix kernels. However, no efficient LU factorization algorithm based primarily on dense matrix kernels exists for matrices whose pattern is very unsymmetric. We address this deficiency and present a new unsymmetric-pattern multifrontal method based on dense matrix kernels. As in the classical multifrontal method, advantage is taken of repetitive structure in the matrix by factorizing more than one pivot in each frontal matrix, thus enabling the use of Level 2 and Level 3 BLAS. The performance is compared with the classical multifrontal method and other unsymmetric solvers on a CRAY C-98. }\n}\n\n\n@article{10.1145/2491491.2491498,\nauthor = {Davis, Timothy A.},\ntitle = {Algorithm 930: FACTORIZE: An Object-Oriented Linear System Solver for MATLAB},\nyear = {2013},\nissue_date = {July 2013},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {39},\nnumber = {4},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/2491491.2491498},\ndoi = {10.1145/2491491.2491498},\nabstract = {The MATLAB\u2122 backslash (x=Ab) is an elegant and powerful interface to a suite of high-performance factorization methods for the direct solution of the linear system Ax = b and the least-squares problem minx \u2016b - Ax\u2016. It is a meta-algorithm that selects the best factorization method for a particular matrix, whether sparse or dense. However, the simplicity and elegance of its single-character interface prohibits the reuse of its factorization for subsequent systems. Requiring MATLAB users to find the best factorization method on their own can lead to suboptimal choices; even MATLAB experts can make the wrong choice. Furthermore, naive MATLAB users have a tendency to translate mathematical expressions from linear algebra directly into MATLAB, so that x = A-1b becomes the inferior yet all-to-prevalent x=inv(A)*b. To address these issues, an object-oriented FACTORIZE method is presented. Via simple-to-use operator overloading, solving two linear systems can be written as F=factorize(A); x=Fb; y=Fc, where A is factorized only once. The selection of the best factorization method (LU, Cholesky, LDLT, QR, or a complete orthogonal decomposition for rank-deficient matrices) is hidden from the user. The mathematical expression x = A-1b directly translates into the MATLAB expression x=inverse(A)*b, which does not compute the inverse at all, but does the right thing by factorizing A and solving the corresponding triangular systems.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {jul},\narticleno = {28},\nnumpages = {18},\nkeywords = {object-oriented methods, least-square problems, matrix factorization, Linear systems}\n}\n\n\n@article{10.1145/1824801.1824814,\nauthor = {Davis, Timothy A. and Palamadai Natarajan, Ekanathan},\ntitle = {Algorithm 907: KLU, A Direct Sparse Solver for Circuit Simulation Problems},\nyear = {2010},\nissue_date = {September 2010},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {37},\nnumber = {3},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/1824801.1824814},\ndoi = {10.1145/1824801.1824814},\nabstract = {KLU is a software package for solving sparse unsymmetric linear systems of equations that arise in circuit simulation applications. It relies on a permutation to Block Triangular Form (BTF), several methods for finding a fill-reducing ordering (variants of approximate minimum degree and nested dissection), and Gilbert/Peierls\u2019 sparse left-looking LU factorization algorithm to factorize each block. The package is written in C and includes a MATLAB interface. Performance results comparing KLU with SuperLU, Sparse 1.3, and UMFPACK on circuit simulation matrices are presented. KLU is the default sparse direct solver in the XyceTMcircuit simulation package developed by Sandia National Laboratories.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {sep},\narticleno = {36},\nnumpages = {17},\nkeywords = {LU factorization, circuit simulation, sparse matrices}\n}\n\n@article{10.1145/1114268.1114277,\nauthor = {Davis, Timothy A.},\ntitle = {Algorithm 849: A Concise Sparse Cholesky Factorization Package},\nyear = {2005},\nissue_date = {December 2005},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {31},\nnumber = {4},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/1114268.1114277},\ndoi = {10.1145/1114268.1114277},\nabstract = {The LDL software package is a set of short, concise routines for factorizing symmetric positive-definite sparse matrices, with some applicability to symmetric indefinite matrices. Its primary purpose is to illustrate much of the basic theory of sparse matrix algorithms in as concise a code as possible, including an elegant method of sparse symmetric factorization that computes the factorization row-by-row but stores it column-by-column. The entire symbolic and numeric factorization consists of less than 50 executable lines of code. The package is written in C, and includes a MATLAB interface.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {dec},\npages = {587\u2013591},\nnumpages = {5},\nkeywords = {Cholesky factorization, linear equations, sparse matrices}\n}\n\n@article{10.1145/2049662.2049663,\nauthor = {Davis, Timothy A. and Hu, Yifan},\ntitle = {The University of Florida Sparse Matrix Collection},\nyear = {2011},\nissue_date = {November 2011},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {38},\nnumber = {1},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/2049662.2049663},\ndoi = {10.1145/2049662.2049663},\nabstract = {We describe the University of Florida Sparse Matrix Collection, a large and actively growing set of sparse matrices that arise in real applications. The Collection is widely used by the numerical linear algebra community for the development and performance evaluation of sparse matrix algorithms. It allows for robust and repeatable experiments: robust because performance results with artificially generated matrices can be misleading, and repeatable because matrices are curated and made publicly available in many formats. Its matrices cover a wide spectrum of domains, include those arising from problems with underlying 2D or 3D geometry (as structural engineering, computational fluid dynamics, model reduction, electromagnetics, semiconductor devices, thermodynamics, materials, acoustics, computer graphics/vision, robotics/kinematics, and other discretizations) and those that typically do not have such geometry (optimization, circuit simulation, economic and financial modeling, theoretical and quantum chemistry, chemical process simulation, mathematics and statistics, power networks, and other networks and graphs). We provide software for accessing and managing the Collection, from MATLAB\u2122, Mathematica\u2122, Fortran, and C, as well as an online search capability. Graph visualization of the matrices is provided, and a new multilevel coarsening scheme is proposed to facilitate this task.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {dec},\narticleno = {1},\nnumpages = {25},\nkeywords = {sparse matrices, Graph drawing, performance evaluation, multilevel algorithms}\n}\n\n\n@article{Kolodziej2019,\n  doi = {10.21105/joss.01244},\n  url = {https://doi.org/10.21105/joss.01244},\n  year = {2019},\n  publisher = {The Open Journal},\n  volume = {4},\n  number = {35},\n  pages = {1244},\n  author = {Scott P. Kolodziej and Mohsen Aznaveh and Matthew Bullock and Jarrett David and Timothy A. Davis and Matthew Henderson and Yifan Hu and Read Sandstrom},\n  title = {The SuiteSparse Matrix Collection Website Interface},\n  journal = {Journal of Open Source Software}\n}\n\n\n@article{10.1145/2513109.2513116,\nauthor = {Foster, Leslie V. and Davis, Timothy A.},\ntitle = {Algorithm 933: Reliable Calculation of Numerical Rank, Null Space Bases, Pseudoinverse Solutions, and Basic Solutions Using SuitesparseQR},\nyear = {2013},\nissue_date = {September 2013},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {40},\nnumber = {1},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/2513109.2513116},\ndoi = {10.1145/2513109.2513116},\nabstract = {The SPQR_RANK package contains routines that calculate the numerical rank of large, sparse, numerically rank-deficient matrices. The routines can also calculate orthonormal bases for numerical null spaces, approximate pseudoinverse solutions to least squares problems involving rank-deficient matrices, and basic solutions to these problems. The algorithms are based on SPQR from SuiteSparseQR (ACM Transactions on Mathematical Software 38, Article 8, 2011). SPQR is a high-performance routine for forming QR factorizations of large, sparse matrices. It returns an estimate for the numerical rank that is usually, but not always, correct. The new routines improve the accuracy of the numerical rank calculated by SPQR and reliably determine the numerical rank in the sense that, based on extensive testing with matrices from applications, the numerical rank is almost always accurately determined when our methods report that the numerical rank should be correct. Reliable determination of numerical rank is critical to the other calculations in the package. The routines work well for matrices with either small or large null space dimensions.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {oct},\narticleno = {7},\nnumpages = {23},\nkeywords = {QR factorization, pseudoinverse, Numerical rank, null space, rank revealing, sparse matrices}\n}\n\n@article{10.1145/3337792,\nauthor = {Davis, Timothy A. and Hager, William W. and Kolodziej, Scott P. and Yeralan, S. Nuri},\ntitle = {Algorithm 1003: Mongoose, a Graph Coarsening and Partitioning Library},\nyear = {2020},\nissue_date = {March 2020},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {46},\nnumber = {1},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/3337792},\ndoi = {10.1145/3337792},\nabstract = {Partitioning graphs is a common and useful operation in many areas, from parallel computing to VLSI design to sparse matrix algorithms. In this article, we introduce Mongoose, a multilevel hybrid graph partitioning algorithm and library. Building on previous work in multilevel partitioning frameworks and combinatoric approaches, we introduce novel stall-reducing and stall-free coarsening strategies, as well as an efficient hybrid algorithm leveraging (1) traditional combinatoric methods and (2) continuous quadratic programming formulations. We demonstrate how this new hybrid algorithm outperforms either strategy in isolation, and we also compare Mongoose to METIS and demonstrate its effectiveness on large and social networking (power law) graphs.},\njournal = {ACM Trans. Math. Softw.},\nmonth = {mar},\narticleno = {7},\nnumpages = {18},\nkeywords = {vertex matching, Graph partitioning, graph coarsening}\n}\n\n\n@article{10.1145/3519024,\nauthor = {Lourenco, Christopher and Chen, Jinhao and Moreno-Centeno, Erick and Davis, Timothy A.},\ntitle = {Algorithm&nbsp;1XXX: SPEX Left LU, Exactly Solving Sparse Linear Systems via a Sparse Left-Looking Integer-Preserving LU Factorization},\nyear = {2022},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nissn = {0098-3500},\nurl = {https://doi.org/10.1145/3519024},\ndoi = {10.1145/3519024},\nabstract = {SPEX Left LU is a software package for exactly solving unsymmetric sparse linear systems. As a component of the sparse exact (SPEX) software package, SPEX Left LU can be applied to any input matrix, A, whose entries are integral, rational, or decimal, and provides a solution to the system Ax = b which is either exact or accurate to user-specified precision. SPEX Left LU preorders the matrix A with a user-specified fill-reducing ordering and computes a left-looking LU factorization with the special property that each operation used to compute the L and U matrices is integral. Notable additional applications of this package include benchmarking the stability and accuracy of state-of-the-art linear solvers, and determining whether singular-to-double-precision matrices are indeed singular. Computationally, this paper evaluates the impact of several novel pivoting schemes in exact arithmetic, benchmarks the exact iterative solvers within Linbox, and benchmarks the accuracy of MATLAB sparse backslash. Most importantly, it is shown that SPEX Left LU outperforms the exact iterative solvers in run time on easy instances and in stability as the iterative solver fails on a sizeable subset of the tested (both easy and hard) instances. The SPEX Left LU package is written in ANSI C, comes with a MATLAB interface, and is distributed via GitHub, as a component of the SPEX software package, and as a component of SuiteSparse.},\nnote = {Just Accepted},\njournal = {ACM Trans. Math. Softw.},\nmonth = {feb},\nkeywords = {exact matrix factorization, sparse linear systems, sparse matrix algorithms, exactly solving linear systems, roundoff errors}\n}\n\n"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/CITATION.bib",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to cite the SuiteSparse meta-package and its component packages:",
        "type": "Text_excerpt",
        "value": "SuiteSparse is a meta-package of many packages, each with their own published\npapers.  To cite the whole collection, use the URLs:\n\n* https://github.com/DrTimothyAldenDavis/SuiteSparse\n* http://suitesparse.com (which is a forwarding URL\n        to https://people.engr.tamu.edu/davis/suitesparse.html)\n\nPlease also cite the specific papers for the packages you use.  This is a long\nlist; if you want a shorter list, just cite the most recent \"Algorithm XXX:\"\npapers in ACM TOMS, for each package.\n\n* For the MATLAB x=A\\b, see below for AMD, COLAMD, CHOLMOD, UMFPACK,\n    and SuiteSparseQR (SPQR).\n\n* for GraphBLAS, and C=AB in MATLAB (sparse-times-sparse):\n\n  T. A. Davis. Algorithm 1037: SuiteSparse:GraphBLAS: Parallel Graph Algorithms\n  in the Language of Sparse Linear Algebra. ACM Trans. Math.  Softw. 49, 3,\n  Article 28 (September 2023), 30 pages.  https://doi.org/10.1145/3577195\n\n  T. Davis, Algorithm 1000: SuiteSparse:GraphBLAS: graph algorithms in the\n  language of sparse linear algebra, ACM Trans on Mathematical Software, vol\n  45, no 4, Dec. 2019, Article No 44.  https://doi.org/10.1145/3322125.\n\n* for LAGraph:\n\n  G. Sz\u00e1rnyas et al., \"LAGraph: Linear Algebra, Network Analysis Libraries, and\n  the Study of Graph Algorithms,\" 2021 IEEE International Parallel and\n  Distributed Processing Symposium Workshops (IPDPSW), Portland, OR, USA, 2021,\n  pp. 243-252. https://doi.org/10.1109/IPDPSW52791.2021.00046.\n\n* for CSparse/CXSParse:\n\n  T. A. Davis, Direct Methods for Sparse Linear Systems, SIAM Series on the\n  Fundamentals of Algorithms, SIAM, Philadelphia, PA, 2006.\n  https://doi.org/10.1137/1.9780898718881\n\n* for SuiteSparseQR (SPQR): (also cite AMD, COLAMD):\n\n  T. A. Davis, Algorithm 915: SuiteSparseQR: Multifrontal multithreaded\n  rank-revealing sparse QR factorization, ACM Trans. on Mathematical Software,\n  38(1), 2011, pp. 8:1--8:22.  https://doi.org/10.1145/2049662.2049670\n\n* for SuiteSparseQR/GPU:\n\n  Sencer Nuri Yeralan, T. A. Davis, Wissam M. Sid-Lakhdar, and Sanjay Ranka.\n  2017. Algorithm 980: Sparse QR Factorization on the GPU.  ACM Trans. Math.\n  Softw. 44, 2, Article 17 (June 2018), 29 pages.\n  https://doi.org/10.1145/3065870\n\n* for CHOLMOD: (also cite AMD, COLAMD):\n\n  Y. Chen, T. A. Davis, W. W. Hager, and S. Rajamanickam, Algorithm 887:\n  CHOLMOD, supernodal sparse Cholesky factorization and update/downdate, ACM\n  Trans. on Mathematical Software, 35(3), 2008, pp. 22:1--22:14.\n  https://dl.acm.org/doi/abs/10.1145/1391989.1391995\n\n  T. A. Davis and W. W. Hager, Dynamic supernodes in sparse Cholesky\n  update/downdate and triangular solves, ACM Trans. on Mathematical Software,\n  35(4), 2009, pp. 27:1--27:23.  https://doi.org/10.1145/1462173.1462176\n\n* for CHOLMOD/Modify Module: (also cite AMD, COLAMD):\n\n  T. A. Davis and William W. Hager, Row Modifications of a Sparse Cholesky\n  Factorization SIAM Journal on Matrix Analysis and Applications 2005 26:3,\n  621-639.  https://doi.org/10.1137/S089547980343641X\n\n  T. A. Davis and William W. Hager, Multiple-Rank Modifications of a Sparse\n  Cholesky Factorization SIAM Journal on Matrix Analysis and Applications 2001\n  22:4, 997-1013.  https://doi.org/10.1137/S0895479899357346\n\n  T. A. Davis and William W. Hager, Modifying a Sparse Cholesky Factorization,\n  SIAM Journal on Matrix Analysis and Applications 1999 20:3, 606-627.\n  https://doi.org/10.1137/S0895479897321076\n\n* for CHOLMOD/GPU Modules:\n\n  Steven C. Rennich, Darko Stosic, Timothy A. Davis, Accelerating sparse\n  Cholesky factorization on GPUs, Parallel Computing, Vol 59, 2016, pp 140-150.\n  https://doi.org/10.1016/j.parco.2016.06.004\n\n* for AMD and CAMD:\n\n  P. Amestoy, T. A. Davis, and I. S. Duff, Algorithm 837: An approximate\n  minimum degree ordering algorithm, ACM Trans. on Mathematical Software,\n  30(3), 2004, pp. 381--388.\n  https://dl.acm.org/doi/abs/10.1145/1024074.1024081\n\n  P. Amestoy, T. A. Davis, and I. S. Duff, An approximate minimum degree\n  ordering algorithm, SIAM J. Matrix Analysis and Applications, 17(4), 1996,\n  pp. 886--905.  https://doi.org/10.1137/S0895479894278952\n\n* for COLAMD, SYMAMD, CCOLAMD, and CSYMAMD:\n\n  T. A. Davis, J. R. Gilbert, S. Larimore, E. Ng, Algorithm 836:  COLAMD, an\n  approximate column minimum degree ordering algorithm, ACM Trans. on\n  Mathematical Software, 30(3), 2004, pp. 377--380.\n  https://doi.org/10.1145/1024074.1024080\n\n  T. A. Davis, J. R. Gilbert, S. Larimore, E. Ng, A column approximate minimum\n  degree ordering algorithm, ACM Trans. on Mathematical Software, 30(3), 2004,\n  pp. 353--376.  https://doi.org/10.1145/1024074.1024079\n\n* for UMFPACK: (also cite AMD and COLAMD):\n\n  T. A. Davis, Algorithm 832:  UMFPACK - an unsymmetric-pattern multifrontal\n  method with a column pre-ordering strategy, ACM Trans. on Mathematical\n  Software, 30(2), 2004, pp. 196--199.\n  https://dl.acm.org/doi/abs/10.1145/992200.992206\n\n  T. A. Davis, A column pre-ordering strategy for the unsymmetric-pattern\n  multifrontal method, ACM Trans. on Mathematical Software, 30(2), 2004, pp.\n  165--195.  https://dl.acm.org/doi/abs/10.1145/992200.992205\n\n  T. A. Davis and I. S. Duff, A combined unifrontal/multifrontal method for\n  unsymmetric sparse matrices, ACM Trans. on Mathematical Software, 25(1),\n  1999, pp. 1--19.  https://doi.org/10.1145/305658.287640\n\n  T. A. Davis and I. S. Duff, An unsymmetric-pattern multifrontal method for\n  sparse LU factorization, SIAM J. Matrix Analysis and Computations, 18(1),\n  1997, pp. 140--158.  https://doi.org/10.1137/S0895479894246905\n\n* for the FACTORIZE m-file:\n\n  T. A. Davis, Algorithm 930: FACTORIZE, an object-oriented linear system\n  solver for MATLAB, ACM Trans. on Mathematical Software, 39(4), 2013, pp.\n  28:1-28:18.  https://doi.org/10.1145/2491491.2491498\n\n* for KLU and BTF (also cite AMD and COLAMD):\n\n  T. A. Davis and Ekanathan Palamadai Natarajan. 2010. Algorithm 907: KLU, A\n  Direct Sparse Solver for Circuit Simulation Problems. ACM Trans.  Math.\n  Softw. 37, 3, Article 36 (September 2010), 17 pages.\n  https://dl.acm.org/doi/abs/10.1145/1824801.1824814\n\n* for LDL:\n\n  T. A. Davis. Algorithm 849: A concise sparse Cholesky factorization package.\n  ACM Trans. Math. Softw. 31, 4 (December 2005), 587\u2013591.\n  https://doi.org/10.1145/1114268.1114277\n\n* for ssget and the SuiteSparse Matrix Collection:\n\n  T. A. Davis and Yifan Hu. 2011. The University of Florida sparse matrix\n  collection. ACM Trans. Math. Softw. 38, 1, Article 1 (November 2011), 25\n  pages.  https://doi.org/10.1145/2049662.2049663\n\n  Kolodziej et al., (2019). The SuiteSparse Matrix Collection Website\n  Interface. Journal of Open Source Software, 4(35), 1244.\n  https://doi.org/10.21105/joss.01244\n\n* for `spqr_rank`:\n\n  Leslie V. Foster and T. A. Davis. 2013. Algorithm 933: Reliable calculation\n  of numerical rank, null space bases, pseudoinverse solutions, and basic\n  solutions using suitesparseQR. ACM Trans. Math.  Softw. 40, 1, Article 7\n  (September 2013), 23 pages.  https://doi.org/10.1145/2513109.2513116\n\n* for Mongoose:\n\n  T. A. Davis, William W. Hager, Scott P. Kolodziej, and S. Nuri Yeralan.\n  2020. Algorithm 1003: Mongoose, a Graph Coarsening and Partitioning Library.\n  ACM Trans. Math. Softw. 46, 1, Article 7 (March 2020), 18 pages.\n  https://doi.org/10.1145/3337792\n\n* for SPEX:\n\n  Christopher Lourenco, Jinhao Chen, Erick Moreno-Centeno, and T. A.  Davis.\n  2022. Algorithm 1021: SPEX Left LU, Exactly Solving Sparse Linear Systems via\n  a Sparse Left-Looking Integer-Preserving LU Factorization. ACM Trans. Math.\n  Softw. June 2022.  https://doi.org/10.1145/3519024\n\n-----------------------------------------------------------------------------"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "## Code of Conduct:\n\nhttps://en.wikipedia.org/wiki/Golden_Rule\n\n## Scope:\n\nUniversal.  When in doubt, assume the rule applies to you as it does to\nthe most sensitive person you can imagine (your grandmother, perhaps).\nPut yourself in their shoes, and then apply the rule to them.  Then\ntreat that person in the same manner.  This addresses the one major\npossible criticism of the Golden Rule\n( https://en.wikipedia.org/wiki/Golden_Rule#Criticism )\n\n## Enforcement:\n\nContact Tim Davis, DrTimothyAldenDavis@gmail.com.  I take this very\nseriously.\n"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rbrott/suite-sparse"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ScottKolo/Mongoose"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "continuous_integration": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://travis-ci.com/ScottKolo/Mongoose"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing to SuiteSparse\n\nTo add an issue for a bug report (gasp!) or a feature request,\nyou can use the issue tracker on github.com, at\n[`https://github.com/DrTimothyAldenDavis/SuiteSparse/issues`]\n(https://github.com/DrTimothyAldenDavis/SuiteSparse/issues).\n\nTo contribute code, you can submit a pull request.  To do so,\nyou must first agree to the Contributor License Agreement\n[`CONTRIBUTOR-LICENSE.txt`](CONTRIBUTOR-LICENSE.txt).\nPrint a copy of the txt file (as a PDF), sign and date it,\nand email it to me at DrTimothyAldenDavis@gmail.com.  Pull\nrequests will only be included into SuiteSparse after I receive\nyour email with the signed PDF.\n\nDo not submit a pull request to the default branch.\nInstead, use the dev or dev2 branches.\n\n"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-05T00:27:37Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2018-04-09"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_published": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2018-05-25"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-29T14:31:47Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2024-01-20"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Mongoose is a hybrid graph partitioning library."
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 0.8926597412709981,
      "result": {
        "original_header": "SuiteSparse:  A Suite of Sparse matrix packages at http://suitesparse.com",
        "type": "Text_excerpt",
        "value": "METIS is authored by George Karypis. \n"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9689097464477241,
      "result": {
        "original_header": "SuiteSparse branches",
        "type": "Text_excerpt",
        "value": "* dev: the default branch, with recent updates of features to appear in\n    the next stable release.  The intent is to keep this branch in\n    fully working order at all times, but the features will not be\n    finalized at any given time.\n* stable: the most recent stable release.\n* dev2: working branch.  All submitted PRs should made to this branch.\n    This branch might not always be in working order. \n"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9011830913452049,
      "result": {
        "original_header": "SuiteSparse Packages",
        "type": "Text_excerpt",
        "value": "Packages in SuiteSparse, and files in this directory: \n  approximate minimum degree ordering.  This is the built-in AMD function in\n  MATLAB. \n  a summary of changes to SuiteSparse.  See `*/Doc/ChangeLog` for details for\n  each package. \n  sparse Cholesky factorization.  Requires AMD, COLAMD, CCOLAMD, the BLAS, and\n  LAPACK.  Optionally uses METIS.  This is `chol` and `x=A\\b` in MATLAB. \n  column approximate minimum degree ordering.  This is the built-in COLAMD\n  function in MATLAB. \n  authors (of the code): Tim Davis and Stefan Larimore \n  a concise sparse matrix package, developed for my book, \"Direct Methods for\n  Sparse Linear Systems\", published by SIAM.  Intended primarily for teaching.\n  Note that the code is (c) Tim Davis, as stated in the book. \n  For production, use CXSparse instead.  In particular, both CSparse and\n  CXSparse have the same include filename: `cs.h`.  This package is used for\n  the built-in DMPERM in MATLAB. \n  CSparse Extended.  Includes support for complex matrices and both int or long\n  integers.  Use this instead of CSparse for production use; it creates a\n  libcsparse.so (or dylib on the Mac) with the same name as CSparse.  It is a\n  superset of CSparse.  Any code that links against CSparse should also be able\n  to link against CXSparse instead. \n  a simple package that relies on almost all of SuiteSparse \n  graph algorithms in the language of linear algebra. \n  collected licenses for each package. \n  optional, to compile all of SuiteSparse using `make`, which is used as a\n  simple wrapper for `cmake` in each subproject. \n    removes all files not in distribution, including `./bin`, `./share`,\n    `./lib`, and `./include`. \n    removes all files not in distribution, but keeps compiled libraries and\n    demos, `./lib`, `./share`, and `./include`. \n  various m-files for use in MATLAB \n    list of contents \n    nested dissection ordering of regular meshes \n    `C=S*F` where `S` is sparse and `F` is full \n  sparse QR factorization.  This the built-in `qr` and `x=A\\b` in MATLAB.  Also\n  called SuiteSparseQR. \n  a demo of SuiteSparse for MATLAB \n  This is the built-in `lu` and `x=A\\b` in MATLAB. \n"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8894164048708899,
      "result": {
        "original_header": "For distro maintainers (Linux, homebrew, spack, R, Octave, Trilinos, ...):",
        "type": "Text_excerpt",
        "value": "* CUDA acceleration:  CHOLMOD and SPQR can benefit from their CUDA kernels.  If\n  you do not have CUDA or do not want to include it in your distro, this\n  version of SuiteSparse skips the building of the `CHOLMOD_CUDA` and `SPQR_CUDA`\n  libraries, and does not link against the `GPUQREngine` and\n  `SuiteSparse_GPURuntime` libraries. \n"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9016700189879344,
      "result": {
        "original_header": "About the BLAS and LAPACK libraries",
        "type": "Text_excerpt",
        "value": "To select your BLAS/LAPACK, see the instructions in SuiteSparseBLAS.cmake in\n`SuiteSparse_config/cmake_modules`.  If `SuiteSparse_config` finds a BLAS with\n64-bit integers (such as the Intel MKL ilp64 BLAS), it configures\n`SuiteSparse_config.h` with the `SUITESPARSE_BLAS_INT` defined as `int64_t`.\nOtherwise, if a 32-bit BLAS is found, this type is defined as `int32_t`.  If\nlater on, UMFPACK, CHOLMOD, or SPQR are compiled and linked  with a BLAS that\nhas a different integer size, you must override the definition with `-DBLAS64`\n(to assert the use of 64-bit integers in the BLAS) or `-DBLAS32`, (to assert\nthe use of 32-bit integers in the BLAS). \nWhen distributed in a binary form (such as a Debian, Ubuntu, Spack, or Brew\npackage), SuiteSparse should probably be compiled to expect a 32-bit BLAS,\nsince this is the most common case.  The default is to use a 32-bit BLAS, but\nthis can be changed by setting the cmake variable\n`SUITESPARSE_USE_64BIT_BLAS` to `ON`. \n"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8578662366479198,
      "result": {
        "original_header": "Compilation options",
        "type": "Text_excerpt",
        "value": "  Semicolon separated list of projects to be built or `all`.\n  Default: `all` in which case the following projects are built: \n  SuiteSparse has many user-definable settings of the form `SUITESPARSE_USE_*`\n  or `(package)_USE_*` for some particular package.  In general, these settings\n  are not strict.  For example, if `SUITESPARSE_USE_OPENMP` is `ON` then OpenMP\n  is preferred, but SuiteSparse can be used without OpenMP so no error is\n  generated if OpenMP is not found.  However, if `SUITESPARSE_USE_STRICT` is\n  `ON` then all `*_USE_*` settings are treated strictly and an error occurs\n  if any are set to `ON` but the corresponding package or setting is not\n  available.  The `*_USE_SYSTEM_*` settings are always treated as strict.\n  Default: `OFF`. \n  If set to `ON`, CUDA is enabled for all of SuiteSparse.  Default: `ON`, \n  Postfix for installation target of header from SuiteSparse. Default:\n  suitesparse, so the default include directory is:\n  `CMAKE_INSTALL_PREFIX/include/suitesparse` \n  If `ON`, static libraries are built.\n  Default: `ON`, except for GraphBLAS, which takes a long time to compile so\n  the default for GraphBLAS is `OFF` unless `BUILD_SHARED_LIBS` is `OFF`. \n  GraphBLAS, LAGraph, and ParU will be vastly slower if OpenMP is not used.\n  CHOLMOD will be somewhat slower without OpenMP (as long as it still has a\n  parallel BLAS/LAPACK).  Three packages (UMFPACK, CHOLMOD, and SPQR) rely\n  heavily on parallel BLAS/LAPACK libraries and those libraries may use OpenMP\n  internally.  If you wish to disable OpenMP in an entire application, select a\n  single-threaded BLAS/LAPACK, or a parallel BLAS/LAPACK that does not use\n  OpenMP (such as the Apple Accelerate Framework).  Using a single-threaded\n  BLAS/LAPACK library will cause UMFPACK, CHOLMOD, and SPQR to be vastly\n  slower. \n  If `ON`, `SuiteSparse_config` uses OpenMP if it is available.\n  Default: `SUITESPARSE_USE_OPENMP`.\n  It is not essential and only used to let `SuiteSparse_time` call\n  `omp_get_wtime`. \nCHOLMOD is composed of a set of Modules that can be independently selected;\nall options default to `ON`: \n  If `OFF`, do not link against CAMD and CCOLAMD. This also disables the\n  Partition module. \n"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9032248398213922,
      "result": {
        "original_header": "Possible build/install issues",
        "type": "Text_excerpt",
        "value": "One common issue can affect all packages:  getting the right #include files\nthat match the current libraries being built.  It's possible that your Linux\ndistro has an older copy of SuiteSparse headers in /usr/include or\n/usr/local/include, or that Homebrew has installed its suite-sparse bundle into\n/opt/homebrew/include or other places.  Old libraries can appear in in\n/usr/local/lib, /usr/lib, etc.  When building a new copy of SuiteSparse, the\ncmake build system is normally (or always?) able to avoid these, and use the\nright header for the right version of each library. \nAs an additional guard against this possible error, each time one SuiteSparse\npackage #include's a header from another one, it checks the version number in\nthe header file, and reports an #error to the compiler if a stale version is\ndetected.  In addition, the Example package checks both the header version and\nthe library version (by calling a function in each library).  If the versions\nmismatch in any way, the Example package reports an error at run time. \n"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9607127285230805,
      "result": {
        "original_header": "Interfaces to SuiteSparse",
        "type": "Text_excerpt",
        "value": "  Many built-in methods in MATLAB and Octave rely on SuiteSparse, including\n  `C=A*B` `x=A\\b`, `L=chol(A)`, `[L,U,P,Q]=lu(A)`, `R=qr(A)`, `dmperm(A)`,\n  `p=amd(A)`, `p=colamd(A)`, ...\n  See also Mathematica, R, and many many more.  The list is too long. \n"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "development_status": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "active"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "type": "Text_excerpt",
        "value": "Refer to each package for the documentation on each package, typically in the\nDoc subfolder.\n\n-----------------------------------------------------------------------------"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rbrott/suite-sparse/releases"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ScottKolo/Mongoose/archive/v3.3.2.zip"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rbrott/suite-sparse/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rbrott/suite-sparse"
      },
      "technique": "GitHub_API"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/LAGraph/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/LAGraph/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "requirements.txt",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/LAGraph/rtdocs/requirements.txt"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/LAGraph/rtdocs/requirements.txt",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/GraphBLAS/cpu_features/ci/docker/toolchain/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/GraphBLAS/cpu_features/ci/docker/toolchain/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/GraphBLAS/cpu_features/ci/docker/amd64/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/GraphBLAS/cpu_features/ci/docker/amd64/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/GraphBLAS/cpu_features/.github/workflows/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/GraphBLAS/cpu_features/.github/workflows/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/LAGraph/rtdocs/make_docs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/GraphBLAS/cpu_features/ci/doc/generate_image.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/GraphBLAS/cpu_features/scripts/run_integration.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/GraphBLAS/cpu_features/scripts/test_integration.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/GraphBLAS/cpu_features/scripts/make_release.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/ParU/Tcov/trigger.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/CHOLMOD/Demo/gpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/SPQR/Demo/demo_colamd2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/SPQR/Demo/demo_colamd3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/SPQR/Demo/demo_colamd.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/SPQR/Demo/demo_metis2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/SPQR/Demo/demo_metis3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/SPQR/Demo/demo_metis.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Mongoose"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rbrott/suite-sparse/issues"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ScottKolo/Mongoose/issues"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": [
          "Mongoose",
          "SuiteSparse",
          "software",
          "graph partitioning",
          "sparse matrices",
          "graph coarsening",
          "edge cut",
          "scientific software",
          "mathematical software"
        ]
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/ParU/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/https://spdx.org/licenses/GPL-3.0-only.html",
        "spdx_id": "https://spdx.org/licenses/GPL-3.0-only.html",
        "type": "License",
        "value": "https://spdx.org/licenses/GPL-3.0-only.html"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "suite-sparse"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Mongoose: A Graph Coarsening and Partitioning Library"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "rbrott"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 49367215,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 3846225,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 3561636,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 1811948,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 834706,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 273465,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 255528,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cuda",
        "size": 233167,
        "type": "Programming_language",
        "value": "Cuda"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 226526,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Fortran",
        "size": 179355,
        "type": "Programming_language",
        "value": "Fortran"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 63987,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Ruby",
        "size": 51657,
        "type": "Programming_language",
        "value": "Ruby"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 27860,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Assembly",
        "size": 14207,
        "type": "Programming_language",
        "value": "Assembly"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 10094,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 9972,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Zig",
        "size": 9289,
        "type": "Programming_language",
        "value": "Zig"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 2728,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "sed",
        "size": 1692,
        "type": "Programming_language",
        "value": "sed"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Awk",
        "size": 1574,
        "type": "Programming_language",
        "value": "Awk"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 156,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 56,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "type": "Programming_language",
        "value": "MATLAB",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "name": "sphinx",
        "type": "Software_application",
        "value": "sphinx==4.0.3",
        "version": "==4.0.3"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/LAGraph/rtdocs/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "sphinx_rtd_theme",
        "type": "Software_application",
        "value": "sphinx_rtd_theme>=0.5.2",
        "version": ">=0.5.2"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/LAGraph/rtdocs/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "breathe",
        "type": "Software_application",
        "value": "breathe",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/LAGraph/rtdocs/requirements.txt",
      "technique": "code_parser"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2025-09-19 00:31:39",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "QUICK START FOR THE C/C++ LIBRARIES:",
        "type": "Text_excerpt",
        "value": "Type the following in this directory (requires system priviledge to do the\n`sudo make install`):\n```\n    mkdir -p build && cd build\n    cmake ..\n    cmake --build .\n    sudo cmake --install .\n```\n\nAll libraries will be created and installed into the default system-wide folder\n(/usr/local/lib on Linux).  All include files needed by the applications that\nuse SuiteSparse are installed into /usr/local/include/suitesparse (on Linux).\n\nTo build only a subset of libraries, set `SUITESPARSE_ENABLE_PROJECTS` when\nconfiguring with CMake.  E.g., to build and install CHOLMOD and CXSparse\n(including their dependencies), use the following commands:\n```\n    mkdir -p build && cd build\n    cmake -DSUITESPARSE_ENABLE_PROJECTS=\"cholmod;cxsparse\" ..\n    cmake --build .\n    sudo cmake --install .\n```\n\nFor Windows (MSVC), import the `CMakeLists.txt` file into MS Visual Studio.\nBe sure to specify the build type as Release; for example, to build SuiteSparse\non Windows in the command window, run:\n```\n    mkdir -p build && cd build\n    cmake ..\n    cmake --build . --config Release\n    cmake --install .\n```\n\nBe sure to first install all required libraries:  BLAS and LAPACK for UMFPACK,\nCHOLMOD, and SPQR, and GMP and MPFR for SPEX.  Be sure to use the latest\nlibraries; SPEX requires MPFR 4.0.2 and GMP 6.1.2 (these version numbers\ndo NOT correspond to the X.Y.Z suffix of libgmp.so.X.Y.Z and libmpfr.so.X.Y.Z;\nsee the SPEX user guide for details).\n\nTo compile the libraries and install them only in SuiteSparse/lib (not\n/usr/local/lib), do this instead in the top-level of SuiteSparse:\n```\n    mkdir -p build && cd build\n    cmake -DCMAKE_INSTALL_PREFIX=.. ..\n    cmake --build .\n    cmake --install .\n```\n\nIf you add /home/me/SuiteSparse/lib to your library search path\n(`LD_LIBRARY_PATH` in Linux), you can do the following (for example):\n```\n    S = /home/me/SuiteSparse\n    cc myprogram.c -I$(S)/include/suitesparse -lumfpack -lamd -lcholmod -lsuitesparseconfig -lm\n```\n\nTo change the C and C++ compilers, and to compile in parallel use:\n```\n    cmake -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER==g++ ..\n```\n\nfor example, which changes the compiler to gcc and g++.\n\nThis will work on Linux/Unix and the Mac.  It should automatically detect if\nyou have the Intel compilers or not, and whether or not you have CUDA.\n\nSee `SuiteSparse_config/cmake_modules/SuiteSparsePolicy.cmake` to select your BLAS.\n\nYou may also need to add SuiteSparse/lib to your path.  If your copy of\nSuiteSparse is in /home/me/SuiteSparse, for example, then add this to your\n`~/.bashrc` file:\n\n```\nLD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/me/SuiteSparse/lib\nexport LD_LIBRARY_PATH\n```\n\nFor the Mac, use this instead:\n```\nDYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/home/me/SuiteSparse/lib\nexport DYLD_LIBRARY_PATH\n```\n\nDefault install location of files is below, where PACKAGE is one of the\npackages in SuiteSparse:\n\n    * `CMAKE_INSTALL_PREFIX/include/suitesparse/`: include files\n    * `CMAKE_INSTALL_PREFIX/lib/`: compiled libraries\n    * `CMAKE_INSTALL_PREFIX/lib/cmake/SuiteSparse/`: `*.cmake` scripts\n        for all of SuiteSparse\n    * `CMAKE_INSTALL_PREFIX/lib/cmake/PACKAGE/`: `*Config.cmake` scripts for a\n        specific package\n    * `CMAKE_INSTALL_PREFIX/lib/pkgconfig/PACKAGE.pc`: `.pc` scripts for\n        a specific package pkgconfig\n\n-----------------------------------------------------------------------------"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "QUICK START FOR MATLAB USERS (Linux or Mac):",
        "type": "Text_excerpt",
        "value": "Suppose you place SuiteSparse in the `/home/me/SuiteSparse` folder.\n\nAdd the `SuiteSparse/lib` folder to your run-time library path.  On Linux, add\nthis to your `~/.bashrc` script, assuming `/home/me/SuiteSparse` is the\nlocation of your copy of SuiteSparse:\n```\n    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/me/SuiteSparse/lib\n    export LD_LIBRARY_PATH\n```\n\nFor the Mac, use this instead, in your `~/.zshrc` script, assuming you place\nSuiteSparse in `/Users/me/SuiteSparse`:\n```\n    DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/Users/me/SuiteSparse/lib\n    export DYLD_LIBRARY_PATH\n```\n\nCompile all of SuiteSparse with `make local`.\n\nNext, compile the GraphBLAS MATLAB library.  In the system shell while in the\nSuiteSparse folder, type `make gbmatlab` if you want to install it system-wide\nwith `make install`, or `make gblocal` if you want to use the library in\nyour own SuiteSparse/lib.\n\nThen in the MATLAB Command Window, cd to the SuiteSparse directory and type\n`SuiteSparse_install`.  All packages will be compiled, and several demos will be\nrun.  To run a (long!) exhaustive test, do `SuiteSparse_test`.\n\nSave your MATLAB path for future sessions with the MATLAB pathtool or savepath\ncommands.  If those methods fail because you don't have system-wide permission,\nadd the new paths to your startup.m file, normally in\nDocuments/MATLAB/startup.m.  You can also use the `SuiteSparse_paths` m-file to\nset all your paths at the start of each MATLAB session.\n\n-----------------------------------------------------------------------------"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "version": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "3.3.2"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "3.3.2"
      },
      "source": "https://raw.githubusercontent.com/rbrott/suite-sparse/master/Mongoose/codemeta.json",
      "technique": "code_parser"
    }
  ]
}