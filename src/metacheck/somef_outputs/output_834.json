{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ITWM-TVFS/Ensight4Matlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Thank you for taking your time to contribute!\n\n# Code of Conduct\nTo keep it simple: please be considerate and respectful, behave mannerly and use your common sense.\n\n# Contribution Guidelines\n## Reporting issues\n\n- **Search for existing issues.** Please check to see if someone else has reported the same issue.\n- **Share as much information as possible.** Include operating system and version, as well as MATLAB version. Also, include steps to reproduce the bug.\n\n## Pull requests\n- Keep pull requests simple and small, do not pollute them with unintended changes.\n- If your PR resolves an issue, include **closes #ISSUE_NUMBER** in your commit message (or a [synonym](https://help.github.com/articles/closing-issues-using-keywords/)).\n\n## Code Style\n\nNot all current code follows the conventions below but these will be followed for future developments. \n- `lowerCamelCase` variables and functions/methods.\n- `UpperCamelCase` classes.\n- Use descriptive variables names when possible, e.g. `partName` instead of `pn`. Short variable names are okay for local with small scope, e.g. loop variables. \n- Indent code using [Allman style](https://en.wikipedia.org/wiki/Indentation_style#Allman_style). If surrounding code significantly differs from this, consider using the style predominantly used in the file instead.\n"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/CONTRIBUTING.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributing",
        "type": "Text_excerpt",
        "value": "============\nSee [CONTRIBUTING](CONTRIBUTING.md)\n"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "contributors": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributors",
        "type": "Text_excerpt",
        "value": "============\nAndre Schmei\u00dfer, Daniel Burkhart, Dominik Linn, Johannes Schnebele, Manuel Ettm\u00fcller, Simone Gramsch, Walter Arne\n"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-02-10T16:12:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-11-23T16:57:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Ensight4Matlab let's you read, process, and write files in EnSight Case Gold format from your C++ or MATLAB\u00ae code."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9665933120447336,
      "result": {
        "original_header": "Ensight4Matlab",
        "type": "Text_excerpt",
        "value": "Ensight4Matlab let's you read, process, and write files in EnSight&reg; Gold format from your C++ or MATLAB&reg; code. \n<img align=\"right\" src=\"images/ensightviewer_velocity_small.png\">\nData in the Ensight Gold format represents a 3D mesh and variable fields defined over the domain of this mesh. The mesh and/or variables may be either static in time or time-varying (transient). The Ensight Gold format is used to save e.g. CFD and CAE data in research and industrial applications, and widely supported by many software tools. It is specified by CEI software, Inc., see http://www.ceisoftware.com for more details.<br>\nThis packages provides a C++ based library to process e.g. CFD data sets in EnSight Gold format, which you can directly link (statically or dynamically) to your application. Additionally, it provides a language binding for MATLAB to easily use the C++ library in your MATLAB scripts, e.g. for analysis and rapid prototyping. \n"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ITWM-TVFS/Ensight4Matlab/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ITWM-TVFS/Ensight4Matlab/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ITWM-TVFS/Ensight4Matlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Ensight4Matlab"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.21105/joss.00217"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.5281/zenodo.1095608"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/images/ensightviewer_velocity_small.png"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://joss.theoj.org/papers/10.21105/joss.00217/status.svg"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/images/ensightviewer_scr1.png"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/images/ensightviewer_temperature_wire.png"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/images/write_example_result_in_viewer.png"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "============\n\nThe Ensight4Matlab package consists of two major parts, a C++ library and a wrapper which provides a MATLAB language binding. The C++ library can be used on its own, whereas the MATLAB wrapper needs the C++ library installed first.\n"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Building the EnsightLib C++ library",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "-----------------------------------\nThe EnsightLib library uses the Qt qmake build system. The library itself can be compiled alone, or also with test and example files. The easiest way to build everything at once is to run qmake on the file `EnsightLibAndTests.pro` in the project's root directory to create a Makefile, then run make.\n```bash\n> qmake-qt4 EnsightLibAndTests.pro\n> make\n```\nAlternatively, you can compile just the library itself:\nFrom the directory `ensight_lib` first run qmake on `EnsightLib.pro`, then run make.\n```bash\n> cd ensight_lib\n> qmake-qt4 EnsightLib.pro\n> make\n```\nIn both cases, this will create a file `libEnsightLib.so` in `ensight_lib/lib` (or a dll on Windows). The qmake-based Makefile does not create a target for `make install`, so you have to manually copy or link the .so file to e.g. `/usr/lib` if you want to make it globally accessible on your machine.\n\nIf you use a locally installed version of the Eigen library, you have to edit the include path defined in `ensight_lib/EnsightLibConfig.pri`. The corresponding line is:\n```\n# Include path to Eigen library: must contain the directory \"Eigen/Dense\"\nINCLUDEPATH += /usr/include/eigen3\n```\nYou can also edit the .pro file to compile a static library (instead of an .so) by uncommenting the config option:\n```\nCONFIG += staticlib\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing the library",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "----------------------\nTo use the library with MATLAB or the included examples, you need to make sure the EnsightLib library can be found.  For this, you can either build the library as described above and copy it to a location in the global library search path, or use it from a local directory by specifying the `LD_LIBRARY_PATH` environment variable (Linux systems). For example, if the path to your compiled library is `/home/USER/Ensight4Matlab/ensight_lib/lib/libEnsightLib.so`, you would set the following:\n```bash\n> export LD_LIBRARY_PATH=/home/USER/Ensight4Matlab/ensight_lib/lib/:${LD_LIBRARY_PATH}\n```\nYou can add this line to your `.bashrc` file to run it automatically.\n\nIf you don't install the library and also don't add set the appropriate `LD_LIBRARY_PATH`, the system won't be able to find the library, resulting in an error message similar to:\n\n```bash\nuser:~/Ensight4Matlab/ensight_lib/examples/ensight_viewer> ./ensight_viewer\n./ensight_viewer: error while loading shared libraries:\nlibEnsightLib.so.1: cannot open shared object file: No such file or directory\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Building the MATLAB interface",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "-----------------------------\nTo build the MATLAB interface, you need to make sure MATLAB can find the EnsightLib as described above, i.e. copy it to a global library location or set the `LD_LIBRARY_PATH` environment variable.\nThis needs to be set before you start MATLAB.\n\nBuilding the MATLAB interface is aided by two scripts: `SETUP.m` and `runmex.m`. In MATLAB, navigate to the `EnsightMatlab` directory containing these scripts, then run `SETUP` first followed by `runmex`.\n\nThe SETUP script will ask you to specify several include and library paths. These paths refer to:\n  * QT_INCLUDE_PATH: The include files for Qt, e.g. `/usr/include`\n  * QT_LIB_PATH: The Qt libraries, e.g. `/usr/lib64`\n  * EIGEN_PATH: The Eigen library. Same as used in your EnsightLibConfig.pri\n  * ENSIGHT_INCLUDE_PATH: The includes for the EnsightLib library, e.g. `../ensight_lib/include`\n  * ENSIGHT_LIB_PATH: The path to your compiled EnsightLib library, same as specified in `LD_LIBRARY_PATH` above\n\nOnce you have specified these paths, call `runmex` to start the MEX compiler. If everything works, you get the message\n```\nMEX completed successfully.\n```\nYou should also add the `EnsightMatlab` directory to your [MATLAB search path](https://www.mathworks.com/help/matlab/matlab_env/add-remove-or-reorder-folders-on-the-search-path.html) to ensure MATLAB can find it irrespective of the current working directoy. Now run the examples to test the installation.\n"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ITWM-TVFS/Ensight4Matlab/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "c-plus-plus, cfd, ensight, matlab, matlab-wrapper"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2016, 2017 Fraunhofer ITWM\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "=======\nThis package is copyright &copy; Fraunhofer ITWM and licensed under the MIT License. For details see [LICENSE](LICENSE).\n\nThe MATLAB wrapper uses the third party file \"[class_handle.hpp](EnsightMatlab/mexfiles/class_handle.hpp)\", which is copyright &copy; 2012, Oliver Woodford, and licensed under the 2-Clause BSD [License](EnsightMatlab/mexfiles/LICENSE.txt).\n\nThe GUI viewer example uses small parts of code from [OpenMesh](https://www.openmesh.org) for the [visualization widget](ensight_lib/examples/ensight_viewer/glwidget.h), covered under the [LGPL](ensight_lib/examples/ensight_viewer/lgpl-3.0.md). This affects the example application only.\n\nMATLAB is a registered trademark of The MathWorks, Inc. (see www.mathworks.com/trademarks). Ensight is a trademark of Computational Engineering International, Inc.\n\n\nThis package is an independent project and in no way affiliated with The MathWorks, Inc. or Computational Engineering International, Inc. All trademarks are property of their respective owners.\n"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Ensight4Matlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ITWM-TVFS"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "GLSL",
        "size": 1584138,
        "type": "Programming_language",
        "value": "GLSL"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 399986,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 74986,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "QMake",
        "size": 5268,
        "type": "Programming_language",
        "value": "QMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 767,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "schmeisser",
          "type": "User"
        },
        "date_created": "2018-08-07T11:40:48Z",
        "date_published": "2019-02-25T15:26:04Z",
        "description": "Binary release for Windows: contains a pre-compiled binary of the Matlab library for Windows, using Matlab 2018a.\r\n\r\nPlease note that this is not as thoroughly tested as the Linux variant. If you run into any problems, please build from source instead.",
        "html_url": "https://github.com/ITWM-TVFS/Ensight4Matlab/releases/tag/v1.0.0_win",
        "name": "Binary release for Windows (x64, Matlab2018a)",
        "release_id": 15757950,
        "tag": "v1.0.0_win",
        "tarball_url": "https://api.github.com/repos/ITWM-TVFS/Ensight4Matlab/tarball/v1.0.0_win",
        "type": "Release",
        "url": "https://api.github.com/repos/ITWM-TVFS/Ensight4Matlab/releases/15757950",
        "value": "https://api.github.com/repos/ITWM-TVFS/Ensight4Matlab/releases/15757950",
        "zipball_url": "https://api.github.com/repos/ITWM-TVFS/Ensight4Matlab/zipball/v1.0.0_win"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "schmeisser",
          "type": "User"
        },
        "date_created": "2017-12-07T14:12:36Z",
        "date_published": "2017-12-07T14:18:16Z",
        "description": "This is the first public release of Ensight4Matlab.",
        "html_url": "https://github.com/ITWM-TVFS/Ensight4Matlab/releases/tag/v1.0.0",
        "name": "Initial release of Ensight4Matlab",
        "release_id": 8813387,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/ITWM-TVFS/Ensight4Matlab/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ITWM-TVFS/Ensight4Matlab/releases/8813387",
        "value": "https://api.github.com/repos/ITWM-TVFS/Ensight4Matlab/releases/8813387",
        "zipball_url": "https://api.github.com/repos/ITWM-TVFS/Ensight4Matlab/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "------------\n\nThe C++ library has dependencies on the following third party libraries:\n  * Eigen (version >= 3.2): A fast, header-only library for linear algebra, available at http://eigen.tuxfamily.org/. It should also be directly available from your distribution as package `eigen3`.\n  * Qt, either version 4 or 5.\n\n  For use with MATLAB, Qt 4 is recommended. (see below)\n  * OpenGL is needed for the [example application](#c-usage).\n\nThe MATLAB wrapper depends on a compiled version of the C++ library and needs the MEX compiler to compile the MATLAB/C++ interface.\n\nWarning:\nMATLAB ships with its own Qt 5 library which may be a different minor version than the one installed on your system. This may lead to version conflicts if you compile the C++ Ensight library with a Qt 5 version higher than the one provided by MATLAB. In this case, we recommend you compile with Qt 4 to avoid conflicts. Additionally, we have experienced stability problems with the R2015a/b releases of MATLAB, so we recommend against using Ensight4Matlab with these releases.\n"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running tests",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "-------------\nOnce you've set up your system to find the library, you can run some tests contained in directory `ensight_lib/test`. They are automatically build along the library if you built `EnsightLibAndTests.pro`, otherwise you can individually compile the same way with `qmake-qt4 EnsightLibTest.pro` and `make` as above. This will create a binary `EnsightLibTest` in the corresponding directory `test`. Before you run the tests, you also need to have unpacked the example data in `data/jet.tar.bz2`:\n```bash\n> cd data\n> tar -xf jet.tar.bz2\n```\n\nYou can also run the small [examples](#c-usage) located in `ensight_lib/examples` and compare the output produced by the `write_file` example to the reference output (`ensight_lib/examples/data`).\n\n"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "documentation",
    "faq",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2025-09-19 03:17:12",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting support",
        "type": "Text_excerpt",
        "value": "===============\nFor now, you can ask for help by [mail](mailto:andre{dot}schmeisser{at}itwm{dot}fraunhofer.de). A chat forum for support / FAQs could be set up if the need arises.\n"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "=====\n\nThis package comes with a full [C++ application example](#c-usage) and two [MATLAB scripts](#matlab-usage) to demonstrate the usage of the library. For further details you can read the Doxygen documentation for the C++ library. The Matlab interface provides a list of available methods by typing `methods EnsightLib`, and help on the individual methods with `help EnsightLib.METHOD`, where _METHOD_ is any of the listed methods.\n"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Overview",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "--------\nA data set in EnSight Gold format describes 3D data. This data can either be _static_ or _transient_, i.e. time-varying. The data consists of mesh geometry, represented as an unstructured grid, and optionally variables defined over the domain of the mesh, as well as constants. The mesh's domain is partitioned into one _parts_. Variables can either be scalar or vector valued. For instance, the example data set `data/jet.encas` contains the variables _temperature_ and _velocity_, meaning each vertex of the mesh has a scalar temperature value and a 3D velocity vector.\n\nThe mesh is represented as follows: For each time step, the mesh consists of\n * A list of 3D vertex coordinates\n * A list of parts. In turn, each part contains lists of cells of different types, e.g. triangles, quadrangles, tetrahedra etc. Each cell is represented by indices into the coordinate list. For a complete list of available cell types see Figure 9-1 on page 9-6 of the [Ensight User Manual](http://www3.ensight.com/EnSight10_Docs/UserManual.pdf#page=632).\n\nNote: The EnSight Gold specification also allows structured grids. However, this functionality is not yet implemented.\n\nOn the filesystem, a data set consists of several files:\n  * A _case_ file: This is the main file of the data set and describes its structure. It also contains the names of additional files. Suffix is usually `.case` or `.encas`\n  * One or more geometry files: Contains data of the mesh (vertex coordinates and connectivity) for each part and time step. Suffix is usually `.geo` or `.geom`\n  * Optionally: one or more files for each variable\n"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "C++ Usage",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "---------\n\nExamples for using the library with C++ are located in `ensight_lib/examples`. The directory contains several short command line examples as well as a GUI demo application. The command line examples demonstrate how to\n * read and print information about a data set\n * interpolate a variable in a data set\n * create a data set with one part and one variable, and write the data to a file.\n \nIn addition to running the [tests](#running-tests), you can also verify that the output produced by the `write_file` example is identical to the reference data by using the `diff` command. For a screenshot how the resulting file looks when loading in the viewer application, see Figure 3 below.\n\nThe directory `ensight_lib/examples/ensight_viewer` contains a demo application for the C++ library. This application is a simple OpenGL-based viewer for EnSight files. It is build using the qmake build process the same way as the EnsightLib library, see build instructions [build instructions above](#building-the-ensightlib-c-library). To run the resulting application, you also need to [install the library as above.](#installing-the-library)\n\nIf you have not done already, unpack the example data in `data/jet.tar.bz2`\n```bash\n> cd data\n> tar -xf jet.tar.bz2\n```\nand load it in the viewer demo. You can see that the data consists of a several named parts, containing different types of cells (quadrangles, hexahedra), and several variables such as \"temperature\" and \"velocity\".\n\n![Screenshot of Ensight Viewer Demo](images/ensightviewer_scr1.png)\n<div align=center>Figure 1: The Ensight Viewer demo shows the structure of the example data file (left) and a visualization of the \"velocity\" variable of all parts selected as \"active\" (right).</div>\n<div align=center>\n<img src=\"images/ensightviewer_temperature_wire.png\"><br>\nFigure 2: A zoomed view of the \"temperature\" variable in wireframe mode.</div>\n\nIn the main window (left) you can select a representation mode, and either coloring according to a variable or solid color. For data sets consisting of multiple time steps, you can also select which time step to display. The provided example data set is static, i.e. contains only a single time step.\n\nThe displayed table details the structure of the data set. For each part, there are two lines, one for the currently selected time step and one for the data in all time steps. The different columns describe the bounding box of the part, whether it is displayed in the viewer (\"active\"), how many vertices it contains, as well as which types of cells it contains. Also, there is a colum for each variable containing the min and max values of the variable in this part.\n\nYou can also use the viewer to load the result of the `write_file` example, which produces a simple rectangular grid. The result should look like this:\n\n<div align=center>\n<img src=\"images/write_example_result_in_viewer.png\"><br>\nFigure 3: Output of write_file example loaded in the Ensight Viewer Demo.</div>\n\n-------\n\nAll code dealing with the Ensight Library is in `mainwidget.cpp`, the rest is just visualization and boilerplate.\nBasic usage is as follows:\n\nA complete data set in Ensight format is represented by an Object of class `EnsightObj`. You can create a new (empty) object by using the default constructor, or load an existing file using:\n```c++\nstd::string fileName = \"data/jet.encas\";\nauto ensObject = EnsightLib::readEnsight(fileName);\n```\nSimiliarly, you can then use\n```c++\nbool writeBinaryMode = true;\nint timestepsToWrite = -1; // write all timesteps\nEnsightLib::writeEnsight(ensObject, fileName, writeBinaryMode, timestepsToWrite);\n```\nto save the data to disk. Here, you can specify two additional parameters:\n  * the parameter `writeBinaryMode` specifies whether the file is written as Ensight Binary format or as Ensight Ascii format.\n  * for data sets containing multiple time steps, the `timestepsToWrite` parameter lets you save only a certain timestep, whereas passing -1 writes the complete data set. This is useful if your program generates data for time steps sequentially and you want to save only the new data as it is generated.\n\nAn object of class `EnsightObj` then provides access to the complete structure of the data set:\n   * query the number of time steps (with method `getNumberOfTimesteps`), parts (`getNumberOfParts`), variables (`getNumberOfVariables`), and constants (`getNumberOfConstants`)\n   * access a part for a given time step: `getPart` returns a pointer of type `EnsightPart`\n     * `EnsightPart` gives access to the vertex coordinates, cell indices, and variable values of a part with `getVertices`, `getCells`, and `getVariables`, respectively\n   * access values of constants with `getConstant`\n   *  interpolate variable values for 3D point positions with `interpolate` (see [below](#point-location-and-variable-interpolation))\n\nTo change the data represented by the EnsightObj, you first have to call `beginEdit` to enter _edit mode_. You can then create new time steps, parts, variables, etc. and set vertex coordinates, cell indices and variable values. Once you are finished, call `endEdit` to leave edit mode. This will then run a few checks to test if the data is consistent and fail if any inconsistencies are found.\n   "
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "MATLAB Usage",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "------------\n\nOnce you have installed the Matlab interface and added it to your search path, you can access it by using the class `EnsightLib`. Constructing an object of this class without any parameters creates an empty data set:\n```\n>> newData = EnsightLib;\n```\nTo load an existing file, pass the file name as argument:\n```\n>> jet = EnsightLib('data/jet.encas')\n\njet = \n\n  EnsightLib with properties:\n\n              timeSteps: 0\n               editMode: 0\n        EnsightPartList: {13\u00d72 cell}\n      EnsightSubdivTree: [1\u00d71 struct]\n    EnsightVariableList: {6\u00d73 cell}\n              Constants: {0\u00d72 cell}\n```\nThe command `methods EnsightLib` gives an overview of available methods. Use `help` to get more information on individual methods. The directory `EnsightMatlab/examples` contains example files.\nThe scripts `example1.m` and `example2.m` show how to:\n - Create a new object\n - Create parts\n - Add vertices, cells, and variables\n - Save the resulting object\n - Use `search` to query a point and `interpolateVariable` for interpolation (see below).\n\nThe script `plot_jet.m` shows how to plot the example data set, either by directly using the data at the mesh's vertex positions, or by interpolating data over a regular grid.\nFinally, the script `extract_jet_2d_boundary_quads.m` reads the example data set, extracts a 2D slice by discarding all volumetric data, and then saves this slice as a new data set.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Point location and variable interpolation",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "-----------------------------------------\nTwo common tasks are, for a given point **x**, to locate which cell of the mesh contains **x** or to interpolate variable values given at the cell vertices to a value at **x**. While not directly related to the Ensight format, this package provides this functionality for convenience.\n\nTo achieve fast cell lookup, the cells of the mesh can be sorted into a spatial subdivision data structure. The implementation either uses an Octree for 3D data or a Quadtree for 2D data in the Z=0 plane. Given a point **x**, we can then use this subdivision to find the cell containing this point.\n\nFor convenience, the Matlab interface automatically creates the octree when needed. Using the C++ side, the octree needs to be explicitly created before it can be used to query point locations. For example:\n```c++\nEnsightObj* ensObj = ...\nint maxDepth = 7;            // tree is at most 7 levels deep\nint maxCellsPerLevel = 50;   // For levels < 7, subdivide after 50 cells\nQStringList partsToExclude;  // empty list, don't exclude any parts\nensObject->createSubdivTree(maxDepth, maxCellsPerLevel, partsToExclude);\n```\nCell lookup can then be achieved by either\n```c++\nVec3 x(0, 0, 0); // example coordinates to query\nauto* cell = ensObj->interpolate(x);\n```\nor alternatively\n```c++\nEnsightBarycentricCoordinates baryCoords;  // output parameter for point coords\nauto* cell = ensObj->interpolate(x, baryCoords);\n```\nThe latter call also computes the [barycentric coordinates](https://en.wikipedia.org/wiki/Barycentric_coordinate_system) of the query point with respect to the located cell. \n\nThe barycentric coordinates can be used for interpolation of variable values: Variables defined over a cell are given by their values at cell vertices. By computing a weighted sum of vertex values, we get a linear interpolation. That is, given values _v_<sub>_i_</sub> at vertex _i_, and corresponding coordinates _b_<sub>_i_</sub>, we get the interpolated value _w_ as the scalar product _w_ = \\<_v_, _b_\\>.\n\nThe Matlab interface comes with a convenience method that does all of this in one call: It creates the spatial subdivision data structure (if it doesn't already exist), does cell lookup, and interpolates a given variable using the resulting barycentric coordinates for a query point:\n```\n>> jet = EnsightLib('data/jet.encas');\n>> t = jet.interpolateVariable([0, 0, 0]', 'temperature')\n\nt =\n\n  301.5740\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting support",
        "type": "Text_excerpt",
        "value": "===============\nFor now, you can ask for help by [mail](mailto:andre{dot}schmeisser{at}itwm{dot}fraunhofer.de). A chat forum for support / FAQs could be set up if the need arises.\n"
      },
      "source": "https://raw.githubusercontent.com/ITWM-TVFS/Ensight4Matlab/master/README.md",
      "technique": "header_analysis"
    }
  ]
}