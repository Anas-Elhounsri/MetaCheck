{
  "authors": [
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "Agent",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/setup.py",
      "technique": "code_parser"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing SHARPy",
        "parent_header": [
          "Simulation of High Aspect Ratio aeroplanes in Python [SHARPy]"
        ],
        "type": "Text_excerpt",
        "value": "SHARPy has been published in the Journal of Open Source Software (JOSS) and the relevant paper can be found\n[here](https://joss.theoj.org/papers/10.21105/joss.01885).\n\nIf you are using SHARPy for your work, please remember to cite it using the paper in JOSS as:\n\n`del Carre et al., (2019). SHARPy: A dynamic aeroelastic simulation toolbox for very flexible aircraft and wind\nturbines. Journal of Open Source Software, 4(44), 1885, https://doi.org/10.21105/joss.01885`\n\nThe bibtex entry for this citation is:\n\n```\n@Article{delCarre2019,\ndoi = {10.21105/joss.01885},\nurl = {https://doi.org/10.21105/joss.01885},\nyear = {2019},\nmonth = dec,\npublisher = {The Open Journal},\nvolume = {4},\nnumber = {44},\npages = {1885},\nauthor = {Alfonso del Carre and Arturo Mu{\\~{n}}oz-Sim\\'on and Norberto Goizueta and Rafael Palacios},\ntitle = {{SHARPy}: A dynamic aeroelastic simulation toolbox for very flexible aircraft and wind turbines},\njournal = {Journal of Open Source Software}\n}\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Alfonso del Carre and Arturo Mu{\\~{n}}oz-Sim\\'on and Norberto Goizueta and Rafael Palacios",
        "doi": "10.21105/joss.01885",
        "format": "bibtex",
        "title": "{SHARPy}: A dynamic aeroelastic simulation toolbox for very flexible aircraft and wind turbines",
        "type": "Text_excerpt",
        "url": "https://doi.org/10.21105/joss.01885",
        "value": "@article{delCarre2019,\n    journal = {Journal of Open Source Software},\n    title = {{SHARPy}: A dynamic aeroelastic simulation toolbox for very flexible aircraft and wind turbines},\n    author = {Alfonso del Carre and Arturo Mu{\\~{n}}oz-Sim\\'on and Norberto Goizueta and Rafael Palacios},\n    pages = {1885},\n    number = {44},\n    volume = {4},\n    publisher = {The Open Journal},\n    month = {December},\n    year = {2019},\n    url = {https://doi.org/10.21105/joss.01885},\n    doi = {10.21105/joss.01885},\n}"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Fijishi-Enterprises/Nonlinear-Aeroelastic"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ImperialCollegeLondon/sharpy"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/imperialcollegelondon/sharpy"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/JOSS/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "docs/source/content/contributing.md"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-15T13:43:06Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2019-11-04"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/JOSS/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_published": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2019-11-04"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/JOSS/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-15T18:11:33Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2019-11-04"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/JOSS/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SHARPy is a nonlinear aeroelastic analysis package developed\n    at the Department of Aeronautics, Imperial College London. It can be used\n    for the structural, aerodynamic and aeroelastic analysis of flexible\n    aircraft, flying wings and wind turbines."
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A dynamic aeroelastic simulation toolbox for very flexible aircraft and wind turbines"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/JOSS/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 0.9740693355130947,
      "result": {
        "original_header": "Simulation of High Aspect Ratio aeroplanes in Python [SHARPy]",
        "type": "Text_excerpt",
        "value": "SHARPy is a nonlinear aeroelastic analysis package originally developed at the Department of Aeronautics, Imperial\nCollege London. The extended version from Fijishi can be used for the structural, aerodynamic and aeroelastic analysis of flexible wings, aircraft and wind turbines. It is shared here under a BSD 3-Clause permissive license.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9405899981336407,
      "result": {
        "original_header": "Physical Models",
        "type": "Text_excerpt",
        "value": "SHARPy is a modular aeroelastic solver that currently uses two specific models for the structural and aerodynamic response of the system. \nFor the structural model, SHARPy employs a geometrically-exact displacement-based composite beam formulation,\naugmented with Lagrange multipliers for additional kinematic constraints.\nThis model has the advantage of providing the solution directly in the physical problem's degrees of freedom, making the \ncoupling with the aerodynamic solver simple and not requiring any post-processing. The 1D beam formulation used limits \nthe analyses that can be done by SHARPy to slender structures, such as high aspect ratio wings. \nThe aerodynamic model utilises the Unsteady Vortex Lattice Method (UVLM). The aerodynamic surfaces are modelled as a thin\nvortex ring lattice with the boundary conditions enforced at the collocation points in the middle of the vortex rings.\nThe Kutta condition is also enforced at the trailing edge. The wake can be simulated by either additional vortex rings\nor by infinitely long horseshoe vortices, which are ideally suited for steady simulations only. \n"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9878935066314027,
      "result": {
        "original_header": "<a href=\"http://ic-sharpy.readthedocs.io/en/latest/content/capabilities.html\">Capabilities</a>",
        "type": "Text_excerpt",
        "value": "The base solver SHARPy is a nonlinear aeroelastic analysis package that can be used on free-flying flexible aircraft,\nwings and wind turbines. In addition, it supports linearisation of these nonlinear systems about\narbitrary conditions and includes various tools such as: model reduction or frequency analysis. \nIn short, SHARPy offers (amongst others) the following solutions to the user:\n* Static aerodynamic, structural and aeroelastic solutions including fuselage effects\n* Finding trim conditions for aeroelastic configurations\n* Nonlinear, dynamic time domain simulations under a large number of conditions such as:\n    + Prescribed trajectories.\n    + Free flight.\n    + Dynamic follower forces.\n    + Control inputs in thrust, control surface deflection...\n    + Arbitrary time-domain gusts, including non span-constant ones.\n    + Full 3D turbulent fields.\n* Multibody dynamics with hinges, articulations and prescribed nodal motions:\n    + Applicable to wind turbines.\n    + Hinged aircraft.\n    + Catapult assisted takeoffs.\n* Linear analysis:\n    + Linearisation around a nonlinear equilibrium.\n    + Frequency response analysis.\n    + Asymptotic stability analysis.\n* Model order reduction:\n    + Krylov-subspace reduction methods.\n    + Several balancing reduction methods.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8583349065952077,
      "result": {
        "original_header": "Continuous Integration Status",
        "type": "Text_excerpt",
        "value": "SHARPy uses Continuous Integration to control the integrity of its code. The status in the release and develop branches\nis: \n"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "parent_header": [
          "Simulation of High Aspect Ratio aeroplanes in Python [SHARPy]"
        ],
        "type": "Text_excerpt",
        "value": "The documentation for SHARPy can be found [here](http://ic-sharpy.readthedocs.io).\n"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "http://ic-sharpy.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/source/content/example_notebooks/linear_goland_flutter.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/source/content/example_notebooks/linear_goland_flutter.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/source/content/example_notebooks/cantilever_wing.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/source/content/example_notebooks/cantilever_wing.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/source/content/example_notebooks/wind_turbine.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/source/content/example_notebooks/wind_turbine.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/source/content/example_notebooks/nonlinear_t-tail_HALE.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/source/content/example_notebooks/nonlinear_t-tail_HALE.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/source/content/example_notebooks/linear_horten.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/source/content/example_notebooks/linear_horten.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/source/content/example_notebooks/cantilever/static_cantilever.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/source/content/example_notebooks/cantilever/static_cantilever.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/source/content/example_notebooks/UDP_control/tutorial_udp_control.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/source/content/example_notebooks/UDP_control/tutorial_udp_control.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Fijishi-Enterprises/Nonlinear-Aeroelastic/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Fijishi-Enterprises/Nonlinear-Aeroelastic"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Simulation of High Aspect Ratio aeroplanes in Python [SHARPy]"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "setup.py",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/setup.py"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/setup.py",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/JOSS/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# SHARPy v2.0 Installation Guide\n__Last revision 9 October 2023__\n\nThe following step by step tutorial will guide you through the installation process of SHARPy. This is the updated process valid from v2.0.\n\n## Requirements\n\n__Operating System Requirements__\n\nSHARPy is being developed and tested on the following operating systems:\n* CentOS 7 and CentOS 8\n* Ubuntu 18.04 LTS\n* Debian 10\n* MacOS Mojave and Catalina (Intel)\n* MacOS Sonoma (Apple Silicon M2)\n\nWindows users can also run it by first installing the Windows Subsystem for Linux (https://learn.microsoft.com/en-us/windows/wsl/install) and a XServer such as GWSL, which can be installed through the Microsoft Store. SHARPy is also available to the vast majority of operating systems that are supported by Docker\n\n__Required Distributions__\n\n* Anaconda Python 3.10\n* GCC 6.0 or higher (recommended). C++ and Fortran.\n\n__Recommended Software__\n\nYou may find the applications below useful, we recommend you use them but cannot provide any direct support.\n\n* [HDFView](https://portal.hdfgroup.org/display/HDFVIEW/HDFView) to read and view `.h5` files. HDF5 is the SHARPy\ninput file format.\n* [Paraview](https://www.paraview.org/) to visualise SHARPy's output.\n\n\nSHARPy can be installed from the source code available on GitHub or you can get it packed in a Docker container.\nIf what you want is to give it a go and run some static or simple dynamic cases (and are familiar with Docker),\nwe recommend the [Docker route](#using-sharpy-from-a-docker-container). If you want to check the code, modify it and\ncompile the libraries with custom flags, build it from source (recommended).\n\n## Building SHARPy from source (release or development builds)\n\nSHARPy can be built from source so that you can get the latest release or (stable) development build.\n\nSHARPy depends on two external libraries, [xbeam](http://github.com/imperialcollegelondon/xbeam) and\n[UVLM](http://github.com/imperialcollegelondon/UVLM). These are included as submodules to SHARPy and therefore\nonce you initialise SHARPy you will also automatically clone the relevant versions of each library.\n\n### Set up the folder structure\n\n1. Clone `sharpy` in your desired location, if you agree with the license in `license.txt`.\n    ```bash\n    git clone --recursive http://github.com/ImperialCollegeLondon/sharpy\n    ```\n    The `--recursive` flag will also initialise and update the submodules SHARPy depends on,\n    [xbeam](http://github.com/imperialcollegelondon/xbeam) and [UVLM](http://github.com/imperialcollegelondon/UVLM).\n\n2. We will now set up the SHARPy environment that will install other required distributions.\n\n### Setting up the Python Environment\n\nSHARPy uses the Anaconda package manager to provide the necessary Python packages.\nThese are specified in an Anaconda environment that shall be activated prior to compiling the xbeam and UVLM libraries\nor running any SHARPy cases.\n\n1. If you still do not have it in your system, install the [Anaconda](https://conda.io/docs/) Python 3 distribution.\n\n2. Check that your Python version is at least 3.10:\n    ```bash\n    python --version\n    ```\n3. If python 3.10 is needed, use:\n\n    ```bash\n    conda install python=3.10\n    ```\n   \n4. Create the conda environment that SHARPy will use:\n\n    ```bash\n    cd sharpy/utils\n    conda env create -f environment.yml\n    cd ../..\n    ```\n    This should take approximately 15 minutes to complete (Tested on Ubuntu 22.04.1). \n\n5. Activate the `sharpy` conda environment:\n    ```bash\n    conda activate sharpy\n    ```\n    you need to do this before you compile the `xbeam` and `uvlm` libraries, as\n    some dependencies are included in the conda environment. You should now see ```(sharpy)``` on your command line. \n\n\n### Quick install\nThe quick install is geared towards getting the release build of SHARPy running as quickly and simply as possible. If\nyou would like to install a develop build or modify the compilation settings of the libraries skip to the next section.\n1. Move into the cloned repository:\n    ```bash\n    cd sharpy\n    ```\n\n2. Ensure that the SHARPy environment is active in the session. Your terminal prompt line should begin with:\n    ```bash\n    (sharpy) [usr@host] $\n    ```\n\n    If this is not the case, activate the environment otherwise xbeam and UVLM will not compile.\n    ```bash\n    conda activate sharpy\n    ```\n\n3. Create a directory `build` that will be used during CMake's building process and `cd` into it.\n   Ensure it is located in the main ./sharpy folder otherwise the following steps won't work:\n    ```bash\n    mkdir build\n    cd build\n    ```\n\n4. Prepare UVLM and xbeam for compilation using `gfortran` and `g++` in their release builds running. If you'd like to\n   change compilers see the Custom Installation.\n    ```bash\n    cmake ..\n    ```\n\n5. Compile the libraries.\n    ```bash\n    make install -j 4\n    ```\n    where the number after the `-j` flag will specify how many cores to use during installation.\n    This should take approximately 5 minutes (Tested on Ubuntu 22.04.1).\n\n7. Finally, leave the build directory and install SHARPy:\n    ```bash\n    cd ..\n    pip install .\n    ```\n\n8. You can check the version of SHARPy you are running with:\n    ```bash\n    sharpy --version\n    ```\n\n__You are ready to run SHARPy__. Continue reading the [Running SHARPy](#running-sharpy) section.\n\n### Custom installation\n\nThese steps will show you how to compile the xbeam and UVLM libraries such that you can modify the compilation settings\nto your taste.\n\n1. If you want to use SHARPy's latest release, skip this step. If you would like to use the latest development work,\n   you will need to checkout the `develop` branch. For more info on how we structure our development and what branches\n   are used for what kind of features have a look at the [Contributing](contributing.html) page.\n    ```bash\n    git checkout develop\n    git submodule update --recursive\n    ```\n    This command will check out the `develop` branch and set it to track the remote origin. It will also set the submodules (xbeam and UVLM) to the right commit.\n\n2. Create the conda environment that SHARPy will use:\n    ```bash\n    cd sharpy/utils\n    conda env create -f environment.yml\n    cd ../..\n    ```\n\n3. Activate the `sharpy` conda environment:\n    ```bash\n    conda activate sharpy\n    ```\n\n4. Create a directory `build` that will be used during CMake's building process and `cd` into it:\n    ```bash\n    mkdir build\n    cd build\n    ```\n\n5. Run CMake with custom flags:\n    1. Choose your compilers for Fortran `FC` and C++ `CXX`, for instance:\n        ```bash\n        FC=gfortran CXX=g++ cmake ..\n        ```\n        If you'd like to use the Intel compilers you can set them using:\n        ```bash\n        FC=ifort CXX=icpc cmake ..\n        ```\n    2. Alternatively, you can build the libraries in debug mode with the following flag for cmake:\n        ```bash\n        -DCMAKE_BUILD_TYPE=Debug\n        ```\n\n6. Compile the libraries and parallelise as you prefer.\n    ```bash\n    make install -j 4\n    ```\n\n7. Finally, leave the build directory and install SHARPy.\n    ```bash\n    cd ..\n    pip install .\n    ```\n    If you want to install it in development mode (the source files will stay\n    where the are so you can modify them), you can make an editable install:\n    ```\n    pip install -e .\n    ```\n    You can obtain further information on editable installs [here](https://pip.pypa.io/en/stable/cli/pip_install/#editable-installs)\n\n8. This concludes the installation! Continue reading the [Running SHARPy](#running-sharpy) section.\n\n## Using SHARPy from a Docker container\n\nDocker containers are similar to lightweight virtual machines. The SHARPy container\ndistributed through [Docker Hub](https://hub.docker.com/) is a CentOS 8\nmachine with the libraries compiled with `gfortran` and `g++` and an\nAnaconda Python distribution.\n\nMake sure your machine has Docker working. The instructions are here:\n[link](https://docs.docker.com/v17.09/engine/installation/).\n\nYou might want to run a test in your terminal:\n```\ndocker pull hello-world\ndocker run hello-world\n```\nIf this works, you're good to go!\n\nFirst, obtain the SHARPy docker container:\n```\ndocker pull ghcr.io/imperialcollegelondon/sharpy:main\n```\nYou can obtain other versions as well, check those available in the [containers](https://github.com/ImperialCollegeLondon/sharpy/pkgs/container/sharpy) page.\n\nThis will donwload a Docker image of SHARPy to your machine, from where you can create and run Docker containers. To create and run a container from the downloaded image use:\n\n```\ndocker run --name sharpy -it -p 8080:8080 ghcr.io/imperialcollegelondon/sharpy:main\n```\n\nA few details about the above command, although if in doubt please check the Docker documentation. The `--name` argument gives a name to the container. Note you can create multiple containers from a single image. \n\nThe `-it` is an important command as it runs the container in interactive mode with a terminal attached. Thus you can use it an navigate it. Otherwise the container will finish as soon as it is created. \n\nThe `-p 8080:8080` argument connects the container to your machine through port `8080` (it could be any other) which may be useful for some applications. For instance, running SHARPy as hardware-in-the-loop through UDP.\n\nOnce you run it, you should see a welcome dialog such as:\n```\n>>>> docker run --name sharpy -it -p 8080:8080 ghcr.io/imperialcollegelondon/sharpy:main\nSHARPy added to PATH from the directory: /sharpy_dir/bin\n=======================================================================\nWelcome to the Docker image of SHARPy\nSHARPy is located in /sharpy_dir/ and the\nenvironment is already set up!\nCopyright Imperial College London. Released under BSD 3-Clause license.\n=======================================================================\nSHARPy>\n```\nYou are now good to go.\n\nYou can check the version of SHARPy you are running with\n```\nsharpy --version\n```\n\nIt is important to note that a docker container runs as an independent\noperating system with no access to your hard drive. If you want to copy your own\nfiles, run the container and from another terminal run:\n```\ndocker cp my_file.txt sharpy:/my_file.txt     # copy from host to container\ndocker cp sharpy:/my_file.txt my_file.txt     # copy from container to host\n```\nThe `sharpy:` part is the `--name` argument you wrote in the `docker run` command.\n\nYou can run the test suite once inside the container as:\n```\ncd sharpy_dir\npython -m unittest\n```\n\n**Enjoy!**\n\n\n## Running SHARPy\n\nIn order to run SHARPy, you need to load the conda environment. Therefore, __before you run any SHARPy case__:\n\n1. Activate the SHARPy conda environment\n    ```bash\n    conda activate sharpy\n    ```\n\nYou are now ready to run SHARPy cases from the terminal.\n\n### Automated tests\n\nSHARPy uses unittests to verify the integrity of the code.\n\nThese tests can be run from the `./sharpy` directory.\n```bash\npython -m unittest\n```\nThe tests will run and you should see a success message. If you don't... check the following options:\n* Check you are running the latest version. Running the following from the root directory should update to the\nlatest release version:\n    - `git pull`\n    - `git submodule update --init --recursive`\n* If the tests don't run, make sure you have followed correctly the instructions and that you managed to compile xbeam\nand UVLM.\n* If some tests fail, i.e. you get a message after the tests run saying that certain tests did not pass, please open\nan [issue](http://www.github.com/imperialcollegelondon/sharpy/issues) with the following information:\n    - Operating system\n    - Whether you did a Custom/quick install\n    - UVLM and xbeam compiler of choice\n    - A log of the tests that failed\n\n### The SHARPy Case Structure and input files\n\n__Setting up a SHARPy case__\n\nSHARPy cases are usually structured in the following way:\n\n1. A `generate_case.py` file: contains the setup of the problem like geometry, flight conditions etc.\nThis script creates the output files that will then be used by SHARPy, namely:\n    * The [structural](./casefiles.html#fem-file) `.fem.h5` file.\n    * The [aerodynamic](./casefiles.html#aerodynamics-file) `.aero.h5` file.\n    * [Simulation information](./casefiles.html#solver-configuration-file) and settings `.sharpy` file.\n    * The dynamic forces file `.dyn.h5` (when required).\n    * The linear input files `.lininput.h5` (when required).\n    * The ROM settings file `.rom.h5` (when required).\n\n    See the [chapter](./casefiles.html) on the case files for a detailed description on the contents of each one.\n    Data is exchanged in binary format by means of `.h5` files that make the transmission efficient between the different\n    languages of the required libraries. To view these `.h5` files, a viewer like [HDF5](https://portal.hdfgroup.org/display/support) is recommended.\n\n2. The `h5` files contain data of the FEM, aerodynamics, dynamic conditions. They are later read by SHARPy.\n\n3. The `.sharpy` file contains the settings for SHARPy and is the file that is parsed to SHARPy.\n\n__To run a SHARPy case__\n\nSHARPy cases are therefore usually ran in the following way:\n\n1. Create a `generate_case.py` file following the provided templates.\n\n2. Run it to produce the `.h5` files and the `.sharpy` files.\n    ```bash\n    (sharpy_env) python generate_case.py\n    ```\n\n3. Run SHARPy (ensure the environment is activated).\n    ```bash\n    (sharpy_env) sharpy case.sharpy\n    ```\n\n#### Output\n\nBy default, the output is located in the `output` folder.\n\nThe contents of the folder will typically be a `beam` and `aero` folders, which contain the output data that can then be\nloaded in Paraview. These are the `.vtu` format files that can be used with [Paraview](https://www.paraview.org/).\n\n\n### Running (and modifiying) a test case\n\n1.  This command generates the required files for running a static, clamped beam case that is used as part of code\nverification:\n    ```sh\n    cd ../sharpy\n    python ./tests/xbeam/geradin/generate_geradin.py\n    ```\n\nNow you should see a success message, and if you check the\n`./tests/xbeam/geradin/` folder, you should see two new files:\n+ geradin_cardona.sharpy\n+ geradin_cardona.fem.h5\n\nTry to open the `sharpy` file with a plain text editor and have a quick look. The `sharpy` file is\nthe main settings file. We'll get deeper into this later.\n\nIf you try to open the `fem.h5` file, you'll get an error or something meaningless. This is because the structural data\nis stored in [HDF5](https://support.hdfgroup.org/HDF5/) format, which is compressed binary.\n\n5. Run it (part 1)\n\n    The `sharpy` call is:\n    ```bash\n    # Make sure that the sharpy_env conda environment is active\n    sharpy <path to solver file>\n    ```\n\n6. Results (part 1)\n\n    Since this is a test case, there is no output directly to screen.\n\n    We will therefore change this setting first.\n    In the `generate_geradin.py` file, look for the `SHARPy` setting `write_screen` and set it to `on`. This will\n    output the progress of the execution to the terminal.\n\n    We would also like to create a Paraview file to view the beam deformation. Append the post-processor `BeamPlot` to\n    the end of the `SHARPy` setting `flow`, which is a list. This will run the post-processor and plot the beam in Paraview format with the settings specified in\n    the `generate_geradin.py` file under `config['BeamPlot]`.\n\n7. Run (part 2)\n\n    Now that we have made these modifications, run again the generation script:\n    ```sh\n    python ./tests/xbeam/geradin/generate_geradin.py\n    ```\n\n    Check the solver file `geradin.sharpy` and look for the settings we just changed. Make sure they read what we wanted.\n\n\n    You are now ready to run the case again:\n    ```bash\n    # Make sure that the sharpy_env conda environment is active\n    sharpy <path to solver file>\n    ```\n\n8. Post-processing\n\n    After a successful execution, you should a long display of information in the terminal as the case is being\n    executed.\n\n    The deformed beam will have been written in a `.vtu` file and will be located in the `output/` folder (or where\n    you specified in the settings) which you can open using Paraview.\n\n    In the `output` directory you will also note a folder named `WriteVariablesTime` which outputs certain variables\n    as a function of time to a `.dat` file. In this case, the beam tip position deflection and rotation is written.\n    Check the values of those files and look for the following result:\n    ```\n\t    Pos_def:\n\t\t      4.403530 0.000000 -2.159692\n\t    Psi_def:\n\t\t      0.000000 0.672006 0.000000\n    ```\n    FYI, the correct solution for this test case by Geradin and Cardona is\n    `Delta R_3 = -2.159 m` and `Psi_2 = 0.6720 rad`.\n\nCongratulations, you've run your first case. You can now check the [Examples](examples.html) section for further cases.\n"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/source/content/installation.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing SHARPy",
        "parent_header": [
          "Simulation of High Aspect Ratio aeroplanes in Python [SHARPy]"
        ],
        "type": "Text_excerpt",
        "value": "For the latest documentation, see the \n[installation docs](https://ic-sharpy.readthedocs.io/en/latest/content/installation.html).\n\nSHARPy can also be obtained from Docker Hub to avoid compilation\nand platform-dependant issues. If you are interested, make sure you check \nthe [SHARPy Docker distribution docs](https://ic-sharpy.readthedocs.io/en/latest/content/installation.html#using-sharpy-from-a-docker-container).\n"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Fijishi-Enterprises/Nonlinear-Aeroelastic/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "nonlinear aeroelastic structural aerodynamic analysis"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": [
          "aeroelasticity",
          "structural dynamics",
          "aerodynamics",
          "solar flight",
          "perpetual flight",
          "wing energy"
        ]
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/JOSS/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "BSD 2-Clause",
        "spdx_id": "BSD-2-Clause",
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2019, Loads Control and Aeroelastics, Imperial College London\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "License",
        "value": "BSD 3-Clause License"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/BSD-3",
        "spdx_id": "BSD-3",
        "type": "License",
        "value": "BSD-3"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/JOSS/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Nonlinear-Aeroelastic"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Fijishi-Enterprises"
      },
      "technique": "GitHub_API"
    }
  ],
  "package_id": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sharpy"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/setup.py",
      "technique": "code_parser"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 3527321,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1949,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1043,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 188,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Python"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/setup.py",
      "technique": "code_parser"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://ic-sharpy.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support"
  ],
  "somef_provenance": {
    "date": "2025-09-19 03:31:21",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "version": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "v1.0.0-rc1"
      },
      "source": "https://raw.githubusercontent.com/Fijishi-Enterprises/Nonlinear-Aeroelastic/main/docs/JOSS/codemeta.json",
      "technique": "code_parser"
    }
  ]
}