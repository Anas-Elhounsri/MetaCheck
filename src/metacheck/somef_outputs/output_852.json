{
  "authors": [
    {
      "confidence": 1,
      "result": {
        "email": "jouni.helske@iki.fi",
        "identifier": "https://orcid.org/0000-0001-7130-793X",
        "type": "String",
        "value": "Jouni Helske"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://orcid.org/0000-0002-8041-7222",
        "type": "String",
        "value": "Matti Vihola"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "datePublished": "2021",
        "format": "bibtex",
        "type": "File_dump",
        "value": "c(\n  bibentry(\n     bibtype = \"Article\",\n     key = \"helske-vihola2021\",\n     title = \"bssm: Bayesian Inference of Non-linear and Non-Gaussian State Space Models in {R}\",\n     author =\" Jouni Helske and Matti Vihola\",\n     year= \"2021\",\n     doi = \"10.32614/RJ-2021-103\",\n     journal = \"R Journal\",\n     url = \"https://doi.org/10.32614/RJ-2021-103\",\n     pages = \"578--589\",\n     volume = \"13\",\n     number = \"2\"\n  ),\n  bibentry(\n    bibtype = \"Article\",\n    author = \"Matti Vihola, Jouni Helske, and Jordan Franks\",\n    title = \"Importance Sampling Type Estimators Based on Approximate Marginal {MCMC}\",\n    journal = \"Scandinavian Journal of Statistics\",\n    doi = \"10.1111/sjos.12492\",\n    url = \"https://onlinelibrary.wiley.com/doi/abs/10.1111/sjos.12492\",\n    year = \"2020\",\n    key = \"vihola-helske-franks\"\n  )\n)\n"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/inst/CITATION",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing the package",
        "parent_header": [
          "bssm"
        ],
        "type": "Text_excerpt",
        "value": "\r\nIf you use the `bssm` package in publications, please cite the\r\ncorresponding R Journal paper:\r\n\r\nJouni Helske and Matti Vihola (2021). \u201cbssm: Bayesian Inference of\r\nNon-linear and Non-Gaussian State Space Models in R.\u201d The R Journal\r\n(2021) 13:2, pages 578-589.\r\n<https://journal.r-project.org/archive/2021/RJ-2021-103/index.html>\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/helske/bssm"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/helske/bssm"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/helske/bssm"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "continuous_integration": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": [
          "https://github.com/helske/bssm/actions",
          "https://app.codecov.io/gh/helske/bssm?branch=master"
        ]
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# CONTRIBUTING #\n\n### Fixing typos\n\nSmall typos or grammatical errors in documentation may be edited directly using\nthe GitHub web interface, so long as the changes are made in the _source_ file.\n\n*  YES: you edit a roxygen comment in a `.R` file below `R/`.\n*  NO: you edit an `.Rd` file below `man/`.\n\n### Prerequisites\n\nBefore you make a substantial pull request, you should always file an issue and\nmake sure someone from the team agrees that it\u2019s a problem. If you\u2019ve found a\nbug, create an associated issue and illustrate the bug with a minimal \n[reprex](https://www.tidyverse.org/help/#reprex).\n\n### Pull request process\n\n*  We recommend that you create a Git branch for each pull request (PR).  \n*  Look at the Github Actions build status before and after making changes.\nThe `README` should contain status badge \"R-CMD-check\" which acts a link to \nGithub Actions.  \n*  We recommend the tidyverse [style guide](http://style.tidyverse.org).\nYou can use the [styler](https://CRAN.R-project.org/package=styler) package to\napply these styles, but please don't restyle code that has nothing to do with \nyour PR.  \n*  We use [roxygen2](https://cran.r-project.org/package=roxygen2).  \n*  We use [testthat](https://cran.r-project.org/package=testthat).\nContributions with test cases included are easier to accept.  \n*  For user-facing changes, add a bullet to the top of `NEWS.md` below the\ncurrent development version header describing the changes made followed by your\nGitHub username, and links to relevant issue(s)/PR(s).\n\n### Thanks for contributing!\n\nThis contributing guide is adapted from the tidyverse contributing guide available at https://raw.githubusercontent.com/r-lib/usethis/master/inst/templates/tidy-contributing.md\n"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/.github/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-03-11T19:36:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2025-07-25T20:59:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Bayesian Inference of State Space Models"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/helske/bssm/main/DESCRIPTION",
        "type": "String",
        "value": "Efficient methods for Bayesian inference of state space models \n    via Markov chain Monte Carlo (MCMC) based on parallel \n    importance sampling type weighted estimators \n    (Vihola, Helske, and Franks, 2020, <doi:10.1111/sjos.12492>), \n    particle MCMC, and its delayed acceptance version. \n    Gaussian, Poisson, binomial, negative binomial, and Gamma\n    observation densities and basic stochastic volatility models \n    with linear-Gaussian state dynamics, as well as general non-linear Gaussian \n    models and discretised diffusion models are supported. \n    See Helske and Vihola (2021, <doi:10.32614/RJ-2021-103>) for details."
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Efficient methods for Bayesian inference of state space models via Markov chain Monte Carlo (MCMC) based on parallel importance sampling type weighted estimators (Vihola, Helske, and Franks, 2020, <doi:10.1111/sjos.12492>), particle MCMC, and its delayed acceptance version. Gaussian, Poisson, binomial, negative binomial, and Gamma observation densities and basic stochastic volatility models with linear-Gaussian state dynamics, as well as general non-linear Gaussian models and discretised diffusion models are supported. See Helske and Vihola (2021, <doi:10.32614/RJ-2021-103>) for details."
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 0.9181239800962505,
      "result": {
        "original_header": "bssm",
        "type": "Text_excerpt",
        "value": "\r\n\r\n\r\n[![Project Status: Active - The project has reached a stable, usable\r\nstate and is being actively\r\ndeveloped](https://www.repostatus.org/badges/latest/active.svg)](https://www.repostatus.org/#active)\r\n[![Status at rOpenSci Software Peer\r\nReview](https://badges.ropensci.org/489_status.svg)](https://github.com/ropensci/software-review/issues/489)\r\n[![R-CMD-check](https://github.com/helske/bssm/workflows/R-CMD-check/badge.svg)](https://github.com/helske/bssm/actions)\r\n[![Codecov test\r\ncoverage](https://codecov.io/gh/helske/bssm/graph/badge.svg)](https://app.codecov.io/gh/helske/bssm)\r\n[![CRAN\r\nversion](http://www.r-pkg.org/badges/version/bssm)](https://CRAN.R-project.org/package=bssm)\r\n[![downloads](https://cranlogs.r-pkg.org/badges/bssm)](https://cranlogs.r-pkg.org/badges/bssm)\r\n\r\n\r\n\r\nThe `bssm` R package provides efficient methods for Bayesian inference\r\nof state space models via particle Markov chain Monte Carlo and\r\nimportance sampling type weighted MCMC. Currently Gaussian, Poisson,\r\nbinomial, negative binomial, and Gamma observation densities with\r\nlinear-Gaussian state dynamics, as well as general non-linear Gaussian\r\nmodels and discretely observed latent diffusion processes are supported.\r\n\r\nFor details, see\r\n\r\n- [The bssm paper on The R\r\n  Journal](https://journal.r-project.org/archive/2021/RJ-2021-103/index.html),\r\n- [Package vignettes at CRAN](https://CRAN.R-project.org/package=bssm)\r\n- Paper on [Importance sampling type estimators based on approximate\r\n  marginal Markov chain Monte\r\n  Carlo](https://onlinelibrary.wiley.com/doi/abs/10.1111/sjos.12492)\r\n\r\nThere are also couple posters and a talk related to IS-correction\r\nmethodology and bssm package:\r\n\r\n- [UseR!2021 talk\r\n  slides](https://jounihelske.netlify.app/talk/user2021/)  \r\n- [SMC 2017 workshop: Accelerating MCMC with an\r\n  approximation](http://users.jyu.fi/~jovetale/posters/SMC2017)\r\n- [UseR!2017: Bayesian non-Gaussian state space models in\r\n  R](http://users.jyu.fi/~jovetale/posters/user2017.pdf)\r\n\r\nThe `bssm` package was originally developed with the support of Academy\r\nof Finland grants 284513, 312605, 311877, and 331817. Current\r\ndevelopment is focused on increased usability. For recent changes, see\r\nNEWS file.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "development_status": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "https://www.repostatus.org/#active"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/helske/bssm/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 14
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/helske/bssm/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "helske/bssm"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bssm"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "description",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/helske/bssm/main/DESCRIPTION"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/DESCRIPTION",
      "technique": "file_exploration"
    }
  ],
  "has_package_file": [
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/helske/bssm/main/DESCRIPTION",
        "type": "Url",
        "value": "DESCRIPTION"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/DESCRIPTION",
      "technique": "code_parser"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bssm"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/helske/bssm/main/man/figures/README-example-1.png"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/helske/bssm/main/man/figures/README-compare-1.png"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/helske/bssm/main/man/figures/README-bivariate-fig-1.png"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/helske/bssm/main/man/figures/README-bivariate-fig-2.png"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "bssm"
        ],
        "type": "Text_excerpt",
        "value": "\r\nYou can install the released version of bssm from\r\n[CRAN](https://CRAN.R-project.org) with:\r\n\r\n``` r\r\ninstall.packages(\"bssm\")\r\n```\r\n\r\nAnd the development version from [GitHub](https://github.com/) with:\r\n\r\n``` r\r\n# install.packages(\"devtools\")\r\ndevtools::install_github(\"helske/bssm\")\r\n```\r\n\r\nOr from R-universe with\r\n\r\n``` r\r\ninstall.packages(\"bssm\", repos = \"https://helske.r-universe.dev\")\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/helske/bssm/issues"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/helske/bssm/issues"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/helske/bssm/issues"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bayesian-inference, cpp, markov-chain-monte-carlo, particle-filter, r, state-space, time-series"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": [
          "bayesian-inference",
          "markov-chain-monte-carlo",
          "particle-filter",
          "time-series",
          "state-space",
          "r",
          "cpp"
        ]
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/helske/bssm/main/DESCRIPTION",
        "type": "String",
        "value": "GPL (>= 2)"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/https://spdx.org/licenses/GPL-2.0",
        "spdx_id": "https://spdx.org/licenses/GPL-2.0",
        "type": "License",
        "value": "https://spdx.org/licenses/GPL-2.0"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bssm"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bssm: Bayesian Inference of Non-Linear and Non-Gaussian State Space\n        Models"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "helske"
      },
      "technique": "GitHub_API"
    }
  ],
  "package_id": [
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/helske/bssm/main/DESCRIPTION",
        "type": "String",
        "value": "bssm"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/DESCRIPTION",
      "technique": "code_parser"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 756018,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 554670,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 363865,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 16903,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 4085,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "type": "Programming_language",
        "url": "https://r-project.org",
        "value": "R",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/helske/bssm/main/README.Rmd"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "https://github.com/helske/bssm/blob/main/README.md"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/helske/bssm/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "helske",
          "type": "User"
        },
        "date_created": "2022-07-06T10:20:30Z",
        "date_published": "2022-07-06T13:04:59Z",
        "description": "Forgot to create a release for 2.0.1, so this is it plus some additional changes based on the rOpenSci review which will be incorporated into the CRAN version 2.0.2 later. From the NEWS:\r\n\r\nbssm 2.0.1.3\r\n==============\r\n   * Switched to markdown NEWS with a plan to be more clear about the future\r\n     changes in the package.\r\n   * Added more details to the `?bssm` help page.\r\n   * Added more details to the `?bssm_prior` help page.\r\n   * Added option to extract only hyperparameters in `as_draws` method. Also\r\n     fixed a but in `as_draws` which caused the it to ignore `states` argument.\r\n   * Added a default plot method for the `run_mcmc` output.\r\n\r\nbssm 2.0.1 (Release date: 2022-05-02)\r\n==============\r\n   * Fixed weights to one in case of non-linear model with mcmc_type=\"approx\".\r\n   * Adjusted tolerance of some testthat tests to comply with CRAN's MKL checks.",
        "html_url": "https://github.com/helske/bssm/releases/tag/v.2.0.1.3",
        "name": "v.2.0.1.3",
        "release_id": 71368720,
        "tag": "v.2.0.1.3",
        "tarball_url": "https://api.github.com/repos/helske/bssm/tarball/v.2.0.1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/helske/bssm/releases/71368720",
        "value": "https://api.github.com/repos/helske/bssm/releases/71368720",
        "zipball_url": "https://api.github.com/repos/helske/bssm/zipball/v.2.0.1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "helske",
          "type": "User"
        },
        "date_created": "2021-11-26T09:39:40Z",
        "date_published": "2021-12-02T18:27:15Z",
        "description": "Bump to version 2.0.0 due to large number of changes, some visible to user, while some are due to submission to rOpenSci review. From the NEWS file:\r\n\r\n   * Added a progress bar for run_mcmc.\r\n   * Added a fitted method for extraction of summary statistics of posterior \r\n     predictive distribution p(y_t | y_1, ..., y_n) for t = 1, ..., n. \r\n   * Rewrote the summary method completely, which now returns data.frame. This \r\n     also resulted in some changes in order of the function arguments.\r\n   * The output of predict method is now a data frame with column weight \r\n     corresponding to the IS-weights in case of IS-MCMC. Previously resampling \r\n     was done internally, but now this is left for the user if needed \r\n     (i.e. for drawing state trajectories).\r\n   * The asymptotic_var and iact functions are now exported to users, and they \r\n     also contain alternative methods based on the posterior package.\r\n   * New function estimate_ess can be used to compute effective sample size \r\n     from weighted MCMC.\r\n   * Added compatibility with the posterior package by defining as_draws \r\n     method for converting run_mcmc output to draws_df object.\r\n   * New function check_diagnostics for quick glance of ESS and Rhat values.\r\n   * Large number of new tests, and improved documentation with added examples.\r\n   * Large number of internal tweaks so that the package complies with \r\n     goodpractices package and Ropensci statistical software standards.",
        "html_url": "https://github.com/helske/bssm/releases/tag/v.2.0.0",
        "name": "CRAN version 2.0.0",
        "release_id": 54522216,
        "tag": "v.2.0.0",
        "tarball_url": "https://api.github.com/repos/helske/bssm/tarball/v.2.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/helske/bssm/releases/54522216",
        "value": "https://api.github.com/repos/helske/bssm/releases/54522216",
        "zipball_url": "https://api.github.com/repos/helske/bssm/zipball/v.2.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "helske",
          "type": "User"
        },
        "date_created": "2021-09-20T10:23:47Z",
        "date_published": "2021-09-20T20:24:45Z",
        "description": "New CRAN version with mostly internal tweaking and more examples:\r\n\r\nbssm 1.1.7-1 (Release date: 2021-09-21)\r\n==============\r\n   * Fixed an error in automatic tests due to lack of fixed RNG seed.\r\n\r\nbssm 1.1.7 (Release date: 2021-09-20)\r\n==============\r\n   * Added a function cpp_example_model which can be used to extract and \r\n     compile some non-linear and SDE models used in the examples and vignettes.\r\n   * Added as_draws method for run_mcmc output so samples can be analysed using \r\n     the posterior package.\r\n   * Added more examples.\r\n   * Fixed a tolerance of one MCMC test to pass the test on OSX as well.\r\n   * Fixed a bug in iterated extended Kalman smoothing which resulted incorrect \r\n     estimates.",
        "html_url": "https://github.com/helske/bssm/releases/tag/v1.1.7-1",
        "name": "CRAN release 1.1.7-1",
        "release_id": 49938939,
        "tag": "v1.1.7-1",
        "tarball_url": "https://api.github.com/repos/helske/bssm/tarball/v1.1.7-1",
        "type": "Release",
        "url": "https://api.github.com/repos/helske/bssm/releases/49938939",
        "value": "https://api.github.com/repos/helske/bssm/releases/49938939",
        "zipball_url": "https://api.github.com/repos/helske/bssm/zipball/v1.1.7-1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "helske",
          "type": "User"
        },
        "date_created": "2021-09-05T15:21:58Z",
        "date_published": "2021-09-06T07:10:28Z",
        "description": "Added a large number of automatic tests which resulted in finding and fixing some bugs, most notably in the case of non-linear models and the predict method (See NEWS for details). ",
        "html_url": "https://github.com/helske/bssm/releases/tag/v1.1.6",
        "name": "CRAN version 1.1.6",
        "release_id": 49051795,
        "tag": "v1.1.6",
        "tarball_url": "https://api.github.com/repos/helske/bssm/tarball/v1.1.6",
        "type": "Release",
        "url": "https://api.github.com/repos/helske/bssm/releases/49051795",
        "value": "https://api.github.com/repos/helske/bssm/releases/49051795",
        "zipball_url": "https://api.github.com/repos/helske/bssm/zipball/v1.1.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "helske",
          "type": "User"
        },
        "date_created": "2021-07-09T21:09:09Z",
        "date_published": "2021-07-09T21:15:46Z",
        "description": "Small update, updated drownings data until 2019 and made few small internal argument checks.",
        "html_url": "https://github.com/helske/bssm/releases/tag/v1.1.5",
        "name": "CRAN version 1.1.5",
        "release_id": 45989341,
        "tag": "v1.1.5",
        "tarball_url": "https://api.github.com/repos/helske/bssm/tarball/v1.1.5",
        "type": "Release",
        "url": "https://api.github.com/repos/helske/bssm/releases/45989341",
        "value": "https://api.github.com/repos/helske/bssm/releases/45989341",
        "zipball_url": "https://api.github.com/repos/helske/bssm/zipball/v1.1.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "helske",
          "type": "User"
        },
        "date_created": "2021-04-13T13:50:03Z",
        "date_published": "2021-07-09T12:48:15Z",
        "description": "CRAN version 1.1.4. Changes from NEWS file:\r\n\r\nbssm 1.1.4 (Release date: 2021-04-13)\r\n==============\r\n   * Better documentation for SV model, and changed the ordering of arguments to emphasise the recommended parameterization.\r\n   * Fixed predict method for SV model.\r\n   * Removed parallelization in one example which failed on Solaris for some unknown reason.",
        "html_url": "https://github.com/helske/bssm/releases/tag/v1.1.4",
        "name": "CRAN version 1.1.4",
        "release_id": 45966379,
        "tag": "v1.1.4",
        "tarball_url": "https://api.github.com/repos/helske/bssm/tarball/v1.1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/helske/bssm/releases/45966379",
        "value": "https://api.github.com/repos/helske/bssm/releases/45966379",
        "zipball_url": "https://api.github.com/repos/helske/bssm/zipball/v1.1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "helske",
          "type": "User"
        },
        "date_created": "2017-05-10T10:16:53Z",
        "date_published": "2017-05-10T11:29:34Z",
        "description": "First properly documented release after introducing the non-linear Gaussian models. Some features which were available before rebuilding are still missing, but main features should fully working.",
        "html_url": "https://github.com/helske/bssm/releases/tag/v0.0.75",
        "name": "First release",
        "release_id": 6337526,
        "tag": "v0.0.75",
        "tarball_url": "https://api.github.com/repos/helske/bssm/tarball/v0.0.75",
        "type": "Release",
        "url": "https://api.github.com/repos/helske/bssm/releases/6337526",
        "value": "https://api.github.com/repos/helske/bssm/releases/6337526",
        "zipball_url": "https://api.github.com/repos/helske/bssm/zipball/v0.0.75"
      },
      "technique": "GitHub_API"
    }
  ],
  "repository_status": [
    {
      "confidence": 1,
      "result": {
        "description": "Active - The project has reached a stable, usable\r\nstate and is being actively\r\ndeveloped",
        "type": "Url",
        "value": "https://www.repostatus.org/#active"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2025-09-19 03:20:19",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 46
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "bssm"
        ],
        "type": "Text_excerpt",
        "value": "\r\nConsider the daily air quality measurements in New Your from May to\r\nSeptember 1973, available in the `datasets` package. Let\u2019s try to\r\npredict the missing ozone levels by simple linear-Gaussian local linear\r\ntrend model with temperature and wind as explanatory variables (missing\r\nresponse variables are handled naturally in the state space modelling\r\nframework, however no missing values in covariates are normally\r\nallowed);\r\n\r\n``` r\r\nlibrary(\"bssm\")\r\n#> Warning: package 'bssm' was built under R version 4.3.1\r\n#> \r\n#> Attaching package: 'bssm'\r\n#> The following object is masked from 'package:base':\r\n#> \r\n#>     gamma\r\nlibrary(\"dplyr\")\r\n#> \r\n#> Attaching package: 'dplyr'\r\n#> The following objects are masked from 'package:stats':\r\n#> \r\n#>     filter, lag\r\n#> The following objects are masked from 'package:base':\r\n#> \r\n#>     intersect, setdiff, setequal, union\r\nlibrary(\"ggplot2\")\r\n#> Warning: package 'ggplot2' was built under R version 4.3.1\r\nset.seed(1)\r\n\r\ndata(\"airquality\", package = \"datasets\")\r\n\r\n# Covariates as matrix. For complex cases, check out as_bssm function\r\nxreg <- airquality |> select(Wind, Temp) |> as.matrix()\r\n\r\nmodel <- bsm_lg(airquality$Ozone,\r\n  xreg = xreg,  \r\n  # Define priors for hyperparameters (i.e. not the states), see ?bssm_prior\r\n  # Initial value followed by parameters of the prior distribution\r\n  beta = normal_prior(rep(0, ncol(xreg)), 0, 1),\r\n  sd_y = gamma_prior(1, 2, 0.01),\r\n  sd_level = gamma_prior(1, 2, 0.01), \r\n  sd_slope = gamma_prior(1, 2, 0.01))\r\n\r\nfit <- run_mcmc(model, iter = 20000, burnin = 5000)\r\nfit\r\n#> \r\n#> Call:\r\n#> run_mcmc.lineargaussian(model = model, iter = 20000, burnin = 5000)\r\n#> \r\n#> Iterations = 5001:20000\r\n#> Thinning interval = 1\r\n#> Length of the final jump chain = 3593\r\n#> \r\n#> Acceptance rate after the burn-in period:  0.239\r\n#> \r\n#> Summary for theta:\r\n#> \r\n#>  variable       Mean          SE        SD        2.5%     97.5% ESS\r\n#>      Temp  1.0265846 0.007497538 0.2064343  0.60226671  1.400436 758\r\n#>      Wind -2.5183269 0.020978488 0.5764833 -3.68987992 -1.327578 755\r\n#>  sd_level  6.3731836 0.113153715 2.8013937  1.52958636 12.403961 613\r\n#>  sd_slope  0.3388712 0.010355574 0.2833955  0.04210885  1.070284 749\r\n#>      sd_y 20.8618647 0.068145131 1.9369381 17.08728231 24.722309 808\r\n#> \r\n#> Summary for alpha_154:\r\n#> \r\n#>  variable time        Mean         SE        SD       2.5%     97.5%  ESS\r\n#>     level  154 -28.3163054 0.69650977 20.132341 -69.271049 11.797133  835\r\n#>     slope  154  -0.3740463 0.03683278  1.685733  -4.065499  2.830134 2094\r\n#> \r\n#> Run time:\r\n#>    user  system elapsed \r\n#>    0.57    0.02    0.63\r\n\r\nobs <- data.frame(Time = 1:nrow(airquality),\r\n  Ozone = airquality$Ozone) |> filter(!is.na(Ozone))\r\n\r\npred <- fitted(fit, model)\r\npred |>\r\n  ggplot(aes(x = Time, y = Mean)) + \r\n  geom_ribbon(aes(ymin = `2.5%`, ymax = `97.5%`), \r\n    alpha = 0.5, fill = \"steelblue\") + \r\n  geom_line() + \r\n  geom_point(data = obs, \r\n    aes(x = Time, y = Ozone), colour = \"Tomato\") +\r\n  theme_bw()\r\n```\r\n\r\n<img src=\"man/figures/README-example-1.png\" width=\"100%\" />\r\n\r\nSame model but now assuming observations are from Gamma distribution:\r\n\r\n``` r\r\n\r\nmodel2 <- bsm_ng(airquality$Ozone,\r\n  xreg = xreg,  \r\n  beta = normal(rep(0, ncol(xreg)), 0, 1),\r\n  distribution = \"gamma\",\r\n  phi = gamma_prior(1, 2, 0.01),\r\n  sd_level = gamma_prior(1, 2, 0.1), \r\n  sd_slope = gamma_prior(1, 2, 0.1))\r\n\r\nfit2 <- run_mcmc(model2, iter = 20000, burnin = 5000, particles = 10)\r\nfit2\r\n#> \r\n#> Call:\r\n#> run_mcmc.nongaussian(model = model2, iter = 20000, particles = 10, \r\n#>     burnin = 5000)\r\n#> \r\n#> Iterations = 5001:20000\r\n#> Thinning interval = 1\r\n#> Length of the final jump chain = 3858\r\n#> \r\n#> Acceptance rate after the burn-in period:  0.257\r\n#> \r\n#> Summary for theta:\r\n#> \r\n#>  variable         Mean           SE          SD          2.5%       97.5%  ESS\r\n#>      Temp  0.052808820 0.0002404538 0.008701489  0.0353736458  0.06992423 1310\r\n#>      Wind -0.057351094 0.0004338213 0.015411504 -0.0873384757 -0.02700112 1262\r\n#>       phi  4.006977632 0.0159088062 0.536273508  3.0263444882  5.15527365 1136\r\n#>  sd_level  0.057158663 0.0020138200 0.035366227  0.0083794202  0.14651419  308\r\n#>  sd_slope  0.003894013 0.0001752319 0.003654978  0.0004250207  0.01374575  435\r\n#>         SE_IS ESS_IS\r\n#>  7.128104e-05  14485\r\n#>  1.263047e-04  13905\r\n#>  4.411840e-03  14611\r\n#>  2.927386e-04  10591\r\n#>  3.031489e-05   7766\r\n#> \r\n#> Summary for alpha_154:\r\n#> \r\n#>  variable time         Mean           SE         SD        2.5%      97.5%  ESS\r\n#>     level  154 -0.200656509 0.0201721601 0.73134471 -1.62501396 1.24522802 1314\r\n#>     slope  154 -0.002689176 0.0005121944 0.02289051 -0.04650504 0.04724173 1997\r\n#>        SE_IS ESS_IS\r\n#>  0.005987284   9458\r\n#>  0.000191620   6448\r\n#> \r\n#> Run time:\r\n#>    user  system elapsed \r\n#>    7.50    0.01    7.71\r\n```\r\n\r\nComparison:\r\n\r\n``` r\r\npred2 <- fitted(fit2, model2)\r\n\r\nbind_rows(list(Gaussian = pred, Gamma = pred2), .id = \"Model\") |>\r\n  ggplot(aes(x = Time, y = Mean)) + \r\n  geom_ribbon(aes(ymin = `2.5%`, ymax = `97.5%`, fill = Model), \r\n    alpha = 0.25) + \r\n  geom_line(aes(colour = Model)) + \r\n  geom_point(data = obs, \r\n    aes(x = Time, y = Ozone)) +\r\n  theme_bw()\r\n```\r\n\r\n<img src=\"man/figures/README-compare-1.png\" width=\"100%\" />\r\n\r\nNow let\u2019s assume that we also want to use the solar radiation variable\r\nas predictor for ozone. As it contains few missing values, we cannot use\r\nit directly. As the number of missing time points is very small, simple\r\nimputation would likely be acceptable, but let\u2019s consider more another\r\napproach. For simplicity, the slope terms of the previous models are now\r\nomitted, and we focus on the Gaussian case. Let $\\mu_t$ be the true\r\nsolar radiation at time $t$. Now for ozone $O_t$ we assume following\r\nmodel:\r\n\r\n$O_t = D_t + \\alpha_t + \\beta_S \\mu_t + \\sigma_\\epsilon \\epsilon_t$  \r\n$\\alpha_{t+1} = \\alpha_t + \\sigma_\\eta\\eta_t$  \r\n$\\alpha_1 \\sim N(0, 100^2\\textrm{I})$,  \r\nwheere $D_t = \\beta X_t$ contains regression terms related to wind and\r\ntemperature, $\\alpha_t$ is the time varying intercept term, and\r\n$\\beta_S$ is the effect of solar radiation $\\mu_t$.\r\n\r\nNow for the observed solar radiation $S_t$ we assume\r\n\r\n$S_t = \\mu_t$  \r\n$\\mu_{t+1} = \\mu_t + \\sigma_\\xi\\xi_t,$  \r\n$\\mu_1 \\sim N(0, 100^2)$,  \r\ni.e.\u00a0we assume as simple random walk for the $\\mu$ which we observe\r\nwithout error or not at all (there is no error term in the observation\r\nequation $S_t=\\mu_t$).\r\n\r\nWe combine these two models as a bivariate Gaussian model with\r\n`ssm_mlg`:\r\n\r\n``` r\r\n# predictors (not including solar radiation) for ozone\r\nxreg <- airquality |> select(Wind, Temp) |> as.matrix()\r\n\r\n# Function which outputs new model components given the parameter vector theta\r\nupdate_fn <- function(theta) {\r\n  D <- rbind(t(xreg %*% theta[1:2]), 1)\r\n  Z <- matrix(c(1, 0, theta[3], 1), 2, 2)\r\n  R <- diag(exp(theta[4:5]))\r\n  H <- diag(c(exp(theta[6]), 0))\r\n  # add third dimension so we have p x n x 1, p x m x 1, p x p x 1 arrays\r\n  dim(Z)[3] <- dim(R)[3] <- dim(H)[3] <- 1\r\n  list(D = D, Z = Z, R = R, H = H)\r\n}\r\n\r\n# Function for log-prior density\r\nprior_fn <- function(theta) {\r\n  sum(dnorm(theta[1:3], 0, 10, log = TRUE)) + \r\n    sum(dgamma(exp(theta[4:6]), 2, 0.01, log = TRUE)) + \r\n    sum(theta[4:6]) # log-jacobian\r\n}\r\n\r\ninit_theta <- c(0, 0, 0, log(50), log(5), log(20))\r\ncomps <- update_fn(init_theta)\r\n\r\nmodel <- ssm_mlg(y = cbind(Ozone = airquality$Ozone, Solar = airquality$Solar.R),\r\n  Z = comps$Z, D = comps$D, H = comps$H, T = diag(2), R = comps$R, \r\n  a1 = rep(0, 2), P1 = diag(100, 2), init_theta = init_theta, \r\n  state_names = c(\"alpha\", \"mu\"), update_fn = update_fn,\r\n  prior_fn = prior_fn)\r\n\r\nfit <- run_mcmc(model, iter = 60000, burnin = 10000)\r\nfit\r\n#> \r\n#> Call:\r\n#> run_mcmc.lineargaussian(model = model, iter = 60000, burnin = 10000)\r\n#> \r\n#> Iterations = 10001:60000\r\n#> Thinning interval = 1\r\n#> Length of the final jump chain = 12234\r\n#> \r\n#> Acceptance rate after the burn-in period:  0.245\r\n#> \r\n#> Summary for theta:\r\n#> \r\n#>  variable        Mean           SE         SD       2.5%      97.5%  ESS\r\n#>   theta_1 -3.89121114 0.0233827004 0.58715113 -5.0085134 -2.6915137  631\r\n#>   theta_2  0.98712126 0.0051506907 0.18819758  0.5917823  1.3475147 1335\r\n#>   theta_3  0.06324657 0.0004672314 0.02417334  0.0141425  0.1100184 2677\r\n#>   theta_4  0.82577262 0.0165661049 0.67134723 -0.6840637  1.9160168 1642\r\n#>   theta_5  4.75567621 0.0010887250 0.05858454  4.6446809  4.8704036 2895\r\n#>   theta_6  3.05462451 0.0014803971 0.07640392  2.9032635  3.2028023 2664\r\n#> \r\n#> Summary for alpha_154:\r\n#> \r\n#>  variable time      Mean        SE        SD       2.5%     97.5%  ESS\r\n#>     alpha  154 -16.44435 0.3659912  14.99708 -46.321645  13.01863 1679\r\n#>        mu  154 223.60490 1.3409568 116.49063  -6.206301 453.18554 7546\r\n#> \r\n#> Run time:\r\n#>    user  system elapsed \r\n#>    7.41    0.11    7.83\r\n```\r\n\r\nDraw predictions:\r\n\r\n``` r\r\npred <- fitted(fit, model)\r\n\r\nobs <- data.frame(Time = 1:nrow(airquality),\r\n  Solar = airquality$Solar.R) |> filter(!is.na(Solar))\r\n\r\npred |> filter(Variable == \"Solar\") |>\r\n  ggplot(aes(x = Time, y = Mean)) + \r\n  geom_ribbon(aes(ymin = `2.5%`, ymax = `97.5%`), \r\n    alpha = 0.5, fill = \"steelblue\") + \r\n  geom_line() + \r\n  geom_point(data = obs, \r\n    aes(x = Time, y = Solar), colour = \"Tomato\") +\r\n  theme_bw()\r\n```\r\n\r\n<img src=\"man/figures/README-bivariate-fig-1.png\" width=\"100%\" />\r\n\r\n``` r\r\n\r\n\r\nobs <- data.frame(Time = 1:nrow(airquality),\r\n  Ozone = airquality$Ozone) |> filter(!is.na(Ozone))\r\n\r\npred |> filter(Variable == \"Ozone\") |>\r\n  ggplot(aes(x = Time, y = Mean)) + \r\n  geom_ribbon(aes(ymin = `2.5%`, ymax = `97.5%`), \r\n    alpha = 0.5, fill = \"steelblue\") + \r\n  geom_line() +  \r\n  geom_point(data = obs, \r\n    aes(x = Time, y = Ozone), colour = \"Tomato\") +\r\n  theme_bw()\r\n```\r\n\r\n<img src=\"man/figures/README-bivariate-fig-2.png\" width=\"100%\" />\r\n\r\nSee more examples in the paper, vignettes, and in the docs.\r\n"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "version": [
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/helske/bssm/main/DESCRIPTION",
        "type": "String",
        "value": "2.0.2"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2.0.2"
      },
      "source": "https://raw.githubusercontent.com/helske/bssm/main/codemeta.json",
      "technique": "code_parser"
    }
  ]
}