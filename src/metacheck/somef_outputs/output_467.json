{
  "authors": [
    {
      "confidence": 1,
      "result": {
        "email": "proycon@anaproy.nl",
        "type": "Agent",
        "value": "proycon@anaproy.nl"
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "proycon@anaproy.nl",
        "identifier": "https://orcid.org/0000-0002-1046-0006",
        "type": "String",
        "value": "Maarten van Gompel"
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/proycon/colibrita"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/proycon/colibrita"
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/proycon/colibrita"
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2013-06-12T08:23:21Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2013-07-09"
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-05-23T19:35:14Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Colibrita is a proof-of-concept translation assistance system, translating L1 fragments in an L2 context, using machine learning and statistical machine translation techniques"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Colibrita is a proof-of-concept translation assistance system that can translate L1 fragments in an L2 context. The system is designed prior to a new task (presented at SemEval 2014) concerning the translation of L1 fragments, i.e words or phrases, in an L2 context. This type of translation can be applied in writing assistance systems for language learners in which users write in their target language, but are allowed to occasionally back off to their native L1 when they are uncertain of the proper word or expression in L2. These L1 fragments are subsequently translated, along with the L2 context, into L2 fragments. Colibrita was developed to test whether L2 context information aids in translation of L1 fragments."
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "development_status": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "inactive"
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/proycon/colibrita/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/proycon/colibrita/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "proycon/colibrita"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Colibrita: Translation Assistance System"
      },
      "source": "https://github.com/proycon/colibrita/blob/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "setup.py",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/proycon/colibrita/master/setup.py"
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/setup.py",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/proycon/colibrita/master/exp/exp-acl.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/proycon/colibrita/master/exp/exp-semeval.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "colibrita"
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "Colibrita is written in Python 3. It is a complex system involving quite a\nnumber of dependencies.\n\nFirst make sure you have a modern linux distribution with the necessary\nprerequisites: python3, python3-dev, python3-setuptools, python3-lxml, cython3, gcc,\ng++,  autoconf,  automake, autoconf-archive, libtool , libboost-dev, libboost-python\n\nIf you intend to build your own training models, then you will also require the\nfollowing two dependencies:\n\n * **Moses** - https://github.com/moses-smt/mosesdecoder\n * **GIZA++** - http://code.google.com/p/giza-pp/ \n\nOther unix systems including FreeBSD and Mac OS X will most likely work \ntoo, but especially for that latter considerable extra effort may be required\nin installing things. The instructions here have been tailored for\nDebian/Ubuntu-based Linux distributions.\n\nIn addition to the above dependencies, Colibrita depends on pynlpl, colibri-core, Timbl and python-timbl.\n\nInstall PyNLPl from the Python Package Index (or alternatively from\nhttps://github.com/proycon/pynlpl):\n\n    $ sudo easy_install3 pynlpl\n\nDownload colibri-core from https://github.com/proycon/colibri-core and install as follows:\n\n    $ bash bootstrap\n    $ ./configure \n    $ make\n    $ sudo make install\n    $ sudo python3 ./setup.py install\n\nInstall Timbl, it may be in your package manager if you use Debian/Ubuntu:\n\n    $ sudo apt-get install timbl\n\nOtherwise obtain it from http://ilk.uvt.nl/timbl and compile manually:\n\n    $ ./configure\n    $ make\n    $ make install\n\nInstall Python-Timbl from the Python Package Index (or alternatively from\nhttps://github.com/proycon/python-timbl):\n\n    $ sudo easy_install3 python-timbl\n\nThen install colibrita from https://github.com/proycon/colibrita:\n\n     $ sudo python3 ./setup.py install\n\n**Note:** If you want to reproduce the results of our ACL paper, then make sure to do\n``git checkout v0.2.1`` in the Colibrita repository prior to installation. Colibrita may have advanced\nsince then.\n\nLast, if you want to evaluate according to well-known MT metrics such as BLEU,\nMETEOR, NIST, TER, WER, and PER; you should download and unpack\nhttp://lst.science.ru.nl/~proycon/mtevalscripts.tar.gz\n\n"
      },
      "source": "https://github.com/proycon/colibrita/blob/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Set generation",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Building a model starts with generating a training set from a parallel corpus.\nEnsure you have two plain-text files, one in the source language, one in the\ntarget language, with one sentence per line where the line numbers across the\ntwo files are indicative of sentences that are translations of eachother. In\nthis documentation we will use two files from our ACL 2014 experiments,\nobtainable from http://lst.science.ru.nl/~proycon/colibrita-acl2014-data.zip :\n\n    * europarl200k-train.nl.txt\n    * europarl200k-train.en.txt\n\nGiven this input data, you can use Colibrita's *setgen* tool: \n\n     $ colibrita-setgen --train --mosesdir=/path/to/mosesdecoder -S nl -T en \\\n     -s europarl200k-train.nl.txt -t europarl200k-train.en.txt --bindir=/usr/local/bin \\\n     -o europarl200k\n\nThis tool will invoke Moses (which will in turn invoke GIZA++) and the\nColibri-Core patternmodeller. It builds word alignments, a phrase-translation\ntable and pattern models, and eventually produces an XML file. This process may\ntake a very long time and demands conseridable memory. The output prefix\n ``-o`` will be used in many of the output files. The parameters\n``--joinedprobabilitythreshold`` and ``--divergencefrombestthreshold`` can be\nused to prevent weaker alignments and alternatives from making it into the set,\nand correspond to the parameters \u03bb1 and \u03bb2 in our ACL 2014 paper.\n\nA test set can be generated in the same fashion:\n\n     $ colibrita-setgen --test --mosesdir=/path/to/mosesdecoder -S nl -T en \\\n     -s europarl200k-test.nl.txt -t europarl200k-test.en.txt --bindir=/usr/local/bin \\\n     -o europarl200k\n\n"
      },
      "source": "https://github.com/proycon/colibrita/blob/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/proycon/colibrita/issues"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/proycon/colibrita/issues"
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "nlp computational_linguistics linguistics"
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": [
          "nlp",
          "natural language processing",
          "machine translation",
          "collocations",
          "translation",
          "code switching",
          "computer-aided language learning"
        ]
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "type": "License",
        "value": "GPL"
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/GPLv3",
        "spdx_id": "GPLv3",
        "type": "License",
        "value": "GPLv3"
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "colibrita"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "colibrita"
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "proycon"
      },
      "technique": "GitHub_API"
    }
  ],
  "package_id": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "colibrita"
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/setup.py",
      "technique": "code_parser"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 168026,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 16984,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Python"
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "python",
        "type": "Programming_language",
        "value": "python",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "https://github.com/proycon/colibrita/blob/master/README.md"
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/proycon/colibrita/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "reference_publication": [
    {
      "confidence": 1,
      "result": {
        "title": "Translation Assistance by Translation of L1 Fragments in an L2 Context",
        "type": "Scholarly_article",
        "url": "http://www.aclweb.org/anthology/P14-1082",
        "value": "Translation Assistance by Translation of L1 Fragments in an L2 Context"
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "name": "Colibri Core",
        "type": "Software_application",
        "value": "Colibri Core",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Moses",
        "type": "Software_application",
        "value": "Moses",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "GIZA++",
        "type": "Software_application",
        "value": "GIZA++",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "python-timbl",
        "type": "Software_application",
        "value": "python-timbl",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2025-09-19 01:57:31",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Colibrita: Translation Assistance System",
        "type": "Text_excerpt",
        "value": "Colibrita is a proof-of-concept translation assistance system that can\ntranslate L1 fragments in an L2 context. \n\nThe system is designed prior to a new task (presented at SemEval 2014) concerning the translation of L1\nfragments, i.e words or phrases, in an L2 context. This type of translation can\nbe applied in writing assistance systems for language learners in which users\nwrite in their target language, but are allowed to occasionally back off to\ntheir native L1 when they are uncertain of the proper word or expression in L2.\nThese L1 fragments are subsequently translated, along with the L2 context, into\nL2 fragments.\n\nColibrita was developed to test whether L2 context information aids in translation of L1 fragments. The results are accepted for publication in ACL 2014, in the paper: *Maarten van Gompel, Antal van den Bosch*. **Translation Assistance by Translation of L1 Fragments in an L2 Context**. Proceedings of ACL 2014 Conference (to appear still)\n\n"
      },
      "source": "https://github.com/proycon/colibrita/blob/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "The following tools are available:\n\n * ``colibrita`` - This is the main system, it is used for training and\n   testing.\n  \n * ``colibrita-evaluate`` - Tool for evaluation of system output. Point\n   --mtevaldir to the directory where you unpacked mtevalscripts.tar.gz if you\n   want common MT metrics in your report.\n\n * ``colibrita-setgen`` - Tool for generating training & test sets from\n   parallel corpus data, GIZA++ Word Alignments and a Moses Phrasetable\n    \n * ``colibrita-datastats`` - Reports some statistics on a dataset (train or test, XML)\n\n * ``colibrita-manualsetbuild`` - Small interactive console-based script for creating\n   datasets manually\n\n\nAll tools take ``-h`` for help on usage options.\n"
      },
      "source": "https://github.com/proycon/colibrita/blob/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Training",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The next step is feature extraction and classifier training:\n\n    $ colibrita --train -f europarl200k.train.xml -l 1 -r 1 \\\n    -o exp-l1r1 --Tclones 4 --trainfortest europarl200k-test.xml\n\n\nThe output will consist of a whole bunch of classifiers (ibase files) in the\ndirectory specified with ``-o``.\n\nSome notes about this example:\n\n * ``-f`` specifies the training set, generated by ``colibrita-setgen`` in the\n   previous step.\n * ``-l 1`` sets a left context size of one\n * ``-r 1`` sets a right context size of one\n * ``-o`` specified a new output prefix, used in generated files and a\n   directory will be generated with this name containing all classifiers and\n   intermediate files\n * ``--Tclones 4`` runs Timbl on four cores\n * ``--trainfortest`` generates only those classifiers that will be used in\n   testing, saving time and resources. But this implies the model will have to\n   be retrained if other test data is offered, and can ever be used in a\n   live setting.\n"
      },
      "source": "https://github.com/proycon/colibrita/blob/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Testing",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Testing follows a very similar syntax:\n\n    $ colibrita --test -f europarl200k.test.xml -l 1 -r 1 \\\n    -o exp-l1r1 -T train-europarl200k/model/phrase-table.gz\n\nThis will generate a file exp-l1r1-output.xml that contains the system output\n\nSome notes:\n\n * ``-T`` passes the original phrase table which will be used as a fallback option\n * ``-o`` the same output prefix used in the training step, is used as input as\n   well and assumes a directory by this name exists\n"
      },
      "source": "https://github.com/proycon/colibrita/blob/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Evaluation",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "System output can subsequently be evaluated against the test set using\n``colibrita-evaluate``:\n\n    $ colibrita-evaluate --mtevaldir /path/to/mtevalscripts \\\n    --ref europarl200k.test.xml --out exp-l1r1-output.xml\n\nA summary of all Scores will be written in ``exp-l1r1-output.summary.score`` .\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
      },
      "source": "https://github.com/proycon/colibrita/blob/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "version": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "0.3.1"
      },
      "source": "https://raw.githubusercontent.com/proycon/colibrita/master/codemeta.json",
      "technique": "code_parser"
    }
  ]
}