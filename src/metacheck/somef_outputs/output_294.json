{
  "authors": [
    {
      "confidence": 1,
      "result": {
        "given_name": "The",
        "last_name": "`Kruskal-Veldman` library is developed by:",
        "name": "The `Kruskal-Veldman` library is developed by:",
        "type": "Agent",
        "value": "The `Kruskal-Veldman` library is developed by:"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/AUTHORS.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "email": "dominique.larchey-Wendling@loria.fr",
        "given_name": "-",
        "last_name": "[Dominique Larchey-Wendling](https://members.loria.fr/DLarchey/files/) (",
        "name": "- [Dominique Larchey-Wendling](https://members.loria.fr/DLarchey/files/) (",
        "type": "Agent",
        "value": "- [Dominique Larchey-Wendling](https://members.loria.fr/DLarchey/files/) ("
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/AUTHORS.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "It",
        "last_name": "is now part of the [`Coq-Kruskal` project](https://github.com/DmxLarchey/Coq-Kruskal) that covers the development of several libraries",
        "name": "It is now part of the [`Coq-Kruskal` project](https://github.com/DmxLarchey/Coq-Kruskal) that covers the development of several libraries",
        "type": "Agent",
        "value": "It is now part of the [`Coq-Kruskal` project](https://github.com/DmxLarchey/Coq-Kruskal) that covers the development of several libraries"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/AUTHORS.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "and",
        "last_name": "applications culminating in the [constructive proof of Kruskal's tree theorem](https://github.com/DmxLarchey/Kruskal-Theorems) and",
        "name": "and applications culminating in the [constructive proof of Kruskal's tree theorem](https://github.com/DmxLarchey/Kruskal-Theorems) and",
        "type": "Agent",
        "value": "and applications culminating in the [constructive proof of Kruskal's tree theorem](https://github.com/DmxLarchey/Kruskal-Theorems) and"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/AUTHORS.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "the",
        "last_name": "construction of [Harvey Friedman's `TREE(n)` monster function](https://github.com/DmxLarchey/Friedman-TREE) in the inductive",
        "name": "the construction of [Harvey Friedman's `TREE(n)` monster function](https://github.com/DmxLarchey/Friedman-TREE) in the inductive",
        "type": "Agent",
        "value": "the construction of [Harvey Friedman's `TREE(n)` monster function](https://github.com/DmxLarchey/Friedman-TREE) in the inductive"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/AUTHORS.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "type",
        "last_name": "theory of Coq.",
        "name": "type theory of Coq.",
        "type": "Agent",
        "value": "type theory of Coq."
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/AUTHORS.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "It",
        "last_name": "is was extracted from a complete rework of [the proof of Kruskal's tree theorem](https://members.loria.fr/DLarchey/files/Kruskal/index.html),",
        "name": "It is was extracted from a complete rework of [the proof of Kruskal's tree theorem](https://members.loria.fr/DLarchey/files/Kruskal/index.html),",
        "type": "Agent",
        "value": "It is was extracted from a complete rework of [the proof of Kruskal's tree theorem](https://members.loria.fr/DLarchey/files/Kruskal/index.html),"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/AUTHORS.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "now",
        "last_name": "based on dependent vectors instead of lists, but can be used independently under the Mozilla Public License MPL-2.0.",
        "name": "now based on dependent vectors instead of lists, but can be used independently under the Mozilla Public License MPL-2.0.",
        "type": "Agent",
        "value": "now based on dependent vectors instead of lists, but can be used independently under the Mozilla Public License MPL-2.0."
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/AUTHORS.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "Departement of Formal Method, TYPES team, LORIA, CNRS",
        "email": "dominique.larchey-Wendling@loria.fr",
        "type": "String",
        "value": "Dominique Larchey-Wendling"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DmxLarchey/Kruskal-Veldman"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "git+https://github.com/DmxLarchey/Kruskal-Veldman.git"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "continuous_integration": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/.github/workflows/main.yml"
      },
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-11T22:13:11Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2024-03-15"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_published": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2024-03-15"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-11-24T10:32:29Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2024-11-22"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "An adaptation of Wim Veldman's proof of the tree theorem to Coq"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "This library is an extension of Kruskal-AlmostFull. It contains a detailed constructive/inductive account of Wim Veldman's intuitionistic proofs of a variant of Kruskal's tree theorem.\n"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Short Description",
        "parent_header": [
          "What is this library?"
        ],
        "type": "Text_excerpt",
        "value": "This library `Kruskal-Veldman` is an extension of [`Kruskal-AlmostFull`](https://github.com/DmxLarchey/Kruskal-AlmostFull)\nand [`Kruskal-Higman`](https://github.com/DmxLarchey/Kruskal-Higman) libraries.\nIt contains a detailed constructive/inductive account \nof Wim Veldman's intuitionistic proofs of a variant of Kruskal's tree theorems \\[1\\].\nActually the result is [a mixture of Higman's and Kruskal's theorems](#What-is-the-main-result).\n\nFrom this result, one can easily derive, via simple surjective relational morphisms,\n various forms of Higman's and Kruskal's tree theorems, adapted to the actual implementation \nof rose trees using either lists, or vectors etc. This tasks is devoted to the \nproject [`Kruskal-Theorems`](https://github.com/DmxLarchey/Kruskal-Theorems).\n\n\\[1\\] [_An intuitionistic proof of Kruskal's theorem_](https://link.springer.com/article/10.1007/s00153-003-0207-x), Wim Veldman, 2004\n"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9577649820765259,
      "result": {
        "original_header": "Target audience",
        "type": "Text_excerpt",
        "value": "This library is not intended for direct usage, but it is possible to do so. \nRather, [`Kruskal-Theorems`](https://github.com/DmxLarchey/Kruskal-Theorems) contains the high-level theorems \nthat are intended to be used directly. \nOn the other hand, `Kruskal-Veldman`, in addition of being an intermediate step, was specifically __designed \nto be read/studied__ by those readers who wish to _understand the internal details_ of this difficult\nproof. It comes from a major refactoring effort of a [former monolithic Coq proof](https://members.loria.fr/DLarchey/files/Kruskal) \nof the theorem, a project that has been since split into several sub-libraries, initiated after some requests have been formulated \nto access parts of that project specifically. Here is the current split:\n- [`Kruskal-Trees`](https://github.com/DmxLarchey/Kruskal-Trees), extra library for lists, vectors, and rose trees; \n- [`Kruskal-Finite`](https://github.com/DmxLarchey/Kruskal-Finite), library to manage finiteness (listability);\n- [`Kruskal-AlmostFull`](https://github.com/DmxLarchey/Kruskal-AlmostFull), the basic tools for A(lmost) F(ull) relations (up to Coquand's Ramsey's theorem);\n- [`Kruskal-Higman`](https://github.com/DmxLarchey/Kruskal-Higman), the proof of Higman's lemma (or Higman's theorem for unary trees) (see below);\n- `Kruskal-Veldman` (in here)\n- [`Kruskal-Theorems`](https://github.com/DmxLarchey/Kruskal-Theorems), the proofs of Higman's and [Kruskal's tree theorems](https://en.wikipedia.org/wiki/Kruskal%27s_tree_theorem#:~:text=In%20mathematics%2C%20Kruskal's%20tree%20theorem,quasi%2Dordered%20under%20homeomorphic%20embedding.) for various implementations of bounded and rose trees, and of Vazsonyi's conjecture.\n \n"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9423859342722953,
      "result": {
        "original_header": "What is the main result",
        "type": "Text_excerpt",
        "value": "The main result established here in [`veldman_theorem.v`](theories/universe/veldman_theorem.v) can be stated as follows:\n```coq\nVariables (A : Type) (k : nat) (X : nat \u2192 rel\u2081 A) (R : nat \u2192 rel\u2082 A).\n\nInductive vtree_upto_embed : vtree A \u2192 vtree A \u2192 Prop :=\n  | vtree_upto_embed_subt t m y (w : vec _ m) i : t \u2264\u2096 w\u2983i\u2984 \u2192 t \u2264\u2096 \u27e8y|w\u27e9\n  | vtree_upto_embed_lt n x (v : vec _ n) y w : n < k \u2192 R n x y \u2192 vec_fall2 (\u22c5 \u2264\u2096 \u22c5) v w \u2192 \u27e8x|v\u27e9 \u2264\u2096 \u27e8y|w\u27e9\n  | vtree_upto_embed_ge n x (v : vec _ n) m y (w : vec _ m) : k \u2264 n \u2192 R k x y \u2192 vec_embed (\u22c5 \u2264\u2096 \u22c5) v w \u2192 \u27e8x|v\u27e9 \u2264\u2096 \u27e8y|w\u27e9\nwhere \"s \u2264\u2096 t\" := (vtree_upto_embed s t).\n\nTheorem afs_vtree_upto_embed :\n           (\u2200n, k \u2264 n \u2192 X n = X k)\n         \u2192 (\u2200n, k \u2264 n \u2192 R n = R k)\n         \u2192 (\u2200n, n \u2264 k \u2192 afs (X n) (R n))\n         \u2192 afs (wft X) (\u22c5 \u2264\u2096 \u22c5).\n```\nwhere\n- `vtree _` is the type of vector-based uniform `A`-indexed rose trees \nas defined in [`Kruskal-Trees/../vtree.v`](https://github.com/DmxLarchey/Kruskal-Trees/blob/main/theories/tree/vtree.v);\n- `afs` is the specialisation of the `af` predicate to sub-types,\nas defined in [`Kruskal-AlmostFull/../af.v`](https://github.com/DmxLarchey/Kruskal-AlmostFull/blob/main/theories/af/af.v);\n- and [`wft X : vtree A \u2192 Prop`](https://github.com/DmxLarchey/Kruskal-Trees/blob/main/theories/tree/vtree.v#L38) \n  is the sub-type of _w(ell) f(ormed) t(rees)_ consisting in those `t : vtree A` such that each sub-tree `\u27e8x|v\u27e9` of `t`\n  satisfies `X n x` where `n` is the arity, ie the length of `v`. So `X` restricts which labels in `A` can be\n  used, not uniformly, but instead, depending on the arity. This variability is critical in the inductive proof;\n- also the relation `R` varies according to the arity but this is discussed in more details below. \nThe nested inductive relation `vtree_upto_embed k R`, also denoted `\u2264\u2096` for short, is intermediate between\n- the product embedding for vectors (cf. [`vec_fall2`](https://github.com/DmxLarchey/Kruskal-Trees/blob/main/theories/vec/vec.v#L481))\nused in a nested way in Higman's theorem;\n- and the homeomorphic embedding for vectors (cf. [`vec_embed`](https://github.com/DmxLarchey/Kruskal-Higman/blob/main/theories/embeddings/vec_embed.v#L102)) \nused in a nested way in Kruskal's theorem. \nLet us analyze the relation `\u27e8x|v\u27e9 \u2264\u2096 \u27e8y|w\u27e9` in a more procedural way (in contrast with its inductive definition):\n1. the first possibility is that `\u27e8x|v\u27e9` already `\u2264\u2096`-embeds into one of the sub-trees `w\u2983_\u2984` of `\u27e8y|w\u27e9`, irrelevant\n  of the arities or values of the roots `x` and `y`. This part is common to the embeddings of Higman's and Kruskal's\n  theorems;\n2. the second possibility applies to small arities (lesser than `k`): in that case, \n  the arities of `v` and `w` are identical (equal to `n`) and `n` is smaller than `k`. \n  Moreover, we must have `v\u2983i\u2984 \u2264\u2096 w\u2983i\u2984` for `i = 1,..,n`, hence this _direct product_ recursively uses\n  `\u2264\u2096` to compare the components of `v` and `w`. Finally the root label `x` must embed into the root label `y` \n  using the relation `R` at index `n`, their common arity. This part mimics the embedding \n  of Higman's theorem, but only for small arities;\n3. the third (and last) possibility applies to large arities (greater than `k`): in that\n  case, the arity `n` of `v`, that `m` of `w`, and `k` must satisfy `k \u2264 n \u2264 m`. Notice that\n  `n \u2264 m` is enforced when stating that `v` vector-embeds into `w` recursively using `\u2264\u2096` to compare \n  the components. Finally, to compare the roots `x` and `y` which may live at different arities, we\n  use the relation `R` at (fixed) index `k`. But any other value above `k` will do since we assume \n  that `R` is stable after index `k`: `R k = R (k+1) = R (k+2) = ...` This part mimics the embedding\n  of Kruskal's theorem, however only for large arities. \nThe proof `afs_vtree_upto_embed`, in plain english that `vtree_upto_embed k R` is AF when all `R\u2080,...,R\u2096` \nare AF, is the cornerstone of the `Kruskal-*` project series and the most technical/difficult part of this series. \n \n"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9745501726884143,
      "result": {
        "original_header": "How difficult is this proof?",
        "type": "Text_excerpt",
        "value": "Those who have read Wim Veldman's account \\[1\\] of Kruskal's tree theorem know\nthat this proof is very involved, possibly even obscure when one is not\nused to intuitionistic set theory where most objects are (encoded as) natural numbers.\nConverting that proof to type theory was a project we completed in 2015-2016 and \n[published as a monolithic Coq development](https://members.loria.fr/DLarchey/files/Kruskal). \nThat former mechanization however was based on _several sub-optimal design choices_ \n(for instance rose trees as nested lists instead of nested vectors) \nor a lack of some abstractions, leading to quite a lot code duplication. \nIt gave a Coq-checkable proof script for a nice statement of the tree theorem \nand presented undeniable improvements over the pen&paper proof \\[1\\]:\n- it lifted the proof to a type theoretic settings with\n  an inductive formulation of almost full relations;\n- it circumvented (and hence solved) the issue of _Church thesis_, \n  which is an axiom used in \\[1\\] to recovered a _stump_ from a proof \n  of almost-fullness of a relation. Beware that we do not give a proof of Church \n  thesis, we simply avoid its usage. \nStill, we could not consider that former monolithic development as a clean enough reference work for \na less painful learning path into the arguably complicated pen&paper intuitionistic \naccount of Kruskal's theorem \\[1\\]:\n- too much proof code (duplication), sub-optimal proof automation;\n- too many edge cases, retrospectively due to bad design choices for \n  the Coq implementation of analysis/evaluation;\n- as a consequence, too strong hypotheses for the statement of \n  eg. what has now become [`veldman_afs_universe`](theories/universe/veldman_universe.v#L111),\n  where, in that former work of ours:\n    - we required the decidability of `X : nat \u2192 rel\u2081 A`, but not of `R : nat \u2192 rel\u2082 A` !!\n    - we had to carry that extra assumption all along the inductive steps of the proof\n      with significant overhead;\n    - this additional assumption was related to the implementation choice \n      of the analysis/evaluations as _Coq functions_;\n    - they are now converted to a _single relation_, and the decidability \n      requirement could then be _dropped_. \nIn the current project, via good factorization, proof scripts cleanup \nand abstraction, we think that we provide a much better reference code\nfor __entering the intimacy of this beautiful proof__, where some novel \ntools are hopefully abstracted at a suitable level.\n \n"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9480307351737791,
      "result": {
        "original_header": "The proof sketch",
        "type": "Text_excerpt",
        "value": "Assuming `k` and relations `R\u2080\u21d3X\u2080,...,R\u2096\u21d3X\u2096` on sub-types of `A`, of which\nneither `k` nor the `R\u2099\u21d3X\u2099` are fixed, and for which we assume AF\nby `afs X\u2099 R\u2099` (ie `af R\u2099\u21d3X\u2099`), we want to show `afs (wft X) (vtree_upto_embed k R)`.\nRecall that the `_ \u21d3 _` notation denotes the _restriction_ of a relation to a sub-type. \nThe first step is to proceed by \"induction\" on the sequence `R\u2080\u21d3X\u2080,...,R\u2096\u21d3X\u2096`,\nbut this is not exactly well-founded induction. It would be more accurate to\nsay that we proceed by induction on the sequence of proofs `afs X\u2080 R\u2080,...,afs X\u2096 R\u2096`\nbut we avoid the details at this stage. Also, we skip the description of the order\nused for this first induction. We just call it _lexicographic order_ on `afs` predicates.\nThis gives us our first (informally stated) induction hypothesis as:\n```\n[IH1]: for any R'\u2080\u21d3X'\u2080,...,R'\u209a\u21d3X'\u209a st (\u2200n, afs X'\u2099 R'\u2099) \n          and which is lex.-smaller that R\u2080\u21d3X\u2080,...,R\u2096\u21d3X\u2096,\n       we have afs (wft X') (vtree_upto_embed p R')\n```\nThen, having this first induction hypothesis at our disposal, we want to show \nBASH2*\nApplying the second constructor of `afs`, the proof goal becomes \nBASH3*\nWe then proceed, in a second (nested) induction, structurally on `t\u2080`. \nAssuming `t\u2080 = \u27e8\u03b1|\u03b3\u27e9` is of arity `n`, we have new induction hypotheses, \nnamely:\nBASH4* \nNow there is a case distinction between `n = 0`, `0 < n < k` and `k \u2264 n`. When\n`n = 0`, ie `t\u2080 = \u27e8\u03b1|\u2205\u27e9` is a _leaf_, there is a separate treatment which is easier\nand we do not discuss it here. In the two other cases, we proceed with a common\noverall sketch but the details differ: \n- [`veldman_higman.v`](theories/universe/veldman_higman.v) describes the case `0 < n < k`;\n- [`veldman_kruskal.v`](theories/universe/veldman_kruskal.v) describes the case `k \u2264 n`. \nIn both cases we build a new sequence of AF relations `R'\u2080\u21d3X'\u2080,...,R'\u209a\u21d3X'\u209a`\nwhere possibly `p` might differ from `k`; it can even be larger. \nHowever, this new sequence is built smaller than `R\u2080\u21d3X\u2080,...,R\u2096\u21d3X\u2096` \nin the lexicographic order mentioned above. These `R'\u2099\u21d3X'\u2099` are proved\nAF using the second induction hypotheses `[IH2]` and consequences of (Coquand's\nformulation of) Ramsey's theorem, ie. closure of AF under binary intersections,\nand also, when `k \u2264 n`, Higman's lemma for `vec_embed`. \nHence, the first induction hypothesis `[IH1]` gives us \n`afs X' (vtree_upto_embed p R')` and we transfer the AF property\nvia\n```coq\nafs (wft X') (vtree_upto_embed p R') \u2192 afs (wft X) (vtree_upto_embed k R)\u2191\u27e8\u03b1|\u03b3\u27e9\n```\nusing a well chosen [_quasi morphism_](https://github.com/DmxLarchey/Quasi-Morphisms) based on an _analysis/evaluation relation_\nbetween trees in `wft X'` and trees in `wft X`. Which concludes the proof sketch.\n \n"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9925292214108007,
      "result": {
        "original_header": "Some key issues that must be refined",
        "type": "Text_excerpt",
        "value": "Some _key properties_ are not discussed in the above sketch: \n1. to be able to build the new sequence `R'\u2080\u21d3X'\u2080,...,R'\u209a\u21d3X'\u209a`, the type `A` needs \n   to be equipped with some structure allowing eg. to nest (trees of) itself \n   from within, a bit like universes in set theory. Of course, an arbitrary type\n   `A` does not have this property. \n    - in \\[1\\], the choice is made for `A` to be `nat`, which is\n      the natural choice for intuitionistic set theory, but this also limits the main \n      result to `nat`, or to types that must be first embedded into `nat`; \n    - we proceed otherwise: in [`universe.v`](theories/universe/universe.v)\n      we first embed an arbitrary type `A` into a richer type `U := universe A` \n     that has the necessary structure for the recursive proofs in \n     [`velman_higman.v`](theories/universe/veldman_higman.v), \n     [`veldman_kruskal`](theories/universe/veldman_kruskal.v) and \n     [`veldman_universe.v`](theories/universe/veldman_universe.v);\n    - then, after the recursive proof, we project in [`veldman_theorem.v`](theories/universe/veldman_theorem.v)\n      the result for `U := universe A` back to the arbitrary type `A` by a \n      simple surjective morphism, a trivial projection since `U` extends `A`.\n2. the lexicographic induction needs extra information about the proof of `afs X\u2099 R\u2099`\n   to be able to make a case distinction when `R\u2099` is a full relation on `X\u2099`, and\n   also when `X\u2099` is an empty sub-type. None of these conditions can be decided. \n   In \\[1\\], _stumps_ are used for this tasks. But while stumps can be computed\n   from `afs X\u2099 R\u2099` in the `Type`-bounded case, on the contrary they\n   cannot be computed in the `Prop`-bounded case:\n    - in \\[1\\], _Church thesis_ is used specifically for this purpose, but\n      the price is of an _assumed axiom_;\n    - in here, we _circumvent_ Church thesis by using the (new ?) notion \n      of _well-foundness up to a projection_ which allows us to access \n      the above information (fullness of `R\u2099` or emptiness of `X\u2099`) \n      in the internals of the recursive proof as soon as the output type does not \n      state properties about this (hidden) information.\n3. the construction of the \"well-chosen quasi-morphism\" is somewhat natural but \n   not trivial at all and its properties can be difficult to establish, \n   depending on which framework is used to implement it (eg `list` or `vec` \n   based rose trees). The [`Kruskal-Finite`](https://github.com/DmxLarchey/Kruskal-Finite) library tools\n   where specifically designed to allow for manageable proofs that those\n   well-chosen quasi-morphisms have finite inverse images.\n \n"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9440433932285073,
      "result": {
        "original_header": "How to enter the recursive proof in more details",
        "type": "Text_excerpt",
        "value": "Our first remark would be: start with _Higman's lemma_ as in \n[`Kruskal-Higman`](https://github.com/DmxLarchey/Kruskal-Higman) which was specifically\ndesigned as a downgrade of the more general cases of the proofs of Higman's theorem \nand Kruskal's tree theorem \\[1\\]. This proof concerns the restricted case of _unary trees_,\nwhich are just lists with an extra label on the empty list. \nOnce that proof of Higman's lemma is understood, \nthe two main innovations for the proof of `afs_vtree_upto_embed` are\nas described above:\n- the use of a type that we call a [_universe_](theories/universe/universe.v) \n  and which is stable under all the type theoretic constructs that occur\n  in the proof;\n- the implementation of the [_easier_ and _more facile_](theories/af/afs_lex.v) lexicographic induction \n  principles using the notion of [_well foundness up to a projection_](theories/wf/wf_upto.v), which\n  allows to circumvent the use of _Church's thesis_. \nThe core and technical part of the proof are two files, \n[`veldman_higman.v`](theories/universe/veldman_higman.v) and [`veldman_kruskal.v`](theories/universe/veldman_kruskal.v),\nof reasonable size (around 700 loc each), sharing the same structure \nas [`af_utree_embed_fun.v`](https://github.com/DmxLarchey/Kruskal-Higman/blob/main/theories/af/af_utree_embed_fun.v)\nfrom [`Kruskal-Higman`](https://github.com/DmxLarchey/Kruskal-Higman), which we insist, \nshould rather be understood first before switching to those two more complicated variations. \nTo be fair, these two files `veldman_{higman,kruskal}.v` rely heavily on a library for \nthe [_insertion_](theories/vec/insert.v) and [_intercalation_](theories/vec/intercal.v) \nof dependent vectors, critically viewed as _dependent inductive relations_, \nand __not__ dependent functions, to avoid the worst setoid hell I ever contemplated. \n"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.877994337819149,
      "result": {
        "type": "Text_excerpt",
        "value": "```\n(**************************************************************)\n(*   Copyright Dominique Larchey-Wendling [*]                 *)\n(*                                                            *)\n(*                             [*] Affiliation LORIA -- CNRS  *)\n(**************************************************************)\n(*      This file is distributed under the terms of the       *)\n(*        Mozilla Public License Version 2.0, MPL-2.0         *)\n(**************************************************************)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "development_status": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "active"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DmxLarchey/Kruskal-Veldman/releases"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DmxLarchey/Kruskal-Veldman/archive/refs/tags/1.3.tar.gz"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/DmxLarchey/Kruskal-Veldman/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DmxLarchey/Kruskal-Veldman"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "What is this library?"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/DmxLarchey/Kruskal-Veldman/issues"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DmxLarchey/Kruskal-Veldman/issues"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": [
          "coq",
          "dependent types",
          "almost full relations",
          "Wim Veldman's proof",
          "Kruskal's tree theorem"
        ]
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Mozilla Public License 2.0",
        "spdx_id": "MPL-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/mpl-2.0",
        "value": "https://api.github.com/licenses/mpl-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v2",
        "spdx_id": "GPL-2.0",
        "type": "File_dump",
        "value": "Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in\n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/https://spdx.org/licenses/MPL-2.0",
        "spdx_id": "https://spdx.org/licenses/MPL-2.0",
        "type": "License",
        "value": "https://spdx.org/licenses/MPL-2.0"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Kruskal-Veldman"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Kruskal-Veldman"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "DmxLarchey"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Coq",
        "size": 203789,
        "type": "Programming_language",
        "value": "Coq"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1443,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Coq",
        "type": "Programming_language",
        "value": "Coq",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "DmxLarchey",
          "type": "User"
        },
        "date_created": "2024-11-22T15:23:47Z",
        "date_published": "2024-11-22T15:25:11Z",
        "description": "For Coq 8.20 and Software Heritage archival.\r\nSome notations priorities have been modified.",
        "html_url": "https://github.com/DmxLarchey/Kruskal-Veldman/releases/tag/1.3",
        "name": "Kruskal-Veldman 1.3",
        "release_id": 186946453,
        "tag": "1.3",
        "tarball_url": "https://api.github.com/repos/DmxLarchey/Kruskal-Veldman/tarball/1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/DmxLarchey/Kruskal-Veldman/releases/186946453",
        "value": "https://api.github.com/repos/DmxLarchey/Kruskal-Veldman/releases/186946453",
        "zipball_url": "https://api.github.com/repos/DmxLarchey/Kruskal-Veldman/zipball/1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "DmxLarchey",
          "type": "User"
        },
        "date_created": "2024-08-28T10:48:53Z",
        "date_published": "2024-08-28T10:50:42Z",
        "description": "Split the `clean` target into `clean` and `mrproper` because of issues with `opam` install on MacOS: the default `find` command is not the GNU one (thx to @joom). See issue https://github.com/DmxLarchey/Kruskal-AlmostFull/issues/4.",
        "html_url": "https://github.com/DmxLarchey/Kruskal-Veldman/releases/tag/1.2",
        "name": "Kruskal-Veldman v1.2",
        "release_id": 172327387,
        "tag": "1.2",
        "tarball_url": "https://api.github.com/repos/DmxLarchey/Kruskal-Veldman/tarball/1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/DmxLarchey/Kruskal-Veldman/releases/172327387",
        "value": "https://api.github.com/repos/DmxLarchey/Kruskal-Veldman/releases/172327387",
        "zipball_url": "https://api.github.com/repos/DmxLarchey/Kruskal-Veldman/zipball/1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "DmxLarchey",
          "type": "User"
        },
        "date_created": "2024-05-23T09:46:33Z",
        "date_published": "2024-05-23T10:10:58Z",
        "description": "The Fan theorem has moved from [`Kruskal-Higman`](https://github.com/DmxLarchey/Kruskal-Higman) to [`Kruskal-Fan`](https://github.com/DmxLarchey/Kruskal-Fan).",
        "html_url": "https://github.com/DmxLarchey/Kruskal-Veldman/releases/tag/v1.1",
        "name": "Kruskal Veldman v1.1",
        "release_id": 157084394,
        "tag": "v1.1",
        "tarball_url": "https://api.github.com/repos/DmxLarchey/Kruskal-Veldman/tarball/v1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/DmxLarchey/Kruskal-Veldman/releases/157084394",
        "value": "https://api.github.com/repos/DmxLarchey/Kruskal-Veldman/releases/157084394",
        "zipball_url": "https://api.github.com/repos/DmxLarchey/Kruskal-Veldman/zipball/v1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "DmxLarchey",
          "type": "User"
        },
        "date_created": "2024-03-15T10:39:43Z",
        "date_published": "2024-03-15T10:42:43Z",
        "description": "First release of the Kruskal-Veldman Coq library",
        "html_url": "https://github.com/DmxLarchey/Kruskal-Veldman/releases/tag/v1.0",
        "name": "Kruskal-Veldman v1.0",
        "release_id": 146753786,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/DmxLarchey/Kruskal-Veldman/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/DmxLarchey/Kruskal-Veldman/releases/146753786",
        "value": "https://api.github.com/repos/DmxLarchey/Kruskal-Veldman/releases/146753786",
        "zipball_url": "https://api.github.com/repos/DmxLarchey/Kruskal-Veldman/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "name": null,
        "type": "Software_application",
        "value": "opam, ocaml",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2025-09-19 01:19:20",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "type": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "non-software"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "What is this library?"
        ],
        "type": "Text_excerpt",
        "value": "To use it directly or via `Kruskal-Theorems`, it can be installed via `opam` after importing the [`coq-opam`](https://github.com/coq/opam)/`released`\npackage:\n```console\nopam repo add coq-released https://coq.inria.fr/opam/released\nopam update\nopam install coq-kruskal-veldman\n```\nNotice that, as with [`Kruskal-AlmostFull`](https://github.com/DmxLarchey/Kruskal-AlmostFull) (and [`Kruskal-Higman`](https://github.com/DmxLarchey/Kruskal-Higman) btw),\nthe library comes in `Prop`-bounded and `Type`-bounded flavors, both generated with the very same code base. To access eg. the `Prop`-bounded version\nin Coq source code, one should import via:\n```coq\nFrom KruskalTrees Require Import idx vec vtree.\nFrom KruskalAfProp Require Import almostfull.\nFrom KruskalVeldmanProp Require Import vtree_embed veldman_theorem.\n```\n\nWhen the intention is to review the code base of `Kruskal-Veldman` with the help of an IDE for the Coq proof assistant, \nthe procedure is a bit different. Then it is advised to download the current code base, either via\nthe [latest release](https://github.com/DmxLarchey/Kruskal-Veldman/releases), or cloning the `main` branch\nhere, and unpacking it in say the `Kruskal-Veldman` directory.\n```console\ngit clone https://github.com/DmxLarchey/Kruskal-Veldman.git\ncd Kruskal-Veldman\n```\nThen one should install the dependencies via:\n```console\nopam install . --deps-only\n```\nand then compile the eg. `Type`-bounded version of the library with:\n```console\nmake type\n```\nwhile the `Prop`-bounded version could be obtained via `make prop`. Notice that only one\ncan be compiled in a given directory because the code base in the same, except from\none selector file `base/base_implem.v` which is copied either from [`implem/prop.v`](theories/implem/prop.v)\nor [`implem/type.v`](theories/implem/type.v) depending on `make prop` or `make type`.\n\nThen one can review the code base with say [`CoqIDE`](https://coq.inria.fr/download) \nor [`vscoq`](https://github.com/coq-community/vscoq). But see below for a detailed\nintroduction on the proof implemented here.\n"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "version": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "1.3"
      },
      "source": "https://raw.githubusercontent.com/DmxLarchey/Kruskal-Veldman/main/codemeta.json",
      "technique": "code_parser"
    }
  ]
}