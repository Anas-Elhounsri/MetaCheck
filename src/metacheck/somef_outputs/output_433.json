{
  "authors": [
    {
      "confidence": 1,
      "result": {
        "name": "Qianqian Fang <q.fang at neu.edu>",
        "type": "Agent",
        "value": "Qianqian Fang <q.fang at neu.edu>"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/package.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "German Primate Center",
        "email": "pier.morel@gmail.com",
        "identifier": "https://orcid.org/0000-0003-0984-7016",
        "type": "String",
        "value": "Pierre Morel"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/gramm/paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/eurypt/CAPulator"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "git+https://github.com/fangq/jsonlab.git"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/package.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/piermorel/gramm"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/gramm/paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# How to contribute\n\n - **Questions**: If you have a question on the use of gramm, first look through the documentation and in particular through examples.m and the corresponding [html/examples.html](http://htmlpreview.github.io/?https://github.com/piermorel/gramm/blob/master/html/examples.html) file to see if there is not already a recipe for what you want to achieve. If not then take a look at [closed issues](https://github.com/piermorel/gramm/issues?q=is%3Aissue+is%3Aclosed) on GitHub. Finally, if you can not find an answer there, do not hesitate to create a new [issue](https://github.com/piermorel/gramm/issues) with your question: they act as a sort of FAQ.\n - **Bugs**: Known bugs are left as [open issues](https://github.com/piermorel/gramm/issues) on GitHub, if you find a new one, please report it there and include a minimal working example demonstrating how the gramm results differ from what is expected.\n - **Enhancements**: You can propose enhancements by participating in this already existing [feature wishlist](https://github.com/piermorel/gramm/issues/50) thread that serves as a more general discussion and outlines what is planned next. For very specific/simple enhancements you can create separate issues on GitHub.\n - **Modifications**: If you want to extend the functionality of gramm, you are welcome to do so! Adding new ```geom_``` or ```stat_``` functions can be relatively easy due to their modular conception, while more in-depth changes might require some discussions on the internals of gramm. For discussion create a new issue or if your modifications are ready just submit a pull request. For new features, an addition to examples.m demonstrating their use is welcome. Additionally, you can make sure that your changes do not break anything by running examples.m in its entirety and comparing its output to the figures in the ```html/``` folder. I will review the code and functionality and eventually discuss/make changes to your commit before merging when it is working satisfactorily."
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/gramm/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-01-22T13:11:37Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2018-01-31"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/gramm/paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_published": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2018-01-31"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/gramm/paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2025-01-24T20:36:24Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2018-01-31"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/gramm/paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Code to calculate compound nerve action potentials efficiently & to reproduce the analysis in the manuscript entitled \"Computational Models of Compound Nerve Action Potentials: Efficient Filter-Based Methods to Quantify Effects of Tissue Conductivities, Conduction Distance, and Nerve Fiber Parameters\""
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/DESCRIPTION",
        "type": "String",
        "value": "JSONLab is a free and open-source implementation of a JSON/UBJSON/MessagePack \n encoder and a decoder in the native MATLAB language. It can be used to convert \n a MATLAB data structure (array, struct, cell, struct array and cell array) into\n JSON/UBJSON formatted string, or decode a JSON/UBJSON/MessagePack file into \n MATLAB data. JSONLab supports both MATLAB and GNU Octave (a free MATLAB clone)."
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Compact, portable, robust JSON/binary-JSON encoder/decoder for MATLAB/Octave"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/package.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Gramm is a complete data visualization toolbox for Matlab. It provides an easy to use and high-level interface to produce publication-quality plots of complex data with varied statistical visualizations. Gramm is inspired by R's ggplot2 library."
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/gramm/paper/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 0.9232496664918767,
      "result": {
        "type": "Text_excerpt",
        "value": "This repository contains all the code necessary to generate and plot the figures in, \"Computational Models of Compound Nerve Action Potentials: Efficient Filter-Based Methods to Quantify Effects of Tissue Conductivities, Conduction Distance, and Nerve Fiber Parameters\", *except* for the following data files, which are uploaded to a data repository instead (available at https://doi.org/10.7924/r4pc3624h ):\n\tfiles that belong in bin/ folder\n\t\tbin/template_data_20221004_0_2022100409.mat\n\t\tbin/template_data_20221004_0_2022100410.mat\n\tfiles that belong in results/ folder\n\t\tresults/in_vivo_data_table.mat\n\t\tresults/myelinated_fiber_CNAPs_across_materials.mat\n\t\tresults/unmyelinated_fiber_CNAPs_across_materials.mat \n\nThis repository does not provide code to run NEURON or to generate action potential templates (e.g., to reproduce the brute force analysis); instead, it is necessary to use the ASCENT software version released with the published manuscript to simulate nerve recordings and to generate action potential templates. Access to a computing cluster and a COMSOL license are also required. Instructions for using this functionality of ASCENT are available on the ASCENT webpage. \nThe list below describes each of the key code files. Data files include in vivo maximal compound nerve action potential signals (CNAPs) and associated metadata from rat cervical vagus nerve, as well as computationally generated CNAPs. For details on how the data were generated, please see the associated manuscript. \nTo run the code, set the current working directory to be src, then run RUN_simulate_CAP.m. That is the master script that runs everything, and the entire analysis that it conducts can be run on a normal desktop computer with a MATLAB license (R2019b or later). RUN_simulate_CAP.m calls the methods of CAPulator.m, which in turn takes its inputs from the JSON files present in code/JSON_input_params. Changing the parameters in those files enables changing the simulation (e.g., changing the fiber diameters present, the conduction distance, etc.).  \nBelow is a description of the key files for conducting the analysis in the manuscript:\n- src/RUN_simulate_CAP.m: This generates the data for and plots every figure in the main manuscript text. It simulates CAP signals across different conduction distances and fiber parameters. The only exception is that it does not run the simulations across tissue conductivity values; instead, the output of those is loaded here and plotted. To run a subset of the simulations/data, edit the zeros and ones in the 'function_run_status_and_handle' variable. \nThe electric potentials for the recording sensitivity maps were extracted via COMSOL. While a more general version of src/CAPulator.m is able to use COMSOL with Livelink for MATLAB to extract potentials from COMSOL files, the version of src/CAPulator.m shared for review does not require a COMSOL license or MATLAB with LiveLink. Instead, the potentials are extracted for and stored in the following files:\n- ../bin/default_volume_conductor_potentials.mat\n- ../bin/tuned_volume_conductor_potentials.mat\n- ../bin/tuned_volume_conductor_potentials_ch2.mat\n- ../bin/tuned_volume_conductor_potentials_ch3.mat \n"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/README.txt",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/eurypt/CAPulator/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/eurypt/CAPulator/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "eurypt/CAPulator"
      },
      "technique": "GitHub_API"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "description",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/DESCRIPTION"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/DESCRIPTION",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "package.json",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/package.json"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/package.json",
      "technique": "file_exploration"
    }
  ],
  "has_package_file": [
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/DESCRIPTION",
        "type": "Url",
        "value": "DESCRIPTION"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "package.json"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/package.json",
      "technique": "code_parser"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/genlog.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/gendocs.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "homepage": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://neurojson.org/jsonlab"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/DESCRIPTION",
      "technique": "code_parser"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "https://doi.org/10.5281/zenodo.594625"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/gramm/paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/eurypt/CAPulator/issues"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/fangq/jsonlab/issues"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/package.json",
      "technique": "code_parser"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": [
          "data visualization",
          "grouped data",
          "visual analytics",
          "plotting",
          "matlab",
          "statistical graphics"
        ]
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/gramm/paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "type": "License",
        "value": "GPL-3.0-or-later OR BSD-3-Clause"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/package.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2015 Pierre Morel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/gramm/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/MIT",
        "spdx_id": "MIT",
        "type": "License",
        "value": "MIT"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/gramm/paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CAPulator"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "eurypt"
      },
      "technique": "GitHub_API"
    }
  ],
  "package_id": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jsonlab"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/package.json",
      "technique": "code_parser"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 840831,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 151624,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 12765,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1882,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/eurypt/CAPulator/master/README.txt"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2025-09-19 01:47:35",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "version": [
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/DESCRIPTION",
        "type": "String",
        "value": "2.9.8"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Release",
        "value": "2.9.8"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/jsonlab/package.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "v2.23"
      },
      "source": "https://raw.githubusercontent.com/eurypt/CAPulator/master/src/external_dependencies/gramm/paper/codemeta.json",
      "technique": "code_parser"
    }
  ]
}