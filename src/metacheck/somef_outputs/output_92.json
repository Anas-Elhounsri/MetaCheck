{
  "application_domain": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Web"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "authors": [
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/ropensci/vcr/main/DESCRIPTION",
        "type": "Agent",
        "value": [
          {
            "email": "myrmecocystus@gmail.com",
            "value": "Scott Chamberlain"
          }
        ]
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "myrmecocystus@gmail.com",
        "identifier": "https://orcid.org/0000-0003-1444-9135",
        "type": "String",
        "value": "Scott Chamberlain"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://orcid.org/0000-0003-2542-2202",
        "type": "String",
        "value": "Aaron Wolen"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://orcid.org/0000-0002-2815-0399",
        "type": "String",
        "value": "Ma\u00eblle Salmon"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://orcid.org/0000-0002-6738-9845",
        "type": "String",
        "value": "Daniel Possenriede"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "hadley@posit.co",
        "type": "String",
        "value": "Hadley Wickham"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ropensci/vcr"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ropensci/vcr/"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ropensci/vcr/"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# CONTRIBUTING #\n\n### Bugs?\n\n* Submit an issue on the [Issues page](https://github.com/ropensci/vcr/issues)\n\n### Code contributions\n\n* Fork this repo to your Github account\n* Clone your version on your account down to your machine from your account, e.g., `git clone https://github.com/<yourgithubusername>/vcr.git`\n* Make sure to track progress upstream (i.e., on our version of `vcr` at `ropensci/vcr`) by doing `git remote add upstream https://github.com/ropensci/vcr.git`. Before making changes make sure to pull changes in from upstream by doing either `git fetch upstream` then merge later or `git pull upstream` to fetch and merge in one step\n* Make your changes (bonus points for making changes on a new feature branch)\n* Please do write a test(s) for your changes if they affect code and not just docs\n* Push up to your account\n* Submit a pull request to home base at `ropensci/vcr`\n\n### Also, check out our [discussion forum](https://discuss.ropensci.org)\n"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/.github/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2014-12-09T17:38:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2025-07-29T19:05:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Record and replay HTTP requests"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/ropensci/vcr/main/DESCRIPTION",
        "type": "String",
        "value": "Record test suite 'HTTP' requests and replays them during\n    future runs. A port of the Ruby gem of the same name\n    (<https://github.com/vcr/vcr/>). Works by recording real 'HTTP'\n    requests/responses on disk in 'cassettes', and then replaying\n    matching responses on subsequent requests."
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Record test suite 'HTTP' requests and replays them during future runs. A port of the Ruby gem of the same name (<https://github.com/vcr/vcr/>). Works by recording real 'HTTP' requests/responses on disk in 'cassettes', and then replaying matching responses on subsequent requests."
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 0.8329699129768443,
      "result": {
        "original_header": "vcr <img src=\"man/figures/logo.png\" align=\"right\" height=\"120\" alt=\"\" />",
        "type": "Text_excerpt",
        "value": "{vcr} records and replays HTTP requests so you can test your API package\nwith speed and confidence. It makes your tests independent of your\ninternet connection (so they work on CRAN!) and because your tests get\nmuch much faster, you can write even more, increasing the coverage of\nyour package. {vcr} works with {crul}, {httr} and {httr2}. \n"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8329604939503227,
      "result": {
        "original_header": "Meta",
        "type": "Text_excerpt",
        "value": "- Please [report any issues or\n  bugs](https://github.com/ropensci/vcr/issues)\n- License: MIT\n- Get citation information for `vcr` in R doing\n  `citation(package = 'vcr')`\n- Please note that this package is released with a [Contributor Code of\n  Conduct](https://ropensci.org/code-of-conduct/). By contributing to\n  this project, you agree to abide by its terms.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ropensci/vcr/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 14
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ropensci/vcr/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ropensci/vcr"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vcr "
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "description",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ropensci/vcr/main/DESCRIPTION"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/DESCRIPTION",
      "technique": "file_exploration"
    }
  ],
  "has_package_file": [
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/ropensci/vcr/main/DESCRIPTION",
        "type": "Url",
        "value": "DESCRIPTION"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/DESCRIPTION",
      "technique": "code_parser"
    }
  ],
  "homepage": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://books.ropensci.org/http-testing/"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://docs.ropensci.org/vcr/"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/DESCRIPTION",
      "technique": "code_parser"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vcr"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "vcr <img src=\"man/figures/logo.png\" align=\"right\" height=\"120\" alt=\"\" />"
        ],
        "type": "Text_excerpt",
        "value": "``` r\n# Install the latest released version from CRAN\ninstall.packages(\"vcr\")\n\n# Or install the development version\n# from R-universe\ninstall.packages(\n  \"vcr\",\n  repos = c(\"https://ropensci.r-universe.dev\", \"https://cloud.r-project.org\")\n)\n\n# Or from GitHub:\n# install.packages(\"pak\")\npak::pak(\"ropensci/vcr\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ropensci/vcr/issues"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ropensci/vcr/issues"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ropensci/vcr/issues"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mocking, r, r-package, rstats, testing, unit-testing, vcr"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": [
          "http",
          "https",
          "API",
          "web-services",
          "curl",
          "mock",
          "mocking",
          "http-mocking",
          "testing",
          "testing-tools",
          "tdd"
        ]
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "File_dump",
        "value": "# MIT License\n\nCopyright (c) 2025 vcr authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/LICENSE.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/ropensci/vcr/main/DESCRIPTION",
        "type": "String",
        "value": "MIT + file LICENSE"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/https://spdx.org/licenses/MIT",
        "spdx_id": "https://spdx.org/licenses/MIT",
        "type": "License",
        "value": "https://spdx.org/licenses/MIT"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ropensci/vcr/main/man/figures/logo.png"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vcr"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vcr: Record 'HTTP' Calls to Disk"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ropensci"
      },
      "technique": "GitHub_API"
    }
  ],
  "package_id": [
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/ropensci/vcr/main/DESCRIPTION",
        "type": "String",
        "value": "vcr"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/DESCRIPTION",
      "technique": "code_parser"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 200114,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 626,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "type": "Programming_language",
        "url": "https://r-project.org",
        "value": "R",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ropensci/vcr/main/README.Rmd"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ropensci/vcr/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sckott",
          "type": "User"
        },
        "date_created": "2025-07-21T18:40:01Z",
        "date_published": "2025-07-23T21:31:56Z",
        "description": "## BREAKING CHANGES\r\n\r\n* `vcr_last_error()` has been removed (#488).\r\n* `vcr_log_file()` and `vcr_log_info()` have been removed.\r\n* The `verbose_errors` errors options is no longer supported.\r\n* `clean_outdated_http_interactions` has been removed; now all you need to do is set `re_record_interval`.\r\n* `check_cassette_names()` has been deprecated since it can't be implemented 100% correctly and diagnoses a relatively rare problem (#166).\r\n* `RequestHandler` and its subclasses are no longer exported.\r\n* Internal `real_http_connections_allowed()` is no longer exported and has been removed. (#409)\r\n* Internal `Request` and `VcrResponse` classes are no longer exported and have been removed.\r\n* `HTTPInteractionList` is no longer exported; it's an internal implementation detail.\r\n* The `uri_parser` option is no longer supported.\r\n* `vcr_configuration(allow_http_connections_when_no_cassette)` is no longer supported. It hasn't worked for a while.\r\n* `vcr_configuration(quiet = FALSE)` is no longer supported. If you need more information about what's happening, turn on logging.\r\n* `str_splitter()` has been removed; it was accidentally exported as it's not part of the core vcrs API.\r\n* `cassettes()` are now a stack. The most important consequence of this is that `eject_cassette()` can only remove the most recently inserted cassette.\r\n* `as.cassette()` has been removed. It's not used, and not needed anymore.\r\n* `cassettes()` no longer has `on_disk` or `verb` arguments and now only ever lists currently active cassettes.\r\n\r\n## NEW FEATURES\r\n\r\n* The default request matcher now uses method, uri, and body if present.\r\n* New function `local_cassette()` to create a local cassette that is used for the current function scope and ejected on exit - this is now the suggested way to use vcr in tests.\r\n* New functions `vcr_configure_log()` and `local_vcr_configure_log()` to configure logging; the former sets logging for the R session, while the latter sets logging for the current function scope.\r\n* `local_casette()` and `use_cassette()` set env vars `VCR_IS_RECORDING` and `VCR_IS_REPLAYING` and provide helpers `is_recording()` and `is_replaying()`. (#520)\r\n* New `current_cassette_recording()` and `current_cassette_replaying()` tell you if the current cassette is recording or replaying (or neither or both). (#505)\r\n* New `vcr_last_request()` and `vcr_last_response()` to get last request and response respectively (#488).\r\n* The vignettes have been updated for all the new changes and generally polished.\r\n* New `insert_example_cassette()` makes it easier to use vcr in examples (#309).\r\n* New `setup_knitr()` makes it easier to use vcr from within a vignette (#308).\r\n* The `Authorization` header is never written to disk. (#450)\r\n* The request body and headers are only written to disk if actually used for matching (#417).\r\n* Writing files to disk now works with out any additional config. Files are saved in a directory called `{cassette-name}-files` inside of the cassette directory. You can override this default with `vrc_configure(write_disk_path)`.\r\n* New `body_json` request matcher that compares the parsed JSON. This both ignores differences in the textual representation of the JSON and gives more informative messages when requests don't match. (#421)\r\n* Raw bodies are now automatically gzipped before being converted to base64 (#343).\r\n* The default path is now `tests/testthat/_vcr`. This should not affect existing packages that used `use_vcr()` because these set up a helper that sets the default directory with `vcr_configure()` (#395).\r\n* New function `local_vcr_configure()` allows you to temporarily affect vcr configuration. (#285)\r\n* New serializer option `qs2`, using the `qs2` package, generating compressed binary cassette files that are smaller than YAML or JSON files. `compressed` will have the greatest proportional disk space savings as cassettes have more data in them. (#396)\r\n\r\n## New Contributors\r\n* @hadley made their first contribution in https://github.com/ropensci/vcr/pull/278\r\n\r\n**Full Changelog**: https://github.com/ropensci/vcr/compare/v1.7.0...v2.0.0",
        "html_url": "https://github.com/ropensci/vcr/releases/tag/v2.0.0",
        "name": "vcr v2.0",
        "release_id": 234109294,
        "tag": "v2.0.0",
        "tarball_url": "https://api.github.com/repos/ropensci/vcr/tarball/v2.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/vcr/releases/234109294",
        "value": "https://api.github.com/repos/ropensci/vcr/releases/234109294",
        "zipball_url": "https://api.github.com/repos/ropensci/vcr/zipball/v2.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sckott",
          "type": "User"
        },
        "date_created": "2025-03-04T15:06:45Z",
        "date_published": "2025-03-08T03:24:46Z",
        "description": "### MINOR IMPROVEMENTS\r\n\r\n* Change maintainer email address (#274)\r\n\r\n**Full Changelog**: https://github.com/ropensci/vcr/compare/v1.6.0...v1.7.0",
        "html_url": "https://github.com/ropensci/vcr/releases/tag/v1.7.0",
        "name": "vcr v1.7.0",
        "release_id": 204509223,
        "tag": "v1.7.0",
        "tarball_url": "https://api.github.com/repos/ropensci/vcr/tarball/v1.7.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/vcr/releases/204509223",
        "value": "https://api.github.com/repos/ropensci/vcr/releases/204509223",
        "zipball_url": "https://api.github.com/repos/ropensci/vcr/zipball/v1.7.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sckott",
          "type": "User"
        },
        "date_created": "2024-07-23T20:41:50Z",
        "date_published": "2024-07-23T21:37:52Z",
        "description": "### NEW FEATURES\r\n\r\n* `vcr` now supports `httr2` in addition to `httr` and `crul`. (#237) (#268)\r\n* `vcr` now supports async http requests with `crul` (w/ `crul` v1.5 or greater). no change was required in `vcr` for this to happen. a PR was merged in `crul` to hook into `vcr`. there's no support for async in `httr` as that package does not do any async and no support in `httr2` because `req_perform_parallel` does not have a mocking hook as does `req_perform` (#246)\r\n\r\n### BUG FIXES\r\n\r\n* Ports in URLs (e.g., 8000) were being accidentally stripped. Fixed now (#264) (#266)\r\n\r\n### MINOR IMPROVEMENTS\r\n\r\n* Add link to DESCRIPTION file for packge documentation. thanks @olivroy (#265)\r\n* Use `_PACKAGE` syntax for package level doc (#263)",
        "html_url": "https://github.com/ropensci/vcr/releases/tag/v1.6.0",
        "name": "vcr v1.6.0",
        "release_id": 166795944,
        "tag": "v1.6.0",
        "tarball_url": "https://api.github.com/repos/ropensci/vcr/tarball/v1.6.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/vcr/releases/166795944",
        "value": "https://api.github.com/repos/ropensci/vcr/releases/166795944",
        "zipball_url": "https://api.github.com/repos/ropensci/vcr/zipball/v1.6.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sckott",
          "type": "User"
        },
        "date_created": "2022-11-17T18:19:04Z",
        "date_published": "2022-11-17T18:51:40Z",
        "description": "### NEW FEATURES\r\n\r\n* Added @dpprdan as an author; changed all ctb to aut (@maelle @aaronwolen) (#258)\r\n\r\n### MINOR IMPROVEMENTS\r\n\r\n* `use_vcr()` now creates a test helper file called `helper-vcr.R` instead of `setup-pkgname.R`. \r\n  We are reverting the change from version 0.6.0 and now recommend the use of `helper-*.R` again, so that the vcr setup [is loaded with `devtools::load_all()`](https://testthat.r-lib.org/reference/test_dir.html#special-files). \r\n  That way your vcr-enabled tests also work when run interactively (#244) (#256)\r\n* default git branch changed from master to main (#253)\r\n* update example packages in the README (#257)\r\n* vcr no longer requires compilation because replaced the single C++ function with a pure R equivalent\r\n\r\n### BUG FIXES\r\n\r\n* roll back a change from the previous CRAN version that removed use of an internal function (`body_from`) (#249) (#252)",
        "html_url": "https://github.com/ropensci/vcr/releases/tag/v1.2.0",
        "name": "vcr v1.2.0",
        "release_id": 83445020,
        "tag": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/ropensci/vcr/tarball/v1.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/vcr/releases/83445020",
        "value": "https://api.github.com/repos/ropensci/vcr/releases/83445020",
        "zipball_url": "https://api.github.com/repos/ropensci/vcr/zipball/v1.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sckott",
          "type": "User"
        },
        "date_created": "2022-11-04T13:51:50Z",
        "date_published": "2022-11-06T20:06:48Z",
        "description": "### MINOR IMPROVEMENTS\r\n\r\n* request matching was sensitive to escaping special characters, that's been fixed (#240) (#247) thanks to @KevCaz\r\n* `vcr_test_path` fix so that it looks for the `testthat` dir instead of `tests` (#242) (#243) thanks to @dpprdan\r\n* fix broken link given in error suggestion (#239) thanks to @maelle\r\n",
        "html_url": "https://github.com/ropensci/vcr/releases/tag/v1.1.0",
        "name": "vcr v1.1.0",
        "release_id": 82207394,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/ropensci/vcr/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/vcr/releases/82207394",
        "value": "https://api.github.com/repos/ropensci/vcr/releases/82207394",
        "zipball_url": "https://api.github.com/repos/ropensci/vcr/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sckott",
          "type": "User"
        },
        "date_created": "2021-05-31T17:44:20Z",
        "date_published": "2021-05-31T17:44:25Z",
        "description": "### BUG FIXES\n\n* fix to `vcr_test_path()` to find root package path correctly (#235) (#236)\n\n",
        "html_url": "https://github.com/ropensci/vcr/releases/tag/v1.0.2",
        "name": "vcr v1.0.2",
        "release_id": 43867542,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/ropensci/vcr/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/vcr/releases/43867542",
        "value": "https://api.github.com/repos/ropensci/vcr/releases/43867542",
        "zipball_url": "https://api.github.com/repos/ropensci/vcr/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sckott",
          "type": "User"
        },
        "date_created": "2021-05-22T00:27:32Z",
        "date_published": "2021-05-22T03:50:38Z",
        "description": "### NEW FEATURES\r\n\r\n* `check_cassette_names()` gains `allowed_duplicates` parameter to allow duplicate cassette names; we typically advise users not to use duplicate cassette names, but there are cases where you may want to share cassettes across tests (#227)\r\n* `vcr_configure()` gains `filter_query_parameters` parameter for filtering out query parameters so they don't show up in the recorded request on disk (#212)\r\n* `use_vcr()`: now sets a mimimum vcr version, which is usually the latest (stable) version on CRAN. You can of course easily remove or change the version requirement yourself after running it (#214)\r\n* `vcr_configure()` gains `warn_on_empty_cassette` parameter: Should a warning be thrown when an empty cassette is detected? Empty cassettes are cleaned up (deleted) either way (#224) thanks @llrs and @dpprdan\r\n* `vcr_configure()` gains `quiet` parameter: suppress any messages from both vcr and webmockr (#226) (#25)\r\n* `vcr_configure()` gains new option `filter_sensitive_data_regex`; now `filter_sensitive_data` is for fixed string matching, while `filter_sensitive_data_regex` is for regex based matching (#222) thanks @tomsing1 for reporting\r\n* gains package import `rprojroot`\r\n\r\n### MINOR IMPROVEMENTS\r\n\r\n* `filter_sensitive_data` option now strips leading and trailing single and double quotes from strings before being used IN CASE a user accidentally quotes a secret - logic being that even though a secret may have a single or double quote in it, its very unlikely that it would have both a leading and trailing quote (single or double) (#221)\r\n\r\n### Documentation\r\n\r\n* new vignette explaining the design of the vcr package (also can be found in the HTTP Testing book) (#232) (#233)\r\n* no user facing change - but vignettes moved into man/rmdhunks so that they can be pulled into the HTTP Testing book easily (#209) (#216)\r\n* fix in configuration vignette to clarify a `filter_request_headers` example  (#215) thanks @maelle\r\n* docs update (#33) (#217)\r\n\r\n### BUG FIXES\r\n\r\n* `filter_request_headers` was unfortunately adding a request header to the request written to disk when the header did not exist; now fixed (#213)\r\n* bug in internal function `is_base64()`; `strsplit()` needed `useBytes=TRUE` (#219)\r\n* `filter_sensitive_data` was not working when strings contained regex characters; fixed, and see also above new config variable for regex specific filtering  (#222) thanks @tomsing1 for reporting\r\n* `vcr_test_path()` should now correctly set paths (#225) (#228) (#229) (#230)\r\n",
        "html_url": "https://github.com/ropensci/vcr/releases/tag/v1.0.0",
        "name": "vcr v1.0.0",
        "release_id": 43402740,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/ropensci/vcr/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/vcr/releases/43402740",
        "value": "https://api.github.com/repos/ropensci/vcr/releases/43402740",
        "zipball_url": "https://api.github.com/repos/ropensci/vcr/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sckott",
          "type": "User"
        },
        "date_created": "2020-12-12T17:14:58Z",
        "date_published": "2020-12-12T17:15:02Z",
        "description": "### NEW FEATURES\r\n\r\n* We have a new vcr contributor! @maelle (#198)\r\n* Gains a new serializer: JSON. You can use this serializer by setting globally `vcr_configure(serialize_with=\"json\")` or per cassette `use_cassette(..., serialize_with=\"json\")`. The JSON serializer uses `jsonlite` under the hood. Note that we by default do not write JSON to disk preserving newlines; that is the JSON is all on one line. You can use pretty printing by setting `json_pretty` in `vcr_configure()`. As part of this change, factored out new R6 class `Serializer` from which both JSON and YAML serializers inherit (#32)\r\n* Gains two new configuration options for managing secrets: `filter_request_headers` and `filter_response_headers`. These are implemented differently than `filter_sensitive_data`. The two new filters do simple value replacement or complete removal of request or response headers, whereas `filter_sensitive_data` uses regex to replace strings anywhere in the stored request/response. See the \"Configure vcr\" vignette for details (#182)\r\n* request matching: `host` and `path` now work (#177) (see also #70)\r\n* In previous versions of vcr the `insert_cassette()`/`eject_cassette()` workflow did not work because the webmockr triggers required only worked when using `use_cassette()`. This has been fixed now so you can use `use_cassette()`, passing a code block to it, or run `insert_cassette()` then run any code, then when finished run `eject_cassette()`.  (#24) thanks @Robsteranium for the nudge, may not have fixed this without it\r\n* improve debugging experience: new vignette \"Debugging your tests that use vcr\", including new function `vcr_test_path()` - which is now used in `use_vcr()` so that the correct path to tests is used when running tests both interactively and non-interactively (#192) (#193)\r\n* Dependencies: dropped `lazyeval` from Imports; `withr` added to Suggests; minimum `webmockr` version now `v0.7.4`\r\n* In README, point to rOpenSci code of conduct rather than file in repo\r\n* Gains function `skip_if_vcr_off()` to use in tests to skip a test if vcr is turned off (#191) (#195)\r\n\r\n### MINOR IMPROVEMENTS\r\n\r\n* slight factor out of some code in YAML serializer to use elsewhere (#203) (#204)\r\n* serializers: drop `$deserialize_string()` method as was not used - rename `$deserialize_path()` method to just `$deserialize()` (#189)\r\n* serializers: with the new JSON serializer, documentation added to `?vcr_configure` and `?use_cassette` stating that you can have different cassettes with the same name as long as they use different serializers (and then have different file extensions). if you want to change serializers but do not want to keep the old cassette with the old serializer make sure to clean up the old file (#188)\r\n* now using GitHub Actions - remove Travis-CI and Appveyor (#175)\r\n* fixes for tests not being idempotent (#174) thanks @alex-gable\r\n* clean up `UnhandledHTTPRequestError` - remove unused variable `cassette` in `$initialize()` method (always use `current_cassette()` to get the cassette being used) (#163) tip from @aaronwolen\r\n* A change in latest webmockr release (`v0.7.4`) allowed for changes here to return an httr `response` object that more closely matches what httr returns in a real HTTP request. Before this the major problem was, assuming `x` is a httr `response` object, `x$request` was a `RequestSignature` object (from `webmockr`), whereas the class in a real httr response object is `request`  (#132)\r\n* Re-factor of `Cassette` class greatly simplifying webmockr HTTP request stubbing (#98) (#173) big thanks to @alex-gable !\r\n* `HTTPInteractionList` improvement: in checking for request matches against those on disk we were checking all requesets in a cassette - faster to check and stop when a match found. Using new factored out function to do this checking that stops when first match found. Many more tests added to check this behavior (#69)\r\n* base64 encoded output in cassettes when using YAML serializer are now wrapped to approximately 80 character width (triggered when `preserve_exact_body_bytes=TRUE`) - this makes cassettes longer however. Implementing this brought in use of `cpp11` (first use of C++ in vcr). This makes base64 encoded response body recording consistent with how vcr's in other programming languages do it  (#41)\r\n* `decode_compressed_response` option removed from `Cassette` class - wasn't being used and won't be used (#30)\r\n* add additional examples to `VcrResponse` docs showing what the `update_content_length_header()` does (#29)\r\n* `use_vcr()` changes: 1) now creates a test helper file called `setup-pkgname.R` instead of `helper-pkgname.R`; 2) now by default sets directory for fixtures using `dir = vcr_test_path(\"fixtures\")` instead of `dir = \"../fixtures\"`. See other news item about `vcr_test_path`\r\n\r\n### DOCUMENTATION\r\n\r\n* better description of vcr at top of README (#198)\r\n* delete unused docs folder in repository (docs built elsewhere) (#210)\r\n* tell users that explicitly loading vcr is required in your test setup (#185) (#186) thanks @KevCaz\r\n* added explanation of where and how `webmockr` is integrated in `Cassette` class - see section \"Points of webmockr integration\" in `?Cassette` (#176) (see also #173)\r\n* improved getting started and protecting secrets sections in the introduction vignette (#170) (#172) thanks @DaveParr\r\n* add to introduction vignette a section titled \"how to ensure tests work in the absence of a real API key\" (#137) (#194)",
        "html_url": "https://github.com/ropensci/vcr/releases/tag/v0.6.0",
        "name": "vcr v0.6.0",
        "release_id": 35191285,
        "tag": "v0.6.0",
        "tarball_url": "https://api.github.com/repos/ropensci/vcr/tarball/v0.6.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/vcr/releases/35191285",
        "value": "https://api.github.com/repos/ropensci/vcr/releases/35191285",
        "zipball_url": "https://api.github.com/repos/ropensci/vcr/zipball/v0.6.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sckott",
          "type": "User"
        },
        "date_created": "2020-03-31T15:10:11Z",
        "date_published": "2020-03-31T15:12:15Z",
        "description": "### NEW FEATURES\r\n\r\n* Error messages when tests using vcr fail are now simpler, primarily to reduce the space error messages take up. The user can toggle whether they get the new simplified error messages or the older format more verbose messages using the `verbose_errors` setting in the `vcr_configure()` function. In addition, `vcr_last_error()` gives the last full error, but that doesn't help in non-interactive mode; if in non-interactive mode, which most users will be in when running the entire test suite for a package, you can set an environment variable (`VCR_VERBOSE_ERRORS`) to toggle this setting (e.g.,\r\n`Sys.setenv(VCR_VERBOSE_ERRORS=TRUE); devtools::test()`) (#121) (#154)\r\n\r\n### MINOR IMPROVEMENTS\r\n\r\n* changed `write_disk_path` handling internally to not run it through `normalizePath` before recording it to the cassette; passing the path through `normalizePath` was leading to the full path recorded in the cassette, which means in a package testing context that a test that uses a file on disk will (likely) only work on the machine the cassette was first created on. with relative paths in a package context, a test that has a file written on disk should now work in different testing contexts (locally, and various continuous integration platforms) (#135) (#166)\r\n* added a bit of documentation about large files created when using vcr, and how to ignore them if needed within `.Rinstignore` and/or `.Rbuildignore` (#164)",
        "html_url": "https://github.com/ropensci/vcr/releases/tag/v0.5.4",
        "name": "vcr v0.5.4",
        "release_id": 25050991,
        "tag": "v0.5.4",
        "tarball_url": "https://api.github.com/repos/ropensci/vcr/tarball/v0.5.4",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/vcr/releases/25050991",
        "value": "https://api.github.com/repos/ropensci/vcr/releases/25050991",
        "zipball_url": "https://api.github.com/repos/ropensci/vcr/zipball/v0.5.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sckott",
          "type": "User"
        },
        "date_created": "2020-03-03T20:39:03Z",
        "date_published": "2020-03-03T20:52:00Z",
        "description": "### NEW FEATURES\r\n\r\n* new function `check_cassette_names` to use in your `helper-pkgname.R` file in your test suite; it checks for duplicated cassette names only. Any use of `insert_cassette()` (thereby, any use of `use_cassette()`) uses a revamped version of an internal fxn that checks for an improved list of potential problems in cassette names (#116) (#159)\r\n* `use_vcr()` adds gitignore cassette diffs via the addition of a `gitattributes` file (#109)\r\n* `vcr_configure()` overhaul: function no longer has each setting as a parameter; rather, it has an ellipsis (`...`), and internally we check parameters passed in. The documentation (`?vcr_configure`) lists the details for each available parameter. Importantly, each call to `vcr_configure()` now only changes the vcr settings for parameters passed in to the function; to reset all vcr settings, run `vcr_configure_reset()`  (#136) (#141)\r\n* `insert_cassette()` and `use_cassette()` now inherit any vcr settings set by `vcr_configure()`; this wasn't happening consistently before. Most default parameter values in `insert_cassette/use_cassette` set to `NULL`, in which case they inherit from whatever values are set by `vcr_configure()`, but can be overriden (#151) (#153)\r\n\r\n### MINOR IMPROVEMENTS\r\n\r\n* define _serialize_, _cassette_, and _fixture_ in the README (#138) (#139)\r\n* fix `filter_sensitive_data` parameter description in `vcr_configure` docs  (#129)\r\n* move higher up in README a brief description of what this package does (#140)\r\n* import `utils::getParseData` so its in namespace (#142)\r\n* better cleanup of some stray test files left on disk (#148)\r\n* `use_vcr()` no longer uses `context()` in example test file (#144)\r\n* improved documentation of functions and environment variables for turning vcr on and off and when to use each of them - documentation mostly in the HTTP Testing book at https://books.ropensci.org/http-testing/lightswitch.html (#131)\r\n* fix a `use_cassette` test (#133)\r\n* Add assertions to `vcr_configure()` when parameters are set by the user to fail early (#156)\r\n\r\n### BUG FIXES\r\n\r\n* fix for handling of http requests that request image data AND do not write that data to disk; in addition, fix usage of `preserve_exact_body_bytes` when image data is in the response body (#128) thanks @Rekyt\r\n* vcr now should handle request bodies correctly on POST requests (#143)\r\n* Request matching was failing for empty bodies when \"body\" was one of the matchers (#157) (#161)\r\n* fix to `sensitive_remove()` internal function used when the user sets `filter_sensitive_data` in `vcr_configure()`; when an env var is missing in the `filter_sensitive_data` list, `sensitive_remove()` was causing C stack errors in some cases (#160) thanks @zachary-foster\r\n* fix for recording JSON-encoded bodies; vcr wasn't handling HTTP requests when the user set the body to be encoded as JSON (e.g., `encode=\"json\"` with crul or httr) (#130)",
        "html_url": "https://github.com/ropensci/vcr/releases/tag/v0.5.0",
        "name": "vcr v0.5.0",
        "release_id": 24187097,
        "tag": "v0.5.0",
        "tarball_url": "https://api.github.com/repos/ropensci/vcr/tarball/v0.5.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/vcr/releases/24187097",
        "value": "https://api.github.com/repos/ropensci/vcr/releases/24187097",
        "zipball_url": "https://api.github.com/repos/ropensci/vcr/zipball/v0.5.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sckott",
          "type": "User"
        },
        "date_created": "2019-12-07T01:03:06Z",
        "date_published": "2019-12-07T17:03:07Z",
        "description": "### NEW FEATURES\r\n\r\n* vcr now can handle requests from both `crul` and `httr` that write to disk; `crul` supports this with the `disk` parameter and `httr` through the `write_disk()` function; see the section on mocking writing to disk in the http testing book https://books.ropensci.org/http-testing/vcr-usage.html#vcr-disk; also see `?mocking-disk-writing` within `webmockr` for mocking writing to disk without using `vcr`, and the section in the http testing book https://books.ropensci.org/http-testing/webmockr-stubs.html#webmockr-disk  (#81) (#125)\r\n* vcr gains ability to completely turn off vcr for your test suite even if you're using `vcr::use_cassette`/`vcr::insert_cassette`; this is helpful if you want to run tests both with and without vcr; workflows are supported both for setting env vars on the command line as well as working interactively within R; see `?lightswitch` for details (#37)\r\n* ignoring requests now works, with some caveats: it only works for now with `crul` (not `httr`), and works for ignoring specifc hosts, and localhosts, but not for custom callbacks. See the vcr configuration vignette https://docs.ropensci.org/vcr/articles/configuration.html#ignoring-some-requests for discussion and examples (#127)\r\n\r\n### MINOR IMPROVEMENTS\r\n\r\n* documentation for R6 classes should be much better now; roxygen2 now officially supports R6 classes (#123)\r\n* added minimal cassette name checking; no spaces allowed and no file extensions allowed; more checks may be added later (#106)\r\n\r\n### BUG FIXES\r\n\r\n* fix handling of http response bodies that are images; we were converting raw class bodies into character, which was causing images to error, which can't be converted to character; we now check if a body can be converted to character or not and if not, leave it as is (#112) (#119) thanks @Rekyt for the report\r\n* simple auth with package `httr` wasn't working (`htrr::authenticate()`); we were not capturing use of `authenticate`; it's been solved now (#113)\r\n* we were not properly capturing request bodies with package `httr` requests; that's been fixed (#122)\r\n* httr adapter was failing on second run, reading a cached response. fixed now (#124)\r\n* `response_summary()` fixed; this function prints a summary of the http response body; sometimes this function would fail with multibyte string error because the `gsub` call would change the encoding, then would fail on the `substring` call; we now set `useBytes = TRUE` in the `gsub` call to avoid this problem (#126)",
        "html_url": "https://github.com/ropensci/vcr/releases/tag/v0.4.0",
        "name": "vcr v0.4.0",
        "release_id": 22049470,
        "tag": "v0.4.0",
        "tarball_url": "https://api.github.com/repos/ropensci/vcr/tarball/v0.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/vcr/releases/22049470",
        "value": "https://api.github.com/repos/ropensci/vcr/releases/22049470",
        "zipball_url": "https://api.github.com/repos/ropensci/vcr/zipball/v0.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sckott",
          "type": "User"
        },
        "date_created": "2019-08-20T19:01:14Z",
        "date_published": "2019-08-20T19:04:27Z",
        "description": "### NEW FEATURES\r\n\r\n* new internal method `up_to_date_interactions` in `cassette_class` now allows filtering cassettes by user specified date (#96) (#104)\r\n* re-recording now works - see new `use_casette()` parameters `re_record_interval` and `clean_outdated_http_interactions`; you can now set a re-record interval (in seconds) so that you can for example always re-record cassettes if you don't want cassettes to be more than X days old; depends on new internal method `up_to_date_interactions` (#104) (#105)\r\n\r\n### MINOR IMPROVEMENTS\r\n\r\n* fix link to HTTP Testing Book: ropensci -> ropenscilabs (#100)\r\n* add new section to HTTP Testing Book on \"vcr enabled testing\" with sub-sections on check vs. test, your package on CRAN, and your package on continuous integration sites (#102)\r\n\r\n### BUG FIXES\r\n\r\n* fix request body matching - partly through fixes to `webmockr` package (requires v0.4 or greater); more generally, makes single type request matching (e.g., just HTTP method, or just URL) possible, it was not working before, but is now working; added examples of doing single type matching (#70) (#76) (#108)\r\n* fixed type in `cassette_class` where typo lead to not setting headers correctly in the `webmockr::wi_th()` call (#107)",
        "html_url": "https://github.com/ropensci/vcr/releases/tag/v0.3.0",
        "name": "vcr v0.3.0",
        "release_id": 19415877,
        "tag": "v0.3.0",
        "tarball_url": "https://api.github.com/repos/ropensci/vcr/tarball/v0.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/vcr/releases/19415877",
        "value": "https://api.github.com/repos/ropensci/vcr/releases/19415877",
        "zipball_url": "https://api.github.com/repos/ropensci/vcr/zipball/v0.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sckott",
          "type": "User"
        },
        "date_created": "2019-02-11T20:17:42Z",
        "date_published": "2019-02-11T20:26:33Z",
        "description": "## NEW FEATURES\r\n\r\n* gains function `use_vcr()` to setup `vcr` for your package. This requires 3 pkgs all in Suggests; so are not required if you don't need to use `use_vcr()` (#52) (#95) thanks @maelle for the feedback!\r\n* `vcr` actually supports all four recording modes: `none`, `once`, `new_episodes`, and `all`. `once` is what's used by default. See `?recording` for description of the recording modes. For now [the test file test-ause_cassette_record_modes.R](https://github.com/ropensci/vcr/blob/master/tests/testthat/test-ause_cassette_record_modes.R) gives some examples and what to expect for each record mode; in the future the http testing book will have much more information in the _Record modes_ chapter <https://ropensci.github.io/http-testing-book/record-modes.html> ([commit](https://github.com/ropensci/vcr/commit/04aa5f784b18308d8f62d1b6b0be2f3e140f2a5a))\r\n\r\n### MINOR IMPROVEMENTS\r\n\r\n* lots of tidying for better/consistent style\r\n* fix for a partial argument call in `as.list()`: `all` to `all.names` ([commit](https://github.com/ropensci/vcr/commit/b20a2d5ffd0f65175dee4d84aa9573f3652df1d2))\r\n\r\n### BUG FIXES\r\n\r\n* error thrown with `httr` due to wrong date format. the problem was in the `webmockr` package. see [ropensci/webmockr#58](https://github.com/ropensci/webmockr/issues/58) (#91) thanks @Bisaloo\r\n* fix for `use_cassette()` when using `httr`: we weren't collecting `status_code` and storing it with the cassette (#92) thanks @Bisaloo\r\n* fixes for `use_cassette()` for `httr`: was working fine with a single httr request, but not with 2 or more (#93) (#94) thanks @Rekyt\r\n* in error blocks with `use_cassette()` the URL is presented from the request, and if there's a secret (API key) in the URL as a query parameter (or in any other place in the URL) then that secret is shown to the world (including if the error block happens on CI on the public web). This is fixed now; we use directives from your `filter_sensitive_data` call in `vcr_configure()` to mask secrets in error messages (#89) (#90)",
        "html_url": "https://github.com/ropensci/vcr/releases/tag/v0.2.6",
        "name": "vcr v0.2.6",
        "release_id": 15492795,
        "tag": "v0.2.6",
        "tarball_url": "https://api.github.com/repos/ropensci/vcr/tarball/v0.2.6",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/vcr/releases/15492795",
        "value": "https://api.github.com/repos/ropensci/vcr/releases/15492795",
        "zipball_url": "https://api.github.com/repos/ropensci/vcr/zipball/v0.2.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sckott",
          "type": "User"
        },
        "date_created": "2019-01-13T19:29:12Z",
        "date_published": "2019-01-13T21:07:32Z",
        "description": "### MINOR IMPROVEMENTS\r\n\r\n* typo fixes (#85) thanks @Rekyt\r\n* added to docs: at least one person has reported different results using `vcr` with `devtools::check` vs. `devtools::test` (#83)\r\n* changed suggested usage of `vcr` in test suites from `use_cassette` block wrapped in `test_that` to the other way around; leads to `testthat` pointing to the actual test line that failed rather than pointing to the start of the `use_cassette` block (#86)\r\n\r\n### BUG FIXES\r\n\r\n* Fix for `%||%` internal function. Was incorrectly doing logical comparison; when headers list was passed one or more of the tests in the if statement had length > 1. Dev R is testing for this (#87)",
        "html_url": "https://github.com/ropensci/vcr/releases/tag/v0.2.2",
        "name": "vcr v0.2.2",
        "release_id": 14950030,
        "tag": "v0.2.2",
        "tarball_url": "https://api.github.com/repos/ropensci/vcr/tarball/v0.2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/vcr/releases/14950030",
        "value": "https://api.github.com/repos/ropensci/vcr/releases/14950030",
        "zipball_url": "https://api.github.com/repos/ropensci/vcr/zipball/v0.2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sckott",
          "type": "User"
        },
        "date_created": "2018-10-19T17:47:26Z",
        "date_published": "2018-10-19T17:52:20Z",
        "description": "### NEW FEATURES\r\n\r\n* gains support for the `httr` package. `vcr` now supports `crul` and `httr`. Some of the integration for `httr` is via `webmockr`, while some of the tooling resides here in `vcr`  (#73) (#79)\r\n\r\n### BUG FIXES\r\n\r\n* fix handling of response bodies when not raw type (#77) (#78)",
        "html_url": "https://github.com/ropensci/vcr/releases/tag/v0.2.0",
        "name": "vcr v0.2.0",
        "release_id": 13545060,
        "tag": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/ropensci/vcr/tarball/v0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/vcr/releases/13545060",
        "value": "https://api.github.com/repos/ropensci/vcr/releases/13545060",
        "zipball_url": "https://api.github.com/repos/ropensci/vcr/zipball/v0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sckott",
          "type": "User"
        },
        "date_created": "2018-05-09T18:15:49Z",
        "date_published": "2018-06-13T16:44:08Z",
        "description": "vcr 0.1.0\r\n=========\r\n\r\n### NEW FEATURES\r\n\r\n* released to CRAN",
        "html_url": "https://github.com/ropensci/vcr/releases/tag/v0.1.0",
        "name": "vcr v0.1.0",
        "release_id": 10914283,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/ropensci/vcr/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/vcr/releases/10914283",
        "value": "https://api.github.com/repos/ropensci/vcr/releases/10914283",
        "zipball_url": "https://api.github.com/repos/ropensci/vcr/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "repository_status": [
    {
      "confidence": 1,
      "result": {
        "description": "Active \u2013 The project has reached a stable, usable\nstate and is being actively\ndeveloped.",
        "type": "Url",
        "value": "https://www.repostatus.org/#active"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2025-09-19 00:25:08",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 93
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "vcr <img src=\"man/figures/logo.png\" align=\"right\" height=\"120\" alt=\"\" />"
        ],
        "type": "Text_excerpt",
        "value": "Using vcr in a test is straightforward: just call\n`vcr::local_cassette()`. The first time your test is run, vcr will\nautomatically record every HTTP request, saving the request and reponse\nin `tests/testthat/_vcr`. After that, it will replay those recorded\nrequests, meaning that your test no longer needs an active connection.\n\n``` r\ntest_that(\"can retrieve current version\", {\n  vcr::local_cassette(\"rl_version\")\n  expect_equal(rredlist::rl_version(), \"2025-1\")\n})\n```\n\nThe first argument to `local_cassette()` is the cassette name: it\u2019s used\nto name the cassette file so needs to be unique across tests. In this\ncase, running the above test will generate\n`tests/testthat/_vcr/rl_version.yaml` which looks something like this:\n\n``` yaml\nhttp_interactions:\n- request:\n    method: GET\n    uri: https://api.iucnredlist.org/api/v4/information/red_list_version\n  response:\n    status: 200\n    headers:\n      status: 'HTTP/2 200 '\n      cache-control: max-age=0, private, must-revalidate\n      content-type: application/json\n      etag: W/\"1694e95e54c5590a355e5922b47c7cd9\"\n      date: Tue, 06 May 2025 20:52:22 GMT\n    body:\n      string: '{\"red_list_version\":\"2025-1\"}'\n  recorded_at: 2025-05-06 20:52:21\nrecorded_with: VCR-vcr/2.0.0\n```\n\nIf you look carefully at this file, you\u2019ll notice an `Authorization`\nheader is not recorded in the request headers despite it being used in\nthe actual HTTP request. Read more about protecting secrets in the\nvignette `vignette(\"secrets\")`.\n"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "version": [
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/ropensci/vcr/main/DESCRIPTION",
        "type": "String",
        "value": "2.0.0"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2.0.0"
      },
      "source": "https://raw.githubusercontent.com/ropensci/vcr/main/codemeta.json",
      "technique": "code_parser"
    }
  ]
}