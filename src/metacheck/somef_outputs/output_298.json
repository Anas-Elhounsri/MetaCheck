{
  "authors": [
    {
      "confidence": 1,
      "result": {
        "email": "mfleschutz@gmail.com",
        "type": "Agent",
        "value": "mfleschutz@gmail.com"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "Department of Process, Energy and Transport Engineering, Munster Technological University",
        "identifier": "https://orcid.org/0000-0002-8516-9635",
        "type": "String",
        "value": "Markus Fleschutz"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/paper/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "Department of Process, Energy and Transport Engineering, Munster Technological University",
        "identifier": "https://orcid.org/0000-0002-4269-2581",
        "type": "String",
        "value": "Michael D. Murphy"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "author": [
          {
            "family_name": "Fleschutz",
            "given_name": "Markus",
            "name": "Markus Fleschutz",
            "type": "Agent",
            "url": "https://orcid.org/0000-0002-8516-9635"
          },
          {
            "family_name": "Murphy",
            "given_name": "Michael D.",
            "name": "Michael D. Murphy",
            "type": "Agent",
            "url": "https://orcid.org/0000-0002-4269-2581"
          }
        ],
        "datePublished": "2021",
        "doi": "10.5281/zenodo.5566694",
        "format": "cff",
        "title": "elmada: Dynamic electricity carbon emission factors and prices for Europe",
        "type": "File_dump",
        "url": "https://doi.org/10.5281/zenodo.5566694",
        "value": "cff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n- family-names: \"Fleschutz\"\n  given-names: \"Markus\"\n  orcid: \"https://orcid.org/0000-0002-8516-9635\"\n- family-names: \"Murphy\"\n  given-names: \"Michael D.\"\n  orcid: \"https://orcid.org/0000-0002-4269-2581\"\ntitle: \"elmada: Dynamic electricity carbon emission factors and prices for Europe\"\nversion: 0.1.0\ndoi: 10.5281/zenodo.5566694\ndate-released: 2021-10-13\nurl: \"https://github.com/DrafProject/elmada\"\npreferred-citation:\n  type: article\n  authors:\n  - family-names: \"Fleschutz\"\n    given-names: \"Markus\"\n    orcid: \"https://orcid.org/0000-0002-8516-9635\"\n  - family-names: \"Murphy\"\n    given-names: \"Michael D.\"\n    orcid: \"https://orcid.org/0000-0002-4269-2581\"\n  doi: \"10.21105/joss.03625\"\n  journal: \"Journal of Open Source Software\"\n  month: 10\n  start: 3625\n  title: \"elmada: Dynamic electricity carbon emission factors and prices for Europe\"\n  issue: 66\n  volume: 6\n  year: 2021\n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/CITATION.cff",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing elmada",
        "type": "Text_excerpt",
        "value": "If you use **elmada** for academic work please cite this paper published in the Journal for Open Source Software:\n\n[![status](https://joss.theoj.org/papers/10.21105/joss.03625/status.svg)][JOSS paper]\n\n```bibtex\n@article{Fleschutz2021,\n  title = {elmada: Dynamic electricity carbon emission factors and prices for Europe},\n  author = {Markus Fleschutz and Michael D. Murphy},\n  journal = {Journal of Open Source Software},\n  publisher = {The Open Journal},\n  year = {2021},\n  volume = {6},\n  number = {66},\n  pages = {3625},\n  doi = {10.21105/joss.03625},\n}\n```\n\nIf you use the PP or PWL method, please also cite the open-access [Applied Energy paper]:\n\n[![APEN](https://img.shields.io/badge/AppliedEnergy-10.1016/j.apenergy.2021.117040-brightgreen)][Applied Energy paper]\n\n```bibtex\n@article{Fleschutz2021b,\n  title = {The effect of price-based demand response on carbon emissions in European electricity markets: The importance of adequate carbon prices},\n  author = {Markus Fleschutz and Markus Bohlayer and Marco Braun and Gregor Henze and Michael D. Murphy},\n  journal = {Applied Energy},\n  year = {2021},\n  volume = {295},\n  issn = {0306-2619},\n  pages = {117040},\n  doi = {10.1016/j.apenergy.2021.117040},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Markus Fleschutz and Michael D. Murphy",
        "doi": "10.21105/joss.03625",
        "format": "bibtex",
        "title": "elmada: Dynamic electricity carbon emission factors and prices for Europe",
        "type": "Text_excerpt",
        "value": "@article{Fleschutz2021,\n    doi = {10.21105/joss.03625},\n    pages = {3625},\n    number = {66},\n    volume = {6},\n    year = {2021},\n    publisher = {The Open Journal},\n    journal = {Journal of Open Source Software},\n    author = {Markus Fleschutz and Michael D. Murphy},\n    title = {elmada: Dynamic electricity carbon emission factors and prices for Europe},\n}"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Markus Fleschutz and Markus Bohlayer and Marco Braun and Gregor Henze and Michael D. Murphy",
        "doi": "10.1016/j.apenergy.2021.117040",
        "format": "bibtex",
        "title": "The effect of price-based demand response on carbon emissions in European electricity markets: The importance of adequate carbon prices",
        "type": "Text_excerpt",
        "value": "@article{Fleschutz2021b,\n    doi = {10.1016/j.apenergy.2021.117040},\n    pages = {117040},\n    issn = {0306-2619},\n    volume = {295},\n    year = {2021},\n    journal = {Applied Energy},\n    author = {Markus Fleschutz and Markus Bohlayer and Marco Braun and Gregor Henze and Michael D. Murphy},\n    title = {The effect of price-based demand response on carbon emissions in European electricity markets: The importance of adequate carbon prices},\n}"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n[INSERT CONTACT METHOD].\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\n[https://www.contributor-covenant.org/version/2/0/code_of_conduct.html][v2.0].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available\nat [https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.0]: https://www.contributor-covenant.org/version/2/0/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DrafProject/elmada"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DrafProject/elmada"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DrafProject/elmada"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "continuous_integration": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/DrafProject/elmada/main/.github/workflows/python-publish.yml"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/DrafProject/elmada/main/.github/workflows/CI_conda.yml"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/DrafProject/elmada/main/.github/workflows/CI.yml"
      },
      "technique": "file_exploration"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# How to contribute\n\nTo guarantee the further evolution of elmada in the long term, we depend on the support of volunteer developers.\n\nSome of the resources to look at if you're interested in contributing:\n* [Join us on Gitter to chat!](https://gitter.im/DrafProject/elmada)\n\n## Licensing\n\nBy contributing to elmada, e.g. through opening a pull request or submitting a patch, you represent that your contributions are your own original work and that you have the right to license them, and you agree that your contributions are licensed under the LGPL 3 license.\n\n## Submitting bug reports\n\n[Open an issue on GitHub](https://github.com/DrafProject/elmada/issues/new) to report bugs or other problems.\n\n## Submitting changes\n\nTo contribute changes:\n\n1. Fork the project on GitHub\n1. Create a feature branch to work on in your fork (``git checkout -b new-fix-or-feature``)\n1. Commit your changes to the feature branch after running black to format your code\n1. Push the branch to GitHub (``git push origin new-fix-or-feature``)\n1. On GitHub, create a new [pull request](https://github.com/DrafProject/elmada/pull/new/master) from the feature branch\n\n### Pull requests\n\nBefore submitting a pull request, check whether you have:\n\n* Added or updated documentation for your changes\n* Added tests if you implemented new functionality\n\nWhen opening a pull request, please provide a clear summary of your changes!\n\n### Commit messages\n\nPlease try to write clear commit messages. One-line messages are fine for small changes, but bigger changes should look like this:\n\n    A brief summary of the commit\n\n    A paragraph or bullet-point list describing what changed and its impact,\n    covering as many lines as needed.\n\n## Testing\n\nWe have existing test coverage for the key functionality of elmada.\n\nAll tests are in the ``elmada/tests`` directory and use [pytest](https://docs.pytest.org/en/latest/).\n\nOur test coverage is not perfect. An easy way to contribute code is to work on better tests.\n\n## Coding conventions\n\nStart reading our code and you'll get the hang of it.\n\nWe mostly follow the official [Style Guide for Python Code (PEP8)](https://www.python.org/dev/peps/pep-0008/).\n\nWe have chosen to use the uncompromising code formatter, [`black`](https://github.com/psf/black/).\nIf run from the root directory of this repo, `pyproject.toml` should ensure the line lengths are restricted to 100.\nThe philosophy behind using black is to have uniform style throughout the project dictated by code.\nSince `black` is designed to minimise diffs, and make patches more human readable, this also makes code reviews more efficient.\n\n## Attribution\n\nThe layout and content of this document is based on the contribution guidelines of the projects [OpenGovernment](https://github.com/opengovernment/opengovernment/blob/master/CONTRIBUTING.md) and [Calliope](https://github.com/calliope-project/calliope/blob/master/CONTRIBUTING.md).\n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/CONTRIBUTING.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributing",
        "type": "Text_excerpt",
        "value": "Contributions in any form are welcome! To contribute changes, please have a look at our [contributing guidelines](CONTRIBUTING.md).\n\nIn short:\n\n1. Fork the project and create a feature branch to work on in your fork (`git checkout -b new-feature`).\n1. Commit your changes to the feature branch and push the branch to GitHub (`git push origin my-new-feature`).\n1. On GitHub, create a new pull request from the feature branch.\n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-05-19T08:31:56Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2021-07-23"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_published": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2021-07-23"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2025-06-26T01:59:52Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2021-07-23"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Dynamic electricity carbon emission factors and prices for Europe"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Dynamic electricity carbon emission factors and prices for Europe"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Dynamic electricity carbon emission factors and prices for Europe"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/paper/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 0.9504913748549725,
      "result": {
        "original_header": "elmada: Dynamic electricity carbon emission factors and prices for Europe",
        "type": "Text_excerpt",
        "value": "The open-source Python package **elmada** provides electricity carbon emission factors and wholesale prices for European countries.\nThe target group includes modelers of distributed energy hubs who need **el**ectricity **ma**rket **da**ta (short: **elmada**), e.g., to evaluate the environmental effect of demand response.\n**elmada** is part of the [Draf Project] but can be used as a standalone package. \n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8888827455116087,
      "result": {
        "original_header": "Features",
        "type": "Text_excerpt",
        "value": "* __Dynamic electricity Carbon Emission Factors (CEFs)__ are calculated depending on country and year in up to quarter-hourly resolution.\nThere are two types of CEFs: __Grid Mix Emission Factors (XEFs)__ and __Marginal Emission Factors (MEFs)__.\nWhile XEFs reflect the carbon footprint of an electricity use (attributional approach), MEFs estimate the carbon impact (consequential approach) of a change in electricity demand (Learn more in the [white paper][CEFWhitepaper] from Tomorrow and WattTime).\nChoose between\n  * __XEFs__ from fuel type-specific [ENTSO-E] electricity generation data only for Germany (`XEF_EP`),\n  * and __XEFs__ & __MEFs__ from merit order based simulations for [30 European Countries][Europe30] (`XEF_PP`, `XEF_PWL`, `MEF_PP`, `MEF_PWL`).\n  The according Power Plant method (`PP`) and Piecewise Linear method (`PWL`) are described in the open-access [Applied Energy paper].\n  The data used depend on the method chosen, see [scheme below](#cef-scheme). \n* Other interesting market data such as merit order lists & plots, fuel-specific generation data, or power plant lists are provided as a by-product of the CEF calculations.\n \n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.828504940889072,
      "result": {
        "original_header": "Methodology",
        "type": "Text_excerpt",
        "value": "With the `XEF_EP` method, XEFs are calculated by multiplying the share matrix *S* (fuel type specific share of electricity generation per time step from [ENTSO-E]) with the intensity vector *\u03b5*  (fuel type specific life cycle carbon emission intensities from [Tranberg.2019]): \n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8663638663581352,
      "result": {
        "original_header": "Data modes",
        "type": "Text_excerpt",
        "value": "* `mode=\"safe\"` (default):\n  * Pre-cached data for 4 years and 20 countries are used. The data are described in the [Applied Energy paper].\n  * The years are 2017 to 2020 and the countries AT, BE, CZ, DE, DK, ES, FI, FR, GB, GR, HU, IE, IT, LT, NL, PL, PT, RO, RS, SI.\n  * The data is available in the space-saving and quick-to-read [Parquet format] under [.../safe_cache].\n* `mode=\"live\"`:\n  * Up-to-date data are retrieved on demand and are cached to an OS-specific directory, see `elmada.paths.CACHE_DIR`. A symbolic link to it can be conveniently created by executing `elmada.make_symlink_to_cache()`.\n  * Available years are 2017 until the present.\n  * Slow due to API requests.\n  * Requires valid API keys of ENTSO-E, Morph, Quandl, see [table below](#data-sources).\n \n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.977873439179361,
      "result": {
        "original_header": "Time zones",
        "type": "Text_excerpt",
        "value": "The data is in local time since the [Draf Project] focuses on the modeling of individual local energy hubs.\nStandard time is used i.e. daylight saving time is ignored.\nAlso see [this table](https://github.com/DrafProject/marginal-emission-factors/blob/main/README.md#time-zones) of the time zones used.\n \n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DrafProject/elmada/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/DrafProject/elmada/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DrafProject/elmada"
      },
      "technique": "GitHub_API"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "setup.py",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/DrafProject/elmada/main/setup.py"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/setup.py",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "pyproject.toml",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/DrafProject/elmada/main/pyproject.toml"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/pyproject.toml",
      "technique": "file_exploration"
    }
  ],
  "has_package_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "pyproject.toml"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/pyproject.toml",
      "technique": "code_parser"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "http://doi.org/10.5281/zenodo.5566694"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://joss.theoj.org/papers/10.21105/joss.03625/status.svg"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DrafProject/elmada/raw/main/doc/images/elmada_scheme_scribble.svg"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=\\mathrm{XEF}^\\mathrm{EP}_{t} = S_{t,f}\\cdot\\varepsilon_f"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DrafProject/elmada/raw/main/doc/images/scheme_CEF_calculation.svg"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/DrafProject/elmada/main/doc/images/cef_country_map.svg"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DrafProject/elmada/raw/main/doc/images/cefs_scatter.png"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DrafProject/elmada/raw/main/doc/images/merit_order.svg"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://joss.theoj.org/papers/10.21105/joss.03625/status.svg"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Using `pip`",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```sh\npython -m pip install elmada\n```\n\nNOTE: Read [here](https://snarky.ca/why-you-should-use-python-m-pip/) why you should use `python -m pip` instead of `pip`.\n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "From source using conda",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "For a conda environment including a full editable **elmada** version do the following steps.\n\nClone the source repository:\n\n```sh\ngit clone https://github.com/DrafProject/elmada.git\ncd elmada\n```\n\nCreate an conda environment based on `environment.yml` and install an editable local **elmada** version:\n\n```sh\nconda env create\n```\n\nActivate the environment:\n\n```sh\nconda activate elmada\n```\n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "For Unix",
        "parent_header": [
          "Installation",
          "From source without using conda"
        ],
        "type": "Text_excerpt",
        "value": "```sh\ngit clone https://github.com/DrafProject/elmada.git\ncd elmada\npython3 -m venv env\nsource env/bin/activate\npython -m pip install -e .[dev]\n```\n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "For Windows",
        "parent_header": [
          "Installation",
          "From source without using conda"
        ],
        "type": "Text_excerpt",
        "value": "```sh\ngit clone https://github.com/DrafProject/elmada.git\ncd elmada\npy -m venv env\n.\\env\\Scripts\\activate\npy -m pip install -e .[dev]\n```\n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "OPTIONAL: Set your API keys and go live mode",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```py\nelmada.set_api_keys(entsoe=\"YOUR_ENTSOE_KEY\", morph=\"YOUR_MORPH_KEY\", quandl=\"YOUR_QUANDL_KEY\")\n# NOTE: API keys are stored in an OS-dependent config directory for later use.\n\nelmada.set_mode(\"live\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/DrafProject/elmada/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "carbon-emissions, demand-response, electricity-market, electricity-prices, energy-system-modeling, marginal-emissions, python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "energy market data"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "energy systems"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "carbon emission factors"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "demand response"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": [
          "energy market data",
          "energy systems",
          "carbon emission factors",
          "marginal emissions",
          "demand response"
        ]
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/paper/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU Lesser General Public License v3.0",
        "spdx_id": "LGPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/lgpl-3.0",
        "value": "https://api.github.com/licenses/lgpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\t\t   GNU LESSER GENERAL PUBLIC LICENSE\n           Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise BASEd on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nBASEd on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work BASEd on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work BASEd\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work BASEd on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/LICENSE.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "License",
        "value": "LGPLv3"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/LGPLv3",
        "spdx_id": "LGPLv3",
        "type": "License",
        "value": "LGPLv3"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/paper/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "Copyright (c) 2021 Markus Fleschutz\n\n[![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0)\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n[.../destatis]: elmada/data/raw/destatis\n[.../from_other.py]: elmada/from_other.py\n[.../safe_cache]: elmada/data/safe_cache\n[.../tranberg]: elmada/data/raw/tranberg\n[.../worldbank]: elmada/data/raw/worldbank\n[APENsupplPage8]: https://ars.els-cdn.com/content/image/1-s2.0-S0306261921004992-mmc1.pdf#page=8\n[Applied Energy paper]: https://doi.org/10.1016/j.apenergy.2021.117040\n[BeautifulSoup4]: https://pypi.org/project/beautifulsoup4\n[destatis_download]: https://www.destatis.de/DE/Themen/Wirtschaft/Preise/Publikationen/Energiepreise/energiepreisentwicklung-xlsx-5619001.xlsx?__blob=publicationFile\n[DESTATIS]: https://www.destatis.de\n[Draf Project]: https://github.com/DrafProject\n[ENTSO-E API key]: https://transparency.entsoe.eu/content/static_content/Static%20content/web%20api/Guide.html\n[ENTSO-E]: https://transparency.entsoe.eu/\n[EntsoePandasClient]: https://github.com/EnergieID/entsoe-py#EntsoePandasClient\n[Europe30]: #geographic-scope\n[GEO]: http://globalenergyobservatory.org\n[ICE]: https://www.theice.com\n[JOSS paper]: https://doi.org/10.21105/joss.03625\n[Konstantin.2017]: https://doi.org/10.1007/978-3-662-49823-1\n[Morph API key]: https://morph.io/documentation/api\n[Morph]: https://morph.io\n[opsd_download]: https://data.open-power-system-data.org/conventional_power_plants/latest\n[OPSD]: https://open-power-system-data.org\n[Parquet format]: https://parquet.apache.org\n[Quandl API key]: https://docs.quandl.com/docs#section-authentication\n[Quandl]: https://www.quandl.com\n[Quaschning]: https://www.volker-quaschning.de/datserv/CO2-spez/index_e.ph\n[Sandbag]: https://sandbag.org.uk/carbon-price-viewer\n[Smard]: https://www.smard.de/en\n[Tranberg.2019]: https://doi.org/10.1016/j.esr.2019.100367\n[wb]: https://databank.worldbank.org/reports.aspx?source=2&series=EG.ELC.LOSS.ZS\n[CEFWhitepaper]: https://watttime.org/wp-content/uploads/2024/01/GHG-Frameworks-WhitePaper-Tomorrow-WattTime-202108.pdf\n[Worldbank]: https://databank.worldbank.org/reports.aspx?source=2&series=EG.ELC.LOSS.ZS\n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/DrafProject/elmada/main/doc/images/elmada_logo.svg"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "elmada"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "DrafProject"
      },
      "technique": "GitHub_API"
    }
  ],
  "package_distribution": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://pypi.org/project/elmada/"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "package_id": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "elmada"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/setup.py",
      "technique": "code_parser"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 138824,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 2594,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 1974,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Python"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Python"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/setup.py",
      "technique": "code_parser"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mfleschutz",
          "type": "User"
        },
        "date_created": "2021-10-13T11:49:30Z",
        "date_published": "2021-10-13T12:01:04Z",
        "html_url": "https://github.com/DrafProject/elmada/releases/tag/v0.1.0",
        "name": "v0.1.0: JOSS paper",
        "release_id": 51278704,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/DrafProject/elmada/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/DrafProject/elmada/releases/51278704",
        "value": "https://api.github.com/repos/DrafProject/elmada/releases/51278704",
        "zipball_url": "https://api.github.com/repos/DrafProject/elmada/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mfleschutz",
          "type": "User"
        },
        "date_created": "2021-07-23T09:15:13Z",
        "date_published": "2021-07-23T09:41:13Z",
        "html_url": "https://github.com/DrafProject/elmada/releases/tag/v0.0.6",
        "name": "v0.0.6: Include safe-cache in PyPi package ",
        "release_id": 46661408,
        "tag": "v0.0.6",
        "tarball_url": "https://api.github.com/repos/DrafProject/elmada/tarball/v0.0.6",
        "type": "Release",
        "url": "https://api.github.com/repos/DrafProject/elmada/releases/46661408",
        "value": "https://api.github.com/repos/DrafProject/elmada/releases/46661408",
        "zipball_url": "https://api.github.com/repos/DrafProject/elmada/zipball/v0.0.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mfleschutz",
          "type": "User"
        },
        "date_created": "2021-07-09T15:31:17Z",
        "date_published": "2021-07-09T15:52:04Z",
        "html_url": "https://github.com/DrafProject/elmada/releases/tag/v0.0.5",
        "name": "v0.0.5: First PyPi version\ud83c\udf88",
        "release_id": 45976996,
        "tag": "v0.0.5",
        "tarball_url": "https://api.github.com/repos/DrafProject/elmada/tarball/v0.0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/DrafProject/elmada/releases/45976996",
        "value": "https://api.github.com/repos/DrafProject/elmada/releases/45976996",
        "zipball_url": "https://api.github.com/repos/DrafProject/elmada/zipball/v0.0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mfleschutz",
          "type": "User"
        },
        "date_created": "2021-07-09T10:15:28Z",
        "date_published": "2021-07-09T12:05:29Z",
        "html_url": "https://github.com/DrafProject/elmada/releases/tag/v0.0.4",
        "name": "v0.0.4",
        "release_id": 45964196,
        "tag": "v0.0.4",
        "tarball_url": "https://api.github.com/repos/DrafProject/elmada/tarball/v0.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/DrafProject/elmada/releases/45964196",
        "value": "https://api.github.com/repos/DrafProject/elmada/releases/45964196",
        "zipball_url": "https://api.github.com/repos/DrafProject/elmada/zipball/v0.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mfleschutz",
          "type": "User"
        },
        "date_created": "2021-07-09T07:37:20Z",
        "date_published": "2021-07-09T09:20:28Z",
        "html_url": "https://github.com/DrafProject/elmada/releases/tag/v0.0.3",
        "name": "v0.0.3",
        "release_id": 45955765,
        "tag": "v0.0.3",
        "tarball_url": "https://api.github.com/repos/DrafProject/elmada/tarball/v0.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/DrafProject/elmada/releases/45955765",
        "value": "https://api.github.com/repos/DrafProject/elmada/releases/45955765",
        "zipball_url": "https://api.github.com/repos/DrafProject/elmada/zipball/v0.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mfleschutz",
          "type": "User"
        },
        "date_created": "2021-07-08T07:52:56Z",
        "date_published": "2021-07-08T07:57:05Z",
        "html_url": "https://github.com/DrafProject/elmada/releases/tag/v0.0.2",
        "name": "Fix PyPi package",
        "release_id": 45886480,
        "tag": "v0.0.2",
        "tarball_url": "https://api.github.com/repos/DrafProject/elmada/tarball/v0.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/DrafProject/elmada/releases/45886480",
        "value": "https://api.github.com/repos/DrafProject/elmada/releases/45886480",
        "zipball_url": "https://api.github.com/repos/DrafProject/elmada/zipball/v0.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mfleschutz",
          "type": "User"
        },
        "date_created": "2021-07-07T10:01:00Z",
        "date_published": "2021-07-08T07:20:54Z",
        "html_url": "https://github.com/DrafProject/elmada/releases/tag/v0.0.1",
        "name": "First release =)",
        "release_id": 45884689,
        "tag": "v0.0.1",
        "tarball_url": "https://api.github.com/repos/DrafProject/elmada/tarball/v0.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/DrafProject/elmada/releases/45884689",
        "value": "https://api.github.com/repos/DrafProject/elmada/releases/45884689",
        "zipball_url": "https://api.github.com/repos/DrafProject/elmada/zipball/v0.0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2025-09-19 01:20:10",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 28
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "```py\nimport elmada\n```\n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "OPTIONAL: Set your API keys and go live mode",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```py\nelmada.set_api_keys(entsoe=\"YOUR_ENTSOE_KEY\", morph=\"YOUR_MORPH_KEY\", quandl=\"YOUR_QUANDL_KEY\")\n# NOTE: API keys are stored in an OS-dependent config directory for later use.\n\nelmada.set_mode(\"live\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Carbon Emission factors",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```py\nelmada.get_emissions(year=2019, country=\"DE\", method=\"MEF_PWL\", freq=\"60min\", use_datetime=True)\n```\n\n... returns marginal emission factors calculated by the `PWL` method with hourly datetime index:\n\n```sh\n2019-01-01 00:00:00     990.103492\n2019-01-01 01:00:00     959.758367\n                          ...\n2019-12-31 22:00:00    1064.122146\n2019-12-31 23:00:00    1049.852079\nFreq: 60T, Name: MEFs, Length: 8760, dtype: float64\n```\n\nThe `method` argument of `get_emissions()` takes strings that consists of two parts seperated by an underscore.\nThe first part is the type of emission factor: grid mix emission factors (`XEF`) or marginal emission factors (`MEF`).\nThe second part determines the calculation method: power plant method (`PP`), piecewise linear method (`PWL`),  or piecewise linear method in validation mode (`PWLv`).\n\nThe first part can be omitted (`_PP`, `_PWL`, `_PWLv`) to return a DataFrame that includes additional information.\n\n```py\nelmada.get_emissions(year=2019, country=\"DE\", method=\"_PWL\")\n```\n\n... returns all output from the PWL method:\n\n```sh\n      residual_load  total_load marginal_fuel  efficiency  marginal_cost         MEFs        XEFs\n0          21115.00    51609.75       lignite    0.378432      40.889230   990.103492  204.730151\n1          18919.50    51154.50       lignite    0.390397      39.636039   959.758367  164.716687\n...             ...         ...           ...         ...            ...          ...         ...\n8758       27116.00    41652.00       lignite    0.352109      43.946047  1064.122146  388.542911\n8759       25437.75    39262.75       lignite    0.356895      43.356723  1049.852079  376.009477\n[8760 rows x 7 columns]\n```\n\nAdditionally, XEFs can be calculated from historic fuel type-specific generation data (`XEF_EP`).\n\nHere is an overview of valid `method` argument values:\n\n| `method` | Return type | Return values | Restriction |\n| --: | -- | -- | -- |\n| `XEF_PP` | Series | XEFs using PP method | DE |\n| `XEF_PWL` | Series | XEFs using PWL method | [Europe30] |\n| `XEF_PWLv` | Series | XEFs using PWLv method | DE |\n| `MEF_PP` | Series | MEFs from PP method | DE |\n| `MEF_PWL` | Series | MEFs using PWL method | [Europe30] |\n| `MEF_PWLv` | Series | MEFs using PWLv method | DE |\n| `_PP` | Dataframe | extended data for PP method | DE |\n| `_PWL` | Dataframe | extended data for PWL method | [Europe30] |\n| `_PWLv` | Dataframe | extended data for PWLv method | DE |\n| `XEF_EP` | Series | XEFs using fuel type-specific generation data from [ENTSO-E] | [Europe30] |\n\nYou can plot the carbon emission factors with\n\n```py\nelmada.plots.cefs_scatter(year=2019, country=\"DE\", method=\"MEF_PP\")\n```\n\n<img src=\"https://github.com/DrafProject/elmada/raw/main/doc/images/cefs_scatter.png\" width=\"600\" alt=\"CEFs\">\n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Wholesale prices",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```py\nelmada.get_prices(year=2019, country=\"DE\", method=\"hist_EP\")\n```\n\n```sh\n0       28.32\n1       10.07\n        ...  \n8758    38.88\n8759    37.39\nLength: 8760, dtype: float64\n```\n\nPossible values for the `method` argument of `get_prices()` are:\n\n| `method` | Description | Restriction |\n| --: | -- | -- |\n| `PP` | Using the power plant method | DE |\n| `PWL` | Using piecewise linear method | [Europe30] |\n| `PWLv` | Using piecewise linear method in validation mode | DE |\n| `hist_EP` | Using historic [ENTSO-E] data | [Europe30] without BA, ME, MK|\n| `hist_SM` | Using historic [Smard] data | used only as backup for DE, 2015 and 2018 |\n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Merit order",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```py\nelmada.plots.merit_order(year=2019, country=\"DE\", method=\"PP\")\n```\n\n... plots the merit order:\n\n<img src=\"https://github.com/DrafProject/elmada/raw/main/doc/images/merit_order.svg\" width=\"600\" alt=\"merit_order\">\n\n```py\nelmada.get_merit_order(year=2019, country=\"DE\", method=\"PP\")\n```\n\n... returns the merit order as DataFrame with detailed information on individual power plant blocks.\n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pre-processed data",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The following table describes additional `elmada` functions that provide pre-processed data.\nKeyword arguments are for example `kw = dict(year=2019, freq=\"60min\", country=\"DE\")`.\n\n| `elmada.` function call | Return type (Dimensions) | Return value | Usage in `elmada` | Used within |\n| -- | -- | -- | -- | -- |\n| `get_el_national_generation(**kw)` | DataFrame (time, fuel type) | National electricity generation | Share matrix *S* | `XEF_EP` method |\n| `get_el_national_generation(**kw).sum(axis=1)` | Series (time) | Total national electricity generation | Proxy for the total load | XEFs calculations |\n| `get_residual_load(**kw)` | Series (time) | Conventional national generation | Proxy for the residual load (see [scheme above](#methodology)) | `PP`, `PWL` and `PWLv`|\n"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "version": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "v0.1.0"
      },
      "source": "https://raw.githubusercontent.com/DrafProject/elmada/main/paper/codemeta.json",
      "technique": "code_parser"
    }
  ]
}