{
  "authors": [
    {
      "confidence": 1,
      "result": {
        "affiliation": "Department of Mechanical and Aerospace Engineering, The George Washington University, Washington, DC, USA",
        "email": "pychuang@gwu.edu",
        "identifier": "http://orcid.org/0000-0001-6330-2709",
        "type": "String",
        "value": "Pi-Yueh Chuang"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "Department of Mechanical and Aerospace Engineering, The George Washington University, Washington, DC, USA",
        "email": "mesnardo@gwu.edu",
        "identifier": "http://orcid.org/0000-0001-5335-7853",
        "type": "String",
        "value": "Olivier Mesnard"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "nuTonomy Inc., Cambridge, MA, USA (previously at Boston University)",
        "email": "k.anush@gmail.com",
        "identifier": "http://orcid.org/0000-0001-6409-7022",
        "type": "String",
        "value": "Anush Krishnan"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "Department of Mechanical and Aerospace Engineering, The George Washington University, Washington, DC, USA",
        "email": "labarba@gwu.edu",
        "identifier": "http://orcid.org/0000-0001-5812-2711",
        "type": "String",
        "value": "Lorena A. Barba"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "PetIBM - toolbox and applications of the immersed-boundary method on distributed-memory architectures"
        ],
        "type": "Text_excerpt",
        "value": "* Chang, W., Giraldo, F., & Perot, B. (2002). *Analysis of an exact fractional step method*. Journal of Computational Physics, 180(1), 183-199.\n* Li, R. Y., Xie, C. M., Huang, W. X., & Xu, C. X. (2016). *An efficient immersed boundary projection method for flow over complex/moving boundaries*. Computers & Fluids, 140, 122-135.\n* Perot, J. B. (1993). *An analysis of the fractional step method*. Journal of Computational Physics, 108(1), 51-58.\n* Taira, K., & Colonius, T. (2007). *The immersed boundary method: a projection approach*. Journal of Computational Physics, 225(2), 2118-2137.\n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to cite PetIBM",
        "parent_header": [
          "PetIBM - toolbox and applications of the immersed-boundary method on distributed-memory architectures"
        ],
        "type": "Text_excerpt",
        "value": "If PetIBM contributes to a project that leads to a scientific publication, please cite the project.\nYou can use this citation or the BibTeX entry below.\n\n> Pi-Yueh Chuang, Olivier Mesnard, Anush Krishnan, Lorena A. Barba (2018). PetIBM: toolbox and applications of the immersed-boundary method on distributed-memory architectures. _Journal of Open Source Software_, **3**(25), 558, [doi:10.21105/joss.00558](https://doi.org/10.21105/joss.00558)\n\n```console\n@article{chuang2018petibm,\n  doi = {10.21105/joss.00558},\n  url = {https://doi.org/10.21105/joss.00558},\n  year = {2018},\n  month = {may},\n  publisher = {The Open Journal},\n  volume = {3},\n  number = {25},\n  pages = {558},\n  author = {Pi-Yueh Chuang and Olivier Mesnard and Anush Krishnan and Lorena A. Barba},\n  title = {{PetIBM}: toolbox and applications of the immersed-boundary method on distributed-memory architectures},\n  journal = {The Journal of Open Source Software}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Pi-Yueh Chuang and Olivier Mesnard and Anush Krishnan and Lorena A. Barba",
        "doi": "10.21105/joss.00558",
        "format": "bibtex",
        "title": "{PetIBM}: toolbox and applications of the immersed-boundary method on distributed-memory architectures",
        "type": "Text_excerpt",
        "url": "https://doi.org/10.21105/joss.00558",
        "value": "@article{chuang2018petibm,\n    journal = {The Journal of Open Source Software},\n    title = {{PetIBM}: toolbox and applications of the immersed-boundary method on distributed-memory architectures},\n    author = {Pi-Yueh Chuang and Olivier Mesnard and Anush Krishnan and Lorena A. Barba},\n    pages = {558},\n    number = {25},\n    volume = {3},\n    publisher = {The Open Journal},\n    month = {may},\n    year = {2018},\n    url = {https://doi.org/10.21105/joss.00558},\n    doi = {10.21105/joss.00558},\n}"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/barbagroup/PetIBM"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/barbagroup/PetIBM"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "PetIBM - toolbox and applications of the immersed-boundary method on distributed-memory architectures"
        ],
        "type": "Text_excerpt",
        "value": "Please e-mail [Olivier Mesnard](mailto:mesnardo@gwu.edu) or [Pi-Yueh Chuang](mailto:pychuang@gwu.edu) if you have any questions, suggestions, or feedback.\n\nTo report bugs, please use the GitHub issue tracking system.\nWe are also open to pull-requests.\n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# How to contribute to PetIBM\n\nWelcome to the developer's guide of PetIBM!\n\n## Adding new features and fixing bugs\n\nAll new features and bug fixes must go through a pull-request review procedure.\nIf you want to contribute to PetIBM, please fork the Barbagroup's [PetIBM](https://github.com/barbagroup/PetIBM) repository, make your changes on your fork, and then open a pull-request with your changes against the main PetIBM repository.\n\nFor new features and minor bugs (with small impact), the base branch of the pull-request should be the `develop` branch of the main repository.\n(The `develop` branch will be merged into the `master` one once we are ready for a new release of PetIBM.)\n\nFor major bugs, the base branch should be the `master` branch of the main repository; it will be considered as a hotfix (bugfix) and a new version of PetIBM will be released as soon as possible by the maintainers with the micro number incremented.\n\nNew features should come with some kind of test or example to verify and/or validate the implementation.\n\n\n## Reporting bugs and requesting new features\n\nTo report bugs, request new features, or simply ask questions, please open a GitHub issue on the Barbagroup's PetIBM repository.\n\n\n## Writing documentation\n\nNew classes, methods, functions, and namespaces must be documented with Doxygen-style doctrings.\n\nTo locally generate and check the Doxygen documentation, use the command-line:\n\n    > cd doc\n    > doxygen Doxyfile\n\nand open the file `doc/html/index.html` in your favorite browser.\n\nYou should also add code documentation whenever necessary; it will greatly help other developers to review your new features and bug fixes.\n\nFor new features, user's documentation must also be written.\nFor this purpose, we use Markdown files that are located in the `doc` folder of the root directory of PetIBM.\n\nThe User's documentation and API documentation are up-to-date with the latest release of PetIBM, which should be close to the latest commit on the `master` branch.\n"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2014-05-23T21:06:47Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2018-01-25"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_published": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2018-01-25"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2025-06-20T13:36:35Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2017-01-25"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PetIBM - toolbox and applications of the immersed-boundary method on distributed-memory architectures"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PetIBM is a toolbox with applications of the immersed-boundary method on distributed-memory architectures."
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 0.8766601471178138,
      "result": {
        "original_header": "PetIBM - toolbox and applications of the immersed-boundary method on distributed-memory architectures",
        "type": "Text_excerpt",
        "value": "* Immersed Boundary Projection Method (IBPM; Taira and Colonius, 2007);\n* decoupled version of the IBPM (Li et al., 2016). \nWith object-oriented design, the objects and classes in PetIBM can be re-used to develop other solvers easily, as long as the numerical methods used can fit into Perot's framework (Perot, 1993; Chang et. al, 2002).\nSee [Doxygen pages](https://barbagroup.github.io/PetIBM/modules.html) for API manual. \nPetIBM relies on the [PETSc](http://www.mcs.anl.gov/petsc/) library for data structures and parallel routines.\nLinear systems can be solved either on CPUs using PETSc KSP objects or on multiple CUDA-capable GPU devices using the NVIDIA [AmgX](https://github.com/NVIDIA/AMGX) library.\nData transfers between PETSc and AmgX are handled by [AmgXWrapper](https://github.com/barbagroup/AmgXWrapper). \n"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8812302398542358,
      "result": {
        "original_header": "Features",
        "type": "Text_excerpt",
        "value": "* multiple immersed bodies,\n* moving bodies with prescribed kinematics,\n* 2D and 3D stretched Cartesian meshes,\n* distributed-memory architectures,\n* multiple GPUs on a single node,\n* GPU clusters, and\n* HDF5 I/O. \n"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "parent_header": [
          "PetIBM - toolbox and applications of the immersed-boundary method on distributed-memory architectures"
        ],
        "type": "Text_excerpt",
        "value": "* [Quick Start](doc/markdowns)\n  * [Dependencies and Installation](doc/markdowns/installation.md)\n  * [Run PetIBM](doc/markdowns/runpetibm.md)\n  * [Input files](doc/markdowns/inputs.md)\n  * [Output files](doc/markdowns/outputs.md)\n  * [2D Examples](doc/markdowns/examples2d.md)\n  * [3D Examples](doc/markdowns/examples3d.md)\n  * [Use PetIBM API](doc/markdowns/usepetibmapi.md)\n* [Online API manual](https://barbagroup.github.io/PetIBM)\n* [Change Log](CHANGELOG.md)\n* [Contributing](CONTRIBUTING.md)\n\nOffline API manual can be generated with [Doxygen](http://www.stack.nl/~dimitri/doxygen/).\n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/barbagroup/PetIBM/wiki"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/barbagroup/PetIBM/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 52
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/barbagroup/PetIBM/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "barbagroup/PetIBM"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PetIBM - toolbox and applications of the immersed-boundary method on distributed-memory architectures"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.21105/joss.00558"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Installation\n\nPetIBM only officially supports Linux systems. MacOS and Windows may or may not work. We will not\nprovide any assist to issues of using PetIBM on MacOS and Windows.\n\n## A. Installation guide for end-users\n\nEnd-users can install PetIBM with Anaconda or use it with container technologies.\n\n### A.1. With `conda`/`mamba`\n\nWe uploaded our pre-built packages to our Anaconda channels `barbagroup`. These packages were built\nwith GPU support. Linux users can install\nthem through\n\n```\n$ mamba install -c barbagroup -c nvidia -c conda-forge \"petibm=*=cuda114*\"\n```\n\nWe suggest using `mamba`. If `conda` is preferred, just replace `mamba` with `conda`. Replace\n`install` with `create -n <env name>` instead to create a new and fresh environment.\n\nIf an older CUDA is desired (e.g., for old GPU models), we also have packages for\nCUDA 10.2, which supports old GPUs like K20/K40. To do so, use `\"petibm=*=cuda102*\"` instead.\n\n**Note**: The CUDA 10.2 variant may also work on newer GPUs and drivers.\nIf you encounter issues using the CUDA 11.4 variant with newer GPUs/drivers, it should be fine to\nuse the CUDA 10.2 variant.\nAmgX uses somehow different code w.r.t. whether it's CUDA 10 or CUDA 11, and sometimes there are\nissues in AmgX's CUDA 11 codebase.\n\n### A.2. Using container technology\n\nFor users familiar with Docker or Singularity Container (now renamed Apptainer), we provide images\nfor the both to save you from compiling, buliding, and installing:\n\n* Docker: https://hub.docker.com/repository/docker/barbagroup/petibm\n* Singularity: https://github.com/barbagroup/petibm-recipes/tree/master/singularity\n\n### A.3. Optional dependencies for example cases' post-processing\n\nThe above two installation methods only provide the solver.\nSome example cases in the `examples` folder have Python scripts for post-processing.\nTo be able to execute these Python scripts, install the following Python packages (using `mamba`/`conda`, for example):\n\n```shell\n$ mamba install -c conda-forge pyyaml numpy h5py matplotlib\n```\n\n## B. Building from the source\n\n### B.1. Using pre-built dependencies\n\nIf you just need to set up a development environment to extend/debug PetIBM, we suggest installing\ndependencies with `conda`/`mamba`:\n\n```\n$ mamba create \\\n    -n <env name> \\\n    -c barbagroup \\\n    -c nvidia \\\n    -c conda-forge \\\n    \"*amgxwrapper=*=cuda114*\" \\\n    \"yaml-cpp>=0.7\" \\\n    \"symengine>=0.9\" \\\n    \"cmake>=3.23\" \\\n    \"make\" \\\n    \"pkg-config\" \\\n    \"git\" \\\n    \"gxx_linux-64>=11.2\"\n```\n\nThe package `amgxwrapper` pulls in most of the required dependencies (e.g., petsc, cuda, etc.).\n`yaml-cpp` and `symengine` are dependencies not covered by `amgxwrapper`. `cmake`, `make`, `git`, and\n`gxx_linux-64` are for building PetIBM in case your system does not have them or they are too old.\n\nOnce the process is done, jump into the environment through either `mamba activate <env name>` or\n`source <mamba installation prefix>/bin/activate <env name>`.\n\nThe above command only installs required packages for the flow solvers.\nSee section A.3 for dependencies for post-processing with example cases.\n\nTo proceed, let's assume you would like to download PetIBM's source files to path\n`$HOME/sfw/petibm/PetIBM`, and to install PetIBM's final solvers and libraries to\n`$HOME/sfw/petibm/petibm-linux-dbg`.\n\n#### B.1.1. Obtaining the source \n\nPull the latest development version of PetIBM from GitHub:\n\n```shell\n$ cd $HOME/sfw\n$ mkdir petibm\n$ cd petibm\n$ git clone https://github.com/barbagroup/PetIBM.git\n```\n\nPetIBM's source files are now at `$HOME/sfw/petibm/PetIBM`. Our current location is at\n`$HOME/sfw/petibm`.\n\n#### B.1.2. Configuring\n\nCreate a folder to host temporary files from building and compilation:\n\n```shell\n$ mkdir build\n$ cd build\n```\n\nConfigure the build:\n\n```shell\n$ cmake \\\n    -DCMAKE_INSTALL_PREFIX=$HOME/sfw/petibm/petibm-linux-dbg \\\n    -DCMAKE_CXX_COMPILER=${CXX} \\\n    -DCMAKE_BUILD_TYPE=Debug \\\n    -DPETSC_DIR=$CONDA_PREFIX \\\n    -DPETSC_ARCH=\"\" \\\n    -DCUDA_DIR=$CONDA_PREFIX \\\n    -DAMGX_DIR=$CONDA_PREFIX \\\n    -DAMGXWRAPPER_DIR=$CONDA_PREFIX \\\n    -DYAMLCPP_DIR=$CONDA_PREFIX \\\n    -DSYMENGINE_DIR=$CONDA_PREFIX \\\n    -DPETIBM_ENABLE_TESTS=ON \\\n    -DPETIBM_USE_AMGX=ON \\\n    $HOME/sfw/petibm/PetIBM\n```\n\n* PETSc, CUDA, AmgX, AmgXWrapper, and yaml-cpp were all installed through `mamba` (or `conda`), so\n  their paths are `$CONDA_PREFIX`.\n* `-DPETIBM_ENABLE_TESTS` controls whether to build unit tests.\n* `-DPETIBM_USE_AMGX` notifies PetIBM to build against GPU-related code.\n\nLater on when you want to have a production build, just change `-DCMAKE_BUILD_TYPE` from `Debug` to\n`Release`. (And you may also want to change the installation path in `-DCMAKE_INSTALL_PREFIX`.)\n\n#### B.1.3. Building and installing\n\nStart to build:\n\n```shell\n$ make all -j <number of CPUs>\n```\n\nSpecifying the number of CPUs with `<number of CPUS>` to speed up the compilation procedure.\n\nWe can do some unit tests:\n\n```shell\n$ make check\n```\n\nThen install the final solvers and libraries:\n\n```shell\n$ make install\n```\n\nThe solvers are now available at `$HOME/sfw/petibm/petibm-linux-dbg/bin`.\n\n### B.2. Building dependencies from scratch\n\nIf you would like to build everything from scratch, here's the list of dependencies:\n\n**Required**:\n\n* GNU C++ compiler g++ (9.4 and 11.2 have been test with the latest PetIBM release)\n* [PETSc](https://www.mcs.anl.gov/petsc/) (3.16+) with parallel HDF5 enabled\n* MPI: OpenMPI, MPICH, or Intel MPI\n* [yaml-cpp](https://github.com/jbeder/yaml-cpp) (0.7.0+)\n* [SymEngine](https://github.com/symengine/symengine) (0.9+)\n\n**Optional for GPU linear solvers**:\n\n* [AmgX](https://github.com/NVIDIA/AMGX) (v2.2.0)\n* [AmgXWrapper](https://github.com/barbagroup/AmgXWrapper) (1.6.1+)\n\n**Optional for pre- and post-processing Python scripts**:\n\n* Python (3.6+)\n* NumPy (1.12.1+)\n* h5py (2.7.0+)\n* Matplotlib (2.0.2+)\n* pyyaml (6.0+)\n\n**Note**:\n\n* [yaml-cpp](https://github.com/jbeder/yaml-cpp) and\n  [AmgXWrapper](https://github.com/barbagroup/AmgXWrapper)\n  can be automatically installed during PetIBM configuration.\n* MPI can be either installed during [PETSc configuration](#petsc) or installed explicitly by users.\n  If you are using HPC clusters, it's better to use the shipped MPI packages on the clusters because\n  they usually have specific optimizations for the clusters' hardware. NVIDIA's HPC-X is another\n  alternative, which includes OpenMPI optimized for NVIDIA's HPC infrastructure.\n* The latest release of PetIBM (0.5.4) has been tested with:\n    * Arch Linux with g++\\-11.2.0 and PETSc v3.16.6\n    * Ubuntu 20.04 with g++\\-9.4 and PETSc v3.16.6\n* Though not suggested, if using older compilers are desired, previous releases of PetIBM (before\n  v0.5.2) have at some point been tested with the following combinations. However, we will not\n  provide any support for using older versions of PetIBM.\n    * Ubuntu 16.04 with g++ v5.4, and PETSc v3.11.2\n    * MacOS Sierra with g++ v6.0, and PETSc v3.8.2\n    * Arch Linux with g++ v7.2, and PETSc v3.8.2\n\n#### B.2.1. Compilers and configuration tools\n\nDifferent linux distributions use different package management systems. Here we use Ubuntu 20.04 as\nan example. Assuming you have permission to use `sudo`, to install compilers and tools:\n\n```shell\n$ sudo apt-get install build-essential pkg-config make git curl\n```\n\nYou can check the version of G++ installed with `g++ --version`.\n\nNow we also need `cmake`. Unfortunately, `cmake` from Ubuntu 20.04 is too old. We need to install it\nfrom upstream directly:\n\n```shell\n$ curl -LO https://github.com/Kitware/CMake/releases/download/v3.23.1/cmake-3.23.1-linux-x86_64.sh\n$ sudo sh ./cmake-3.23.1-linux-x86_64.sh --prefix=/usr --exclude-subdir --skip-license\n```\n\nThis will install the `cmake` v3.23 to `/usr` as if it's a package from the package manager.\n\n\n#### B.2.2. Building SymEngine\n\nSymEngine requires some other third-party dependencies.\nThe building process is not trivial.\nHence we are not covering how to build and install SymEngine.\nSome Linux distributions officially provide pre-built SymEngine.\nFor example, in Arch Linux, the pre-built SymEngine can be installed with `sudo pacman -S symengine`.\nCheck with your Linux distribution's package manager first.\n\nIf building SymEngine from scratch is needed, please refer to SymEngine's documentation [here](https://github.com/symengine/symengine#building-from-source).\n\n\n#### B.2.3. Building PETSc\n\nHere, we provide the command-line instructions to install PETSc v3.16.6. PETSc is powerful and has a\nlot of options to configure and for different levels of optimizations. We only show the bare minimum\nconfiguration that at least work for PetIBM.\n\nGet and unpack PETSc:\n\n```shell\n$ cd $HOME/sfw\n$ mkdir -p petsc/3.16.6\n$ curl -LO http://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-lite-3.16.6.tar.gz\n$ tar -xvf petsc-lite-3.16.6.tar.gz -C petsc/3.16.6 --strip-components=1\n$ cd petsc/3.16.6\n```\n\nConfigure and build PETSc in debugging mode:\n\n```shell\n$ export PETSC_DIR=$HOME/sfw/petsc/3.16.6\n$ export PETSC_ARCH=linux-dbg\n$ ./configure --PETSC_DIR=$PETSC_DIR --PETSC_ARCH=$PETSC_ARCH \\\n    --with-cc=gcc \\\n    --with-cxx=g++ \\\n    --with-fc=0 \\\n    --with-pic=1 \\\n    --with-shared-libraries=1 \\\n    --with-debugging=1 \\\n    --with-fortran-bindings=0 \\\n    --download-f2cblaslapack \\\n    --download-openmpi \\\n    --download-hdf5 \\\n    --download-hypre \\\n    --download-ptscotch \\\n    --download-metis \\\n    --download-parmetis \\\n    --download-superlu_dist\n$ make all\n$ make test\n```\n\nTo configure and build PETSc for production runs, change the value of `--with-debugging` form `1` to\n`0`, and add `--COPTFLAGS=\"-O3\" --CXXOPTFLAGS=\"-O3\"` to the list of flags. You may also want to\nchange the name in `PETSC_ARCH`.\n\nThe above configuration also downloads and installs OpenMPI. However, it is not optimized. When\nrunning the code on an external cluster, we suggest configure and build PETSc with a proper\nMPI package for performance.\n\nTo understand and use a more advanced configuration of PETSc, please refer to\n[PETSc's instructions](http://www.mcs.anl.gov/petsc/documentation/installation.html). Also, you\ncan run `./configure --help` to list all available configure flags.\n\n#### B.2.3. Building PetIBM\n\nHere we will build a CPU-only PetIBM with `yaml-cpp` being installed automatically.\n\nPull the latest development version of PetIBM from GitHub:\n\n```shell\n$ cd $HOME/sfw\n$ mkdir petibm\n$ cd petibm\n$ git clone https://github.com/barbagroup/PetIBM.git\n```\n\nConfigure and build PetIBM:\n\n```shell\n$ export PETSC_DIR=$HOME/sfw/petsc/3.16.6\n$ export PETSC_ARCH=linux-dbg\n$ cmake \\\n    -DCMAKE_INSTALL_PREFIX=$HOME/sfw/petibm/petibm-linux-dbg \\\n    -DCMAKE_CXX_COMPILER=$PETSC_DIR/$PETSC_ARCH/bin/mpicxx \\\n    -DCMAKE_BUILD_TYPE=Debug \\\n    -DPETSC_DIR=$PETSC_DIR \\\n    -DPETSC_ARCH=$PETSC_ARCH \\\n    -DSYMENGINE_DIR=<path to SymEngine> \\\n    -DPETIBM_ENABLE_TESTS=ON \\\n    -DPETIBM_USE_AMGX=OFF \\\n    -DPETIBM_BUILD_YAMLCPP=ON \\\n    $HOME/sfw/petibm/PetIBM\n$ make all\n$ make check -j <num CPUs>\n$ make install\n```\n\nFor production runs, change the value of `-DCMAKE_BUILD_TYPE` to `Release` and refer to the\ncorresponding PETSc builds in `-DPETSC_DIR` and `-DPETSC_ARCH`.\n\nEt voila! Now PetIBM is installed to `$HOME/sfw/petibm/petibm-linux-dbg`.\n\n#### B.2.4. Optional: using NVIDIA AmgX to solve linear systems on multiple GPUs\n\nPetIBM's GPU support comes from NVIDIA's [AmgX](https://github.com/NVIDIA/AMGX). And the interface\nbetween PETSc and AmgX is provided by [AmgXWrapper](https://github.com/barbagroup/AmgXWrapper).\n\nBuilding AmgX is an expensive job. Without a powerful machine, building AmgX may take hours. Hence\nwe would like to refer interested readers to AmgX's manual for how to build and install it.\n\nOnce AmgX is available on your machine, AmgXWrapper can be automatically downloaded and installed\nduring installing PetBM:\n\n```shell\n$ export PETSC_DIR=$HOME/sfw/petsc/3.16.6\n$ export PETSC_ARCH=linux-dbg\n$ cmake \\\n    -DCMAKE_INSTALL_PREFIX=$HOME/sfw/petibm/petibm-linux-dbg \\\n    -DCMAKE_CXX_COMPILER=$PETSC_DIR/$PETSC_ARCH/bin/mpicxx \\\n    -DCMAKE_BUILD_TYPE=Debug \\\n    -DPETSC_DIR=$PETSC_DIR \\\n    -DPETSC_ARCH=$PETSC_ARCH \\\n    -DCUDA_DIR=<path to cuda> \\\n    -DAMGX_DIR=<path to amgx> \\\n    -DPETIBM_ENABLE_TESTS=ON \\\n    -DPETIBM_USE_AMGX=ON \\\n    -DPETIBM_BUILD_YAMLCPP=ON \\\n    -DPETIBM_BUILD_AMGXWRAPPER=ON \\\n    $HOME/sfw/petibm/PetIBM\n$ make all\n$ make check -j <num CPUs>\n$ make install\n```\n\n## C. PetIBM examples\n\nExamples files are installed at `<PetIBM installation>/share/petibm/examples`. For example, for\ninstallation with `conda`/`mamba`, the `<PetIBM installation>` is `$CONDA_PREFIX`.\n"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/doc/markdowns/installation.md",
      "technique": "file_exploration"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/barbagroup/PetIBM/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "computational-fluid-dynamics, gpu-computing, immersed-boundary-method, nvidia-amgx, petsc"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": [
          "Computational Fluid Dynamics",
          "Immersed-Boundary Method",
          "PETSc",
          "GPU",
          "NVIDIA AmgX"
        ]
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "BSD 2-Clause",
        "spdx_id": "BSD-2-Clause",
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2014-2015, Anush Krishnan, Olivier Mesnard\nCopyright (c) 2016-2020, Barba group\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/BSD 3-Clause",
        "spdx_id": "BSD 3-Clause",
        "type": "License",
        "value": "BSD 3-Clause"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PetIBM"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "barbagroup"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 574087,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 23442,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 4928,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "piyueh",
          "type": "User"
        },
        "date_created": "2022-05-30T19:46:16Z",
        "date_published": "2022-05-30T19:50:38Z",
        "description": "* transitioned to CMake system\r\n* made the API examples more independent of PetIBM\r\n* enabled symbolic expression for initial conditions\r\n* fixed iteration number of AmgX wrapper\r\n* updated documentation correspondingly",
        "html_url": "https://github.com/barbagroup/PetIBM/releases/tag/v0.5.4",
        "name": "v0.5.4",
        "release_id": 68184220,
        "tag": "v0.5.4",
        "tarball_url": "https://api.github.com/repos/barbagroup/PetIBM/tarball/v0.5.4",
        "type": "Release",
        "url": "https://api.github.com/repos/barbagroup/PetIBM/releases/68184220",
        "value": "https://api.github.com/repos/barbagroup/PetIBM/releases/68184220",
        "zipball_url": "https://api.github.com/repos/barbagroup/PetIBM/zipball/v0.5.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "piyueh",
          "type": "User"
        },
        "date_created": "2022-03-18T21:44:48Z",
        "date_published": "2022-03-18T21:52:09Z",
        "description": "**Changed**\r\n\r\n- Upgrade PETSc to version 3.16\r\n- Added information of Docker and Singularity images.\r\n- Updated dependency information.",
        "html_url": "https://github.com/barbagroup/PetIBM/releases/tag/v0.5.3",
        "name": "v0.5.3",
        "release_id": 62230503,
        "tag": "v0.5.3",
        "tarball_url": "https://api.github.com/repos/barbagroup/PetIBM/tarball/v0.5.3",
        "type": "Release",
        "url": "https://api.github.com/repos/barbagroup/PetIBM/releases/62230503",
        "value": "https://api.github.com/repos/barbagroup/PetIBM/releases/62230503",
        "zipball_url": "https://api.github.com/repos/barbagroup/PetIBM/zipball/v0.5.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "piyueh",
          "type": "User"
        },
        "date_created": "2020-07-13T14:31:30Z",
        "date_published": "2020-09-07T16:04:27Z",
        "description": "## 0.5.2\r\n\r\n---\r\n\r\n### Added\r\n\r\n### Changed\r\n\r\nCopyright year.\r\n\r\n### Fixed\r\n\r\nIssue #157 \r\nIssue #151 \r\n\r\n### Removed",
        "html_url": "https://github.com/barbagroup/PetIBM/releases/tag/v0.5.2",
        "name": "v0.5.2",
        "release_id": 30863635,
        "tag": "v0.5.2",
        "tarball_url": "https://api.github.com/repos/barbagroup/PetIBM/tarball/v0.5.2",
        "type": "Release",
        "url": "https://api.github.com/repos/barbagroup/PetIBM/releases/30863635",
        "value": "https://api.github.com/repos/barbagroup/PetIBM/releases/30863635",
        "zipball_url": "https://api.github.com/repos/barbagroup/PetIBM/zipball/v0.5.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mesnardo",
          "type": "User"
        },
        "date_created": "2020-02-08T23:59:10Z",
        "date_published": "2020-02-09T00:00:38Z",
        "description": "## 0.5.1\r\n\r\n---\r\n\r\n### Added\r\n\r\n### Changed\r\n\r\n### Fixed\r\n\r\n* `ProbeVolume`: write a PETSc Index Set to the output file (HDF5 or ASCII) for the volume probe. The index set contains the natural index of the points located inside the volume being monitored. During post-processing stage, the index set can be used to re-arrange field values of the sub-volume and visualize the solution. Without this index set, the PETSc vector for the sub-volume (obtained with the PETSc routine `VecGetSubVector`) did not output the values in the natural ordering of the vector. `VecGetSubVector` simply concatenates the values in the parallel ordering of the vector. This problem only affected simulations running with multiple MPI processes where the window being monitored span over multiple process domains. (See PR #147.)\r\n\r\n### Removed",
        "html_url": "https://github.com/barbagroup/PetIBM/releases/tag/v0.5.1",
        "name": "v0.5.1",
        "release_id": 23508360,
        "tag": "v0.5.1",
        "tarball_url": "https://api.github.com/repos/barbagroup/PetIBM/tarball/v0.5.1",
        "type": "Release",
        "url": "https://api.github.com/repos/barbagroup/PetIBM/releases/23508360",
        "value": "https://api.github.com/repos/barbagroup/PetIBM/releases/23508360",
        "zipball_url": "https://api.github.com/repos/barbagroup/PetIBM/zipball/v0.5.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mesnardo",
          "type": "User"
        },
        "date_created": "2019-12-11T21:36:21Z",
        "date_published": "2019-12-11T21:42:25Z",
        "description": "### Added\r\n\r\n* Allow to configure PetIBM against PETSc 3.12.x.\r\n\r\n### Changed\r\n\r\n* Default directory to output files generated by PetIBM is now the `output` folder in the current working directory. (User has the possibility to change the path of the output directory with the command-line option `-output <path of the folder>`.)\r\n* Use PETSc-3.12.2 to test PetIBM with Travis CI.\r\n* Copy `examples` folder into installation directory upon `make install`.\r\n\r\n### Fixed\r\n\r\n* Fix name of the file used to output the body coordinates; bug only affected simulations dealing with multiple immersed bodies with prescribed kinematics.\r\n\r\n### Removed\r\n\r\n* Dockerfile files and Singularity recipes. These files are now version-controlled in a separate GitHub repository: [`petibm-recipes`](https://github.com/barbagroup/petibm-recipes).",
        "html_url": "https://github.com/barbagroup/PetIBM/releases/tag/v0.5",
        "name": "v0.5",
        "release_id": 22159863,
        "tag": "v0.5",
        "tarball_url": "https://api.github.com/repos/barbagroup/PetIBM/tarball/v0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/barbagroup/PetIBM/releases/22159863",
        "value": "https://api.github.com/repos/barbagroup/PetIBM/releases/22159863",
        "zipball_url": "https://api.github.com/repos/barbagroup/PetIBM/zipball/v0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mesnardo",
          "type": "User"
        },
        "date_created": "2019-07-19T20:09:34Z",
        "date_published": "2019-07-19T20:11:15Z",
        "description": "### Added\r\n\r\n* Add possibility to choose the order of the truncated Taylor series expansion for the inverse of the implicit operator. The order can be set in the YAML configuration file using the key `BN` under the YAML node `parameters`. (The default value is `BN: 1`.)\r\n\r\n### Changed\r\n\r\n* Use `-pc_factor_mat_solver_type` instead of `-pc_factor_mat_solver_package` in the configuration files for the forces solver. (This removes the deprecation warning when using PETSc-3.9+.)\r\n\r\n### Fixed\r\n\r\n* Probes: fix index for pressure field when using a volume probe (see PR [#145](https://github.com/barbagroup/PetIBM/pull/145)).\r\n\r\n### Removed\r\n",
        "html_url": "https://github.com/barbagroup/PetIBM/releases/tag/v0.4.2",
        "name": "v0.4.2",
        "release_id": 18742429,
        "tag": "v0.4.2",
        "tarball_url": "https://api.github.com/repos/barbagroup/PetIBM/tarball/v0.4.2",
        "type": "Release",
        "url": "https://api.github.com/repos/barbagroup/PetIBM/releases/18742429",
        "value": "https://api.github.com/repos/barbagroup/PetIBM/releases/18742429",
        "zipball_url": "https://api.github.com/repos/barbagroup/PetIBM/zipball/v0.4.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mesnardo",
          "type": "User"
        },
        "date_created": "2019-06-06T22:51:11Z",
        "date_published": "2019-06-06T22:53:00Z",
        "description": "### Added\r\n\r\n### Changed\r\n\r\n### Fixed\r\n\r\n* Probes: monitor the correct sub-domain using indices with PETSc ordering, not natural ordering (see PR [#144](https://github.com/barbagroup/PetIBM/pull/144)).\r\n\r\n### Removed\r\n",
        "html_url": "https://github.com/barbagroup/PetIBM/releases/tag/v0.4.1",
        "name": "v0.4.1",
        "release_id": 17840024,
        "tag": "v0.4.1",
        "tarball_url": "https://api.github.com/repos/barbagroup/PetIBM/tarball/v0.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/barbagroup/PetIBM/releases/17840024",
        "value": "https://api.github.com/repos/barbagroup/PetIBM/releases/17840024",
        "zipball_url": "https://api.github.com/repos/barbagroup/PetIBM/zipball/v0.4.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mesnardo",
          "type": "User"
        },
        "date_created": "2018-11-30T21:46:31Z",
        "date_published": "2018-11-30T21:49:57Z",
        "description": "### Added\r\n\r\n* Add possibility to use configuration arguments `--with-<package>-include=<path>` and `--with-<package>-lib=<path>` (instead of `--with-<package>-dir=<path>`) for yaml-cpp, gtest, AmgX, and AmgXWrapper. (`--with-<package>-dir=<path>` is still supported for those packages.)\r\n* Add classes to monitor the solution in sub-regions or at specific points (using linear interpolation). YAML configuration should be provided in the node \"probes\". (See Markdown documentation `doc/markdowns/inputs.md` for details on how to use.)\r\n* Install application header files upon make install call. The header files are installed in the include folder of the install directory. A user can now create new classes that inherits from an application class.\r\n* Add a simple class `RigidKinematicsSolver` in the applications folder to handle cases with moving rigid bodies (with prescribed kinematics). The user should create a class that inherits from `RigidKinematcsSolver` and that implements the methods to update the coordinates and velocity of the Lagrangian points, `setCoordinatesBodies` and `setVelocityBodies`.) For example, if you want to compute the flow around a flapping wing, you just have to create a class (outside the PetIBM source directory) that inherits from the application class `RigidKinematicsSolver` and implement the case-specific methods to update the location and velocity of the wing.\r\n* Add possibility to implement different kernels for the regularized delta function. (The 3-point delta function from Roma et al. (1999) and the 4-point delta function from Peskin (2002) are currently available in PetIBM.)\r\n\r\n### Changed\r\n\r\n* Upgrade to yaml-cpp-0.6.2 when downloading building yaml-cpp at PetIBM configuration time (configuration flag `--enable-yamlcpp`).\r\n* Re-format code with clang-format. The clang-format style file is added to the repository.\r\n* Re-write I/O functions to provide file paths that include the extension.\r\n* Re-write application codes to simplify main functions (move PetIBM object instantiations into the init method of the application class).\r\n* Change the scheme for the prediction of the forces at the beginning of a time step. Now using the forces from the previous time steps as prediction. (This is named \"scheme 2\" in Li et al., 2016.) Using this scheme avoids having to reset the vector of the Lagrangian momentum forcing every time step. (According to the authors there is little difference in the results between the different forcing schemes.)\r\n* For each example, move the configuration files for the solvers into the sub-folder `config` of the simulation directory.\r\n* Update the example for the 2D in-line oscillating cylinder to use the newly implemented application class `RigidKinematicsSolver`.\r\n\r\n### Fixed\r\n\r\n\r\n### Removed\r\n\r\n* Remove Boost dependency; configuration does not check for Boost anymore.",
        "html_url": "https://github.com/barbagroup/PetIBM/releases/tag/v0.4",
        "name": "v0.4",
        "release_id": 14291184,
        "tag": "v0.4",
        "tarball_url": "https://api.github.com/repos/barbagroup/PetIBM/tarball/v0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/barbagroup/PetIBM/releases/14291184",
        "value": "https://api.github.com/repos/barbagroup/PetIBM/releases/14291184",
        "zipball_url": "https://api.github.com/repos/barbagroup/PetIBM/zipball/v0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mesnardo",
          "type": "User"
        },
        "date_created": "2018-05-25T21:13:48Z",
        "date_published": "2018-05-25T21:15:55Z",
        "description": "## 0.3.1\r\n\r\n---\r\n\r\n**JOSS revision.**\r\n\r\n### Added\r\n\r\n* Add section in README and documentation on how to use the API.\r\n* Add simple Navier-Stokes solver using the PetIBM API in the folder `examples/api_examples`.\r\n\r\n### Changed\r\n\r\n* Rename application code `tairacolonius` into `ibpm` (Immersed Boundary Projection Method); binary program now named `petibm-ibpm`.\r\n* Make YAML converters and operator< private.\r\n* Move example of oscillating cylinder to folder `examples/api_examples`.\r\n* Update optional dependency `AmgXWrapper` with latest version (1.4).\r\n\r\n### Fixed\r\n\r\n* Remove MPI barrier in routine that creates a directory.\r\n* Fixed memory leaks in solver programs and utility programs.\r\n\r\n### Removed\r\n",
        "html_url": "https://github.com/barbagroup/PetIBM/releases/tag/v0.3.1",
        "name": "v0.3.1",
        "release_id": 11185624,
        "tag": "v0.3.1",
        "tarball_url": "https://api.github.com/repos/barbagroup/PetIBM/tarball/v0.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/barbagroup/PetIBM/releases/11185624",
        "value": "https://api.github.com/repos/barbagroup/PetIBM/releases/11185624",
        "zipball_url": "https://api.github.com/repos/barbagroup/PetIBM/zipball/v0.3.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mesnardo",
          "type": "User"
        },
        "date_created": "2018-05-12T00:00:58Z",
        "date_published": "2018-05-12T00:04:50Z",
        "description": "### Added\r\n\r\n### Changed\r\n\r\n* Update version of AmgXWrapper (from `1.0-beta2` to `1.4`).\r\n* Update calls to AmgXWrapper routines (due to changes in API).\r\n* AmgXWrapper-1.4 requires to use PETSc-3.8+. Therefore, when configuring with AmgX, use PETSc-3.8+.\r\n\r\n### Fixed\r\n\r\n* When checking for AmgX, find and keep only the first occurrence of `libamgxsh.so`.\r\n\r\n### Removed\r\n\r\n* When configuring with AmgX, do not check the version of OpenMPI anymore.\r\n* Do not check for Doxygen.",
        "html_url": "https://github.com/barbagroup/PetIBM/releases/tag/v0.2.1",
        "name": "v0.2.1",
        "release_id": 10968133,
        "tag": "v0.2.1",
        "tarball_url": "https://api.github.com/repos/barbagroup/PetIBM/tarball/v0.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/barbagroup/PetIBM/releases/10968133",
        "value": "https://api.github.com/repos/barbagroup/PetIBM/releases/10968133",
        "zipball_url": "https://api.github.com/repos/barbagroup/PetIBM/zipball/v0.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mesnardo",
          "type": "User"
        },
        "date_created": "2018-01-26T17:12:47Z",
        "date_published": "2018-01-26T17:34:55Z",
        "description": "WARNING: this is a major re-factorization of the code that is not backward compatible.\r\n\r\n### Added\r\n\r\n* PetIBM is now a library.\r\n* Add `include` folder with all header files.\r\n* Add `applications` folder with code applications that use the PetIBM library.\r\n* Add some unit-tests.\r\n* Add instructions on how to contribute (`CONTRIBUTING.md`).\r\n* Add multi-body example (2 vertically aligned cylinders at Re=100).\r\n* Add moving-body example (oscillating cylinder at Re=100).\r\n* Require PETSc-3.8.\r\n\r\n### Changed\r\n\r\n* Code is now under the BSD 3-clause license.\r\n* Move from a single PetIBM executable to a PetIBM library with a set of application codes (Navier-Stokes solver, immersed-boundary method solvers, and post-processing utilities to compute the vorticity field and generate XMDF files).\r\n* Update user's documentation and API documentation. (Markdown files for user's documentation are now in `doc/markdowns`; API documentation is generated with Doxygen into `doc/hmtl`.)\r\n* External dependencies such as yaml-cpp, Boost, Gtest, and AmgXWrapper are now optional; they can be installed separately or when configuring PetIBM.\r\n* Application codes solve the systems for the velocity components, not anymore for the velocity fluxes.\r\n* Update previous examples with new configuration file.\r\n* Update Travis CI build to cache PETSc-3.8.2.\r\n\r\n### Fixed\r\n\r\n\r\n### Removed\r\n\r\n* Remove all Python scripts from the `scripts` folder. (It contained old Python scripts that were not used anymore.)\r\n* Cannot output the fields into PETSc binary format; only HDF5 is supported.\r\n* Remove Wiki pages. (User's documentation and API documentation now available [here](https://barbagroup.github.io/PetIBM).)",
        "html_url": "https://github.com/barbagroup/PetIBM/releases/tag/v0.3",
        "name": "v0.3",
        "release_id": 9405399,
        "tag": "v0.3",
        "tarball_url": "https://api.github.com/repos/barbagroup/PetIBM/tarball/v0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/barbagroup/PetIBM/releases/9405399",
        "value": "https://api.github.com/repos/barbagroup/PetIBM/releases/9405399",
        "zipball_url": "https://api.github.com/repos/barbagroup/PetIBM/zipball/v0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mesnardo",
          "type": "User"
        },
        "date_created": "2017-04-26T21:58:32Z",
        "date_published": "2017-04-26T22:02:19Z",
        "description": "### Added\r\n\r\n* Compatibility with PETSc-3.7 (last tested 3.7.4; cannot use 3.5 and 3.6 anymore).\r\n* A change log.\r\n* Possibility to output the numerical solution in HDF5 format.\r\n* Possibility to output the flux and/or velocity variables.\r\n* Python script `createXMFFile.py` that generates a `.xmf` file to let VisIt know how to read the HDF5 files.\r\n* [AmgXWrapper](https://github.com/barbagroup/AmgXWrapper) as an optional external package (version v1.0-beta).\r\n* Examples to solve the 2D flow around a circular cylinder using AmgX.\r\n* Possibility to have multiple immersed boundaries.\r\n* Decoupled IBPM solver (as published in [Li et al., 2016](http://www.sciencedirect.com/science/article/pii/S0045793016302833))\r\n\r\n### Changed\r\n\r\n* Comply Python pre- and post-processing scripts to PEP8.\r\n* Move `validation_data` files to `scripts/python/verification/data` and `scripts/python/validation/data`.\r\n* GAMG parameters for the 2D lid-driven cavity flow to make it run.\r\n* Update external package AmgXWrapper to version 1.0-beta2.\r\n\r\n### Fixed\r\n* Update boundary ghost points only once per time step, at the beginning of the time step.\r\n* Bug-fix in the methods `generateBNQ()` of the class `TairaColoniusSolver` and `generateET` of the class `LiEtAlSolver`: calculate the correct widths of the computational domain (fixed index).\r\n\r\n### Removed\r\n\r\n* Python script `restartFromSolution.py` (not finished and not necessary).\r\n* Non-zero initial guess as default for KSPs; the user should add `-ksp_initial_guess_nonzero true` to the command-line (or configuration file) to switch on a nonzero initial for a specific KSP.",
        "html_url": "https://github.com/barbagroup/PetIBM/releases/tag/v0.2",
        "name": "v0.2",
        "release_id": 6201802,
        "tag": "v0.2",
        "tarball_url": "https://api.github.com/repos/barbagroup/PetIBM/tarball/v0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/barbagroup/PetIBM/releases/6201802",
        "value": "https://api.github.com/repos/barbagroup/PetIBM/releases/6201802",
        "zipball_url": "https://api.github.com/repos/barbagroup/PetIBM/zipball/v0.2"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contributors",
    "usage",
    "faq",
    "support",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2025-09-19 00:24:23",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 110
      },
      "technique": "GitHub_API"
    }
  ],
  "version": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "v0.3"
      },
      "source": "https://raw.githubusercontent.com/barbagroup/PetIBM/master/codemeta.json",
      "technique": "code_parser"
    }
  ]
}