{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "parent_header": [
          "3TST - A Steiner Tree Heuristic"
        ],
        "type": "Text_excerpt",
        "value": "Emmanuel Arrighi acknowledges support from the Research Council of Norway in the\ncontext of the project Parameterized Complexity for Practical Computing (Grant no. 274526)\n\nMateus de Oliveira Oliveira acknowledges support from the Research Council of \nNorway in the context of the project Automated Theorem Proving from the Mindset of \nParameterized Complexity Theory (Grant no. 288761). \n\nWe also acknowledge support from the Sigma2 Network (Proj. no. NN9535K)\n"
      },
      "source": "https://raw.githubusercontent.com/AutoProving/3TST/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "authors": [
    {
      "confidence": 1,
      "result": {
        "given_name": "Emmanuel",
        "last_name": "Arrighi (https://orcid.org/0000-0002-0326-1893)",
        "name": "Emmanuel Arrighi (https://orcid.org/0000-0002-0326-1893)",
        "type": "Agent",
        "value": "Emmanuel Arrighi (https://orcid.org/0000-0002-0326-1893)"
      },
      "source": "https://raw.githubusercontent.com/AutoProving/3TST/master/AUTHORS",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "given_name": "Mateus",
        "last_name": "de Oliveira Oliveira (https://orcid.org/0000-0001-7798-7446)",
        "name": "Mateus de Oliveira Oliveira (https://orcid.org/0000-0001-7798-7446)",
        "type": "Agent",
        "value": "Mateus de Oliveira Oliveira (https://orcid.org/0000-0001-7798-7446)"
      },
      "source": "https://raw.githubusercontent.com/AutoProving/3TST/master/AUTHORS",
      "technique": "file_exploration"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "3TST - A Steiner Tree Heuristic"
        ],
        "type": "Text_excerpt",
        "value": "To cite our heuristics, please refer to the following paper.\n\nEmmanuel Arrighi, Mateus de Oliveira Oliveira. Three is Enough for Steiner Trees. \n19th Symposium on Experimental Algorithms.\n"
      },
      "source": "https://raw.githubusercontent.com/AutoProving/3TST/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/AutoProving/3TST"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/AutoProving/3TST"
      },
      "source": "https://raw.githubusercontent.com/AutoProving/3TST/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-10-07T10:23:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_published": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2021-05-19"
      },
      "source": "https://raw.githubusercontent.com/AutoProving/3TST/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-10-22T22:52:14Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2021-05-19"
      },
      "source": "https://raw.githubusercontent.com/AutoProving/3TST/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "3-Terminal Steiner Tree (3TST) is a heuristic for the Steiner tree problem. Intuitively, the heuristic works by replacing 3-terminal subtrees of a prospective solution with lighter 3-terminal subtrees. This process is repeated until no significant improvement is observed in a reasonable amount of time."
      },
      "source": "https://raw.githubusercontent.com/AutoProving/3TST/master/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 0.9524170207279012,
      "result": {
        "original_header": "3TST - A Steiner Tree Heuristic",
        "type": "Text_excerpt",
        "value": "3-Terminal Steiner Tree (3TST) is a heuristic for the Steiner tree problem. Intuitively, the heuristic works\nby replacing 3-terminal subtrees of a prospective solution with lighter 3-terminal subtrees. This process\nis repeated until no significant improvement is observed in a reasonable amount of time. \n \n"
      },
      "source": "https://raw.githubusercontent.com/AutoProving/3TST/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8748539794472128,
      "result": {
        "original_header": "Input/Output Formats",
        "type": "Text_excerpt",
        "value": "The input format for graphs and the output format for Steiner trees are the\nsame used at PACE Challenge 2018. Please refer to the file [INPUT_OUTPUT.md](INPUT_OUTPUT.md)\nfor a description of these formats. Alternatively, please read Sections\nA and B of the following link: \n"
      },
      "source": "https://raw.githubusercontent.com/AutoProving/3TST/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/AutoProving/3TST/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/AutoProving/3TST/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AutoProving/3TST"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "3TST - A Steiner Tree Heuristic"
      },
      "source": "https://raw.githubusercontent.com/AutoProving/3TST/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/AutoProving/3TST/issues"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/AutoProving/3TST/issues"
      },
      "source": "https://raw.githubusercontent.com/AutoProving/3TST/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Emmanuel Arrighi and Mateus de Oliveira Oliveira\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/AutoProving/3TST/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/https://spdx.org/licenses/MIT",
        "spdx_id": "https://spdx.org/licenses/MIT",
        "type": "License",
        "value": "https://spdx.org/licenses/MIT"
      },
      "source": "https://raw.githubusercontent.com/AutoProving/3TST/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "3TST"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "3TST - A Steiner Tree Heuristic"
      },
      "source": "https://raw.githubusercontent.com/AutoProving/3TST/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "AutoProving"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 57154,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 477,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "type": "Programming_language",
        "value": "C++",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/AutoProving/3TST/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AutoProving/3TST/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example",
    "keywords"
  ],
  "somef_provenance": {
    "date": "2025-09-19 00:22:49",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Bug Reports and User Feedback",
        "parent_header": [
          "3TST - A Steiner Tree Heuristic"
        ],
        "type": "Text_excerpt",
        "value": "Please report bugs or ask questions using the issue tracker a [https://github.com/AutoProving/3TST/issues](https://github.com/AutoProving/3TST/issues)\n"
      },
      "source": "https://raw.githubusercontent.com/AutoProving/3TST/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "3TST - A Steiner Tree Heuristic"
        ],
        "type": "Text_excerpt",
        "value": "The simplest way of executing the program is to run the following command.\nIt will read the input graph from the standard input and print a Steiner tree\non the standard output. This is a deterministic procedure. It can be stopped\nmanually using a `SIGINT` or a `SIGTERM`.\n\n```sh\n./3TST.exe < examples/instance1.gr\n```\n\nThe `timeout` command can be used to run it with a time limit.\n\n```sh\ntimeout -s TERM 10s ./3TST.exe < examples/instance1.gr\n```\n\nThe option `-h` or `--help` prints the help message\n\n```sh\n./3TST.exe --help\n```\n\nThe option `-r` or `--random` enables the use of a randomised procedure. This option makes\nthe program run until it receives a SIGTERM or SIGINT otherwise it will never stop.\nIn this case the `timeout` command is useful.\n\n```sh\ntimeout -s TERM 90s ./3TST.exe --random < examples/instance1.gr\n```\n\nIt is possible to give a specific seed to initialise the random number generator using\nthe flag `-s` or `--seed`. This flag have effect only with the `--random` option.\nIn the example below, the seed is 10.\n\n```sh\n./3TST.exe -r -s 10 < examples/instance1.gr\n```\n\nWith the option `-i` or `--improve` we can execute the program on a graph instance\ntogether with an initial Steiner tree. In this case, the program will try to improve\nthe Steiner tree. This is a deterministic procedure. `--random` and\n`--seed` have no effect with `--improve`.\n\n```sh\ncat examples/instance1.gr examples/steinertree1.ost | ./3TST.exe -i\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/AutoProving/3TST/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "version": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "1.0.0"
      },
      "source": "https://raw.githubusercontent.com/AutoProving/3TST/master/codemeta.json",
      "technique": "code_parser"
    }
  ]
}