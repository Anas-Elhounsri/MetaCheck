{
  "application_domain": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Physics"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 0.8164317930928167,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "authors": [
    {
      "confidence": 1,
      "result": {
        "affiliation": "Ss. Cyril and Methodius University, Faculty of Computer Science and Engineering, 1000 Skopje, North Macedonia",
        "email": "bojana.koteska@finki.ukim.mk",
        "type": "String",
        "value": "Bojana Koteska"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "Ss. Cyril and Methodius University, Faculty of Computer Science and Engineering, 1000 Skopje, North Macedonia",
        "email": "anastas.mishev@finki.ukim.mk",
        "type": "String",
        "value": "Anastas Mishev"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "Ss. Cyril and Methodius University, Faculty of Natural Science and Mathematics, 1000 Skopje, North Macedonia",
        "email": "ljupcop@pmf.ukim.mk",
        "type": "String",
        "value": "Ljupco Pejov"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "author": [
          {
            "family_name": "Koteska",
            "given_name": "Bojana",
            "name": "Bojana Koteska",
            "type": "Agent",
            "url": "https://orcid.org/0000-0001-6118-9044"
          },
          {
            "family_name": "Mishev",
            "given_name": "Anastas",
            "name": "Anastas Mishev",
            "type": "Agent",
            "url": "https://orcid.org/0000-0001-7271-6655"
          },
          {
            "family_name": "Pejov",
            "given_name": "Ljupco",
            "name": "Ljupco Pejov",
            "type": "Agent"
          }
        ],
        "datePublished": "2024",
        "format": "cff",
        "title": "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
        "type": "File_dump",
        "url": "https://doi.org/10.5281/zenodo.11408339",
        "value": "# This CITATION.cff file was generated with cffinit.\n# Visit https://bit.ly/cffinit to generate yours today!\n\ncff-version: 1.2.0\ntitle: >-\n  Schr\u00f6dinger API - RESTful web service for solving\n  multidimensional time-independent Schr\u00f6dinger equation\n  using Hermite DVR approach\nmessage: >-\n  If you use this software, please cite it using the\n  metadata from this file.\ntype: software\nauthors:\n  - given-names: Bojana\n    family-names: Koteska\n    email: bojana.koteska@finki.ukim.mk\n    affiliation: >-\n      Ss. Cyril and Methodius University, Faculty of\n      Computer Science and Engineering, Skopje, North\n      Macedonia\n    orcid: 'https://orcid.org/0000-0001-6118-9044'\n    credit: \"Development of RESTful web service; Implementation of solving algorithms\"\n    role: Developer\n  - given-names: Anastas\n    family-names: Mishev\n    email: anastas.mishev@finki.ukim.mk\n    affiliation: >-\n      Ss. Cyril and Methodius University, Faculty of\n      Computer Science and Engineering, Skopje, North\n      Macedonia\n    orcid: 'https://orcid.org/0000-0001-7271-6655'\n    credit: \"Project supervision; Guidance on software design\"\n    role: Project Supervisor\n  - given-names: Ljupco\n    family-names: Pejov\n    email: ljupcop@pmf.ukim.mk\n    affiliation: >-\n      Ss.Cyril and Methodius University, Faculty of Natural\n      Sciences and Mathematics, Institute of Chemistry,\n      Skopje, North Maceodnia\n    credit: \"Scientific advisor; Domain expertise\"\n    role: Scientific Advisor\nidentifiers:\n  - type: doi\n    value: 10.5281/zenodo.11408339\n    description: Zenodo DOI\nrepository-code: 'https://github.com/bojanakoteska/SchrodingerAPI'\nurl: 'https://schrodinger.chem-api.finki.ukim.mk/'\nabstract: >+\n  This RESTful web service (SchrodingerAPI) provides a\n  method for solution of one-dimensional, two-dimensional\n  and three-dimensional time-independent Schr\u00f6dinger\n  equation based on the the Gauss-Hermite Discrete Variable\n  Representation (DVR) approach.\n  The solution of one-dimensional (1D) Schr\u00f6dinger equation\n  is illustrated in the case of following model potentials:\n  Morse potential;   Simple Harmonic Oscillator (SHO) potential;\n  Sombrero potential (Mexican hat); Woods-Saxon potential.\n  Solutions of two-dimensional (2D) and three-dimensional\n  (3D) Schr\u00f6dinger equations are illustrated for the\n  following two model potentials: multidimensional Morse\n  potential and multidimensional SHO potential.\nkeywords:\n  - REST API\n  - RESTful web service\n  - Schr\u00f6dinger equation\nlicense: MIT\ndate-released: '2024-05-22'\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/CITATION.cff",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bojanakoteska/SchrodingerAPI"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bojanakoteska/SchrodingerAPI"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "continuous_integration": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/.github/workflows/github_actions.yml"
      },
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-20T11:42:10Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2024-05-22"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-30T09:26:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "This RESTful web service (SchrodingerAPI) provides a method for solution of one-dimensional, two-dimensional and three-dimensional time-independent Schr\u00f6dinger equation based on the the Gauss-Hermite Discrete Variable Representation (DVR) approach.\n\nThe solution of one-dimensional (1D) Schr\u00f6dinger equation is illustrated in the case of following model potentials:\n\nMorse potential;\nSimple Harmonic Oscillator (SHO) potential;\nSombrero potential (Mexican hat);\nWoods-Saxon potential.\nSolutions of two-dimensional (2D) and three-dimensional (3D) Schr\u00f6dinger equations are illustrated for the following two model potentials: multidimensional Morse potential and multidimensional SHO potential.\n\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Service description",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach"
        ],
        "type": "Text_excerpt",
        "value": "\nAll service methods are GET methods and they can be tested by entering the parameters directly on the SchrodingerAPI home page (supported by Swagger) at https://schrodinger.chem-api.finki.ukim.mk/. Other possibilites to test the service methods include using browser URL bar, consuming the service methods in your source code or by using specific API testing tools such as [Postman](https://www.postman.com/).\n\nFor example, if user wants to test the **1dHermiteSho** method directly at https://schrodinger.chem-api.finki.ukim.mk/, the\nfirst step is to click the **1dHermiteSho** method from the list :\n<img src=\"https://b2drop.eudat.eu/s/WpDEad9PWeW4oaY/download\" width=\"400\"/>\n\nThen, user should click the button **Try it out**:\n<img src=\"https://b2drop.eudat.eu/s/t7QWCRwesJYaZB6/download\" width=\"1000\"/>\n\n\nNext, user should enter the parameters (or use the default ones) and click the **Execute** button. The parameters for each method are presented in the next section. \n\n<img src=\"https://b2drop.eudat.eu/s/QJ3QRWddCWiNrQF/download\" width=\"500\"/>\n\nThe results will be shown in the **Response Body** form below. User can download or copy them.\n\n<img src=\"https://b2drop.eudat.eu/s/SgrXDSLq7QPFeRA/download\" width=\"1000\"/>\n\nOther way to use these REST API methods is to access it directly from the browser address bar.\n\nIf no parameters are provided, the default parameter values will be taken into consideration. For example, for the **1dHermiteSho** method the link should be:\n\nhttps://schrodinger.chem-api.finki.ukim.mk/1dHermiteSho\n\nIf user wants to change only the default parameters **npts** and **k** and to provide his/hers, the URL should look like this:\n\nhttps://schrodinger.chem-api.finki.ukim.mk/1dHermiteSho?npts=10&k=1\n\nIf user preffers to change other paramerets, they can be added with the &PARAMETER=VALUE\n\nOne of the options is also to consume the method in the user program source code. Examples in Python are provided in the section below.\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8426370140220788,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "This RESTful web service (SchrodingerAPI) provides a method for solution of **one-dimensional**, **two-dimensional** and **three-dimensional** time-independent Schr\u00f6dinger equation based on the the Gauss-Hermite Discrete Variable Representation (DVR) approach.  \n\nThe solution of one-dimensional (1D) Schr\u00f6dinger equation is illustrated in the case of following model potentials: \n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bojanakoteska/SchrodingerAPI/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/target/classes/dvr_py-master/presentation_bessel_demo.ipynb"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/target/classes/dvr_py-master/presentation_bessel_demo.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/target/classes/dvr_py-master/presentation_2d_demo.ipynb"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/target/classes/dvr_py-master/presentation_2d_demo.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/src/main/resources/dvr_py-master/presentation_bessel_demo.ipynb"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/src/main/resources/dvr_py-master/presentation_bessel_demo.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/src/main/resources/dvr_py-master/presentation_2d_demo.ipynb"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/src/main/resources/dvr_py-master/presentation_2d_demo.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bojanakoteska/SchrodingerAPI/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bojanakoteska/SchrodingerAPI"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "requirements.txt",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/requirements.txt"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/requirements.txt",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "pom.xml",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/pom.xml"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/pom.xml",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "pom.xml",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/target/classes/META-INF/maven/net.javaguides.springboot/SchrodingerAPI/pom.xml"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/target/classes/META-INF/maven/net.javaguides.springboot/SchrodingerAPI/pom.xml",
      "technique": "file_exploration"
    }
  ],
  "has_package_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "pom.xml"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/pom.xml",
      "technique": "code_parser"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "10.5281/zenodo.11408339"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.5281/zenodo.11408339"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://b2drop.eudat.eu/s/WpDEad9PWeW4oaY/download"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://b2drop.eudat.eu/s/t7QWCRwesJYaZB6/download"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://b2drop.eudat.eu/s/QJ3QRWddCWiNrQF/download"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://b2drop.eudat.eu/s/SgrXDSLq7QPFeRA/download"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Supported Environments",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions"
        ],
        "type": "Text_excerpt",
        "value": "This project is compatible with Windows, macOS, and Linux distributions. Ensure that you have Python and Java installed and configured properly on your system.\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Build Instructions",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions"
        ],
        "type": "Text_excerpt",
        "value": "To build this project, ensure you have Maven installed on your system. Clone the Repository, Navigate to the Project Directory, and Build the Project with Maven:**\n\n```bash\ngit clone https://github.com/bojanakoteska/SchrodingerAPI.git && cd SchrodingerAPI && mvn clean package\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation Instructions",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions"
        ],
        "type": "Text_excerpt",
        "value": "Once the build is successful, you can run the JAR file in the target directory:\n\n```bash\njava -jar SchrodingerAPI.jar\n```\n\nThis command will start the application locally, and you can access it at `http://localhost:8080`.\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Execution Instructions",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions"
        ],
        "type": "Text_excerpt",
        "value": "To interact with the Schr\u00f6dinger API locally, make sure you have the `requests` library installed. You can install it using pip:\n\n```python\npip install requests\n```\nYou can also use the **requirements.txt** file and run the command:\n\n```python\npip install -r requirements.txt\n```\n\nHere's an example using Python to make a GET request to \"http://localhost:8080/2dHermiteSho\":\n\n```python\n\nimport requests\n\n# Define the URL endpoint\nurl = \"http://localhost:8080/2dHermiteSho\"\n\n# Make a GET request to the endpoint\nresponse = requests.get(url)\n\n# Check if the request was successful (status code 200)\nif response.status_code == 200:\n    # Print the response content\n    print(response.content.decode('utf-8')) \nelse:\n    print(\"Error:\", response.status_code)\n\n```\nTo interact with the API online, check the examples in the next subsections.\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1D Morse potential <a id='1DMorse'></a>",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions",
          "Examples of the DVR method for solution of one-dimensional (1D) Schr\u00f6dinger equation <a id='1D'></a>"
        ],
        "type": "Text_excerpt",
        "value": "Returns a one-dimensional Morse potential V(x):\n\n$V(x)=D \\cdot \\{1-exp[-a\\cdot(x-x_0)]\\}^2-D$\n\nParameters: \n\n- **npts** - number of points (default value 10) \n- **D** - dissociation depth(default value 3.0)\n- **a** -  inverse \"width\" of the potential (default value 0.5)\n- **x0** - equilibrium bond distance (default value 0.0)\n- **prec** - precision (default value 6)\n\nExample with default parameters:\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/1dHermiteMorse')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n\nExample with parameters (npts=10, D=3.0, a=0.5, x0=0.0, prec=6):\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/1dHermiteMorse?npts=20&D=0.176&a=1.02&x0=1.4&prec=32')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1D SHO potential <a id='1DSHO'></a>",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions",
          "Examples of the DVR method for solution of one-dimensional (1D) Schr\u00f6dinger equation <a id='1D'></a>"
        ],
        "type": "Text_excerpt",
        "value": "Returns a one-dimensional harmonic oscillator potential V(x) with wavenumber k:\n    \n$V(x)=\\frac{1}{2} k\\cdot (x-x_0)^2$\n\nParameters:\n\n- **npts** - number of points (default value 5) \n- **k** - wavenumber of the SHO potential (default value 1.0)\n- **x0** - displacement from origin (default value 0.0)\n- **prec** - precision (default value 8)\n\nExample with default parameters:\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/1dHermiteSho')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n\nExample with parameters (npts=10, k=1.0, x0=0.0, prec=19):\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/1dHermiteSho?npts=20&k=1.0&x0=0.0&prec=19')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1D Sombrero potential <a id='1DSomb'></a>",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions",
          "Examples of the DVR method for solution of one-dimensional (1D) Schr\u00f6dinger equation <a id='1D'></a>"
        ],
        "type": "Text_excerpt",
        "value": "Returns a one-dimensional version of the sombrero potential and requires a < 0 and b > 0\n       \n$V(x)=a\\cdot x^2+b\\cdot x^4$\n       \nParameters:\n\n- **npts** - number of points (default value 5)\n- **a** - coefficient of the x^2 term (default value -5)\n- **b** - coefficient of the x^4 term (default value 1.0)\n- **prec** - precision (default value 8)\n\nExample with default parameters:\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/1dHermiteSombrero')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n\nExample with parameters (npts=10, a=-5.0, b=1.0, prec=3):\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/1dHermiteSombrero?npts=10&a=-5.0&b=1.0&prec=3')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1D Woods-Saxon potential <a id='1DWS'></a>",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions",
          "Examples of the DVR method for solution of one-dimensional (1D) Schr\u00f6dinger equation <a id='1D'></a>"
        ],
        "type": "Text_excerpt",
        "value": "Returns a Woods-Saxon potential\n\n\n$V(r)=-\\frac{V_0}{\\{1+exp[\\frac{(r-R)}{z}]\\}} ;R=r_0 \\cdot A^{1/3}$\n       \nParameters:\n\n- **npts** - number of points (default value 5)\n- **V0** - potential depth (default value 50.0)\n- **z** - surface thickness (default value 0.5)\n- **r0** - rms nuclear radius (default value 1.2)\n- **A** - mass number (default value 16)\n- **prec** - precision (default value 8)\n\n\nExample with default parameters:\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/1dHermiteWoodSax')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n\nExample with parameters (npts=10, V0=50.0, z=0.5, r0=1.2, A=16, prec=4):\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/1dHermiteWoodSax?npts=10&V0=50.0&z=0.5&r0=1.2&A=16&prec=4')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2D Morse potential",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions",
          "Examples of the DVR method for solution of two-dimensional (2D) Schr\u00f6dinger equation <a id='2D'></a>"
        ],
        "type": "Text_excerpt",
        "value": " Returns a two-dimensional Morse potential V(x,y):\n \n$V(x,y)=D_1\\cdot \\{1-exp[-a1\\cdot(x-x_0)]\\}^2-D_1+D_2\\cdot\\{1-exp[-a2\\cdot(y-y_0 )]\\}^2-D_2$\n\nParameters: \n\n- **npts** - number of points (default value 5) \n- **D1** - dissociation depth for x(default value 3.0)\n- **a1** -  inverse \"width\" of the potential for x(default value 0.5)\n- **x0** - equilibrium bond distance for x (default value 0.0)\n- **D2** - dissociation depth for y(default value 3.0)\n- **a2** -  inverse \"width\" of the potential for y(default value 0.5)\n- **y0** - equilibrium bond distance for y (default value 0.0)\n- **prec** - precision (default value 6)\n\nExample with default parameters:\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/2dHermiteMorse')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n\nExample with parameters (npts=10, D1=3.0, a1=0.5, D2=3.0, a2=0.5, x0=0, y0=0, prec=100):\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/2dHermiteMorse?npts=10&D1=3.0&a1=0.5&D2=3&a2=0.5&x0=0.0&y0=0.0&prec=100')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2D SHO potential",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions",
          "Examples of the DVR method for solution of two-dimensional (2D) Schr\u00f6dinger equation <a id='2D'></a>"
        ],
        "type": "Text_excerpt",
        "value": "Returns a two-dimensional harmonic oscillator potential V(x, y) with wavenumber k. \n       \n$V(x,y)=\\frac{1}{2} k\\cdot[(x-x_0)^2+(y-y_0)^2]$\n\nParameters:\n\n- **npts** - number of points (default value 5) \n- **k** - wavenumber of the SHO potential (default value 1.0)\n- **x0** - x displacement from origin (default value 0.0)\n- **y0** - y displacement from origin (default value 0.0)\n- **prec** - precision (default value 8)\n\nExample with default parameters:\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/2dHermiteSho')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n\n Example with parameters (npts=5, k=1.0, x0=0.0, y0=0, prec=20):\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/2dHermiteSho?npts=10&k=1.0&x0=0.0&y0=0.0&prec=20')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3D Morse potential",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions",
          "Examples of the DVR method for solution of three-dimensional (3D) Schr\u00f6dinger equation <a id='3D'></a>"
        ],
        "type": "Text_excerpt",
        "value": "Returns a three-dimensional Morse potential V(x,y,z):\n\n\n$V(x,y,z)=D_1\\cdot \\{1-exp[-a1\\cdot(x-x_0)]\\}^2-D_1+D_2\\cdot\\{1-exp[-a2\\cdot(y-y_0)]\\}^2-D_2+D_3\\cdot{1-exp[-a3\\cdot(z-z_0)]}^2-D_3$\n\n  \nParameters: \n\n- **npts** - number of points (default value 5) \n- **D1** - dissociation depth for x(default value 3.0)\n- **a1** -  inverse \"width\" of the potential for x(default value 0.5)\n- **x0** - equilibrium bond distance for x (default value 0.0)\n- **D2** - dissociation depth for y(default value 3.0)\n- **a2** -  inverse \"width\" of the potential for y(default value 0.5)\n- **y0** - equilibrium bond distance for y (default value 0.0)\n- **D3** - dissociation depth for z(default value 3.0)\n- **a3** -  inverse \"width\" of the potential for z(default value 0.5)\n- **z0** - equilibrium bond distance for z (default value 0.0)\n- **prec** - precision (default value 6)\n\nExample with default parameters:\n\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/3dHermiteMorse')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n\nExample with parameters (npts=10, D1=3.0, a1=0.5, D2=3.0, a2=0.5, D3=3.0, a3=0.5, x0=0, y0=0, prec=10):\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/3dHermiteMorse?npts=10&D1=3.0&a1=0.5&D2=3&a2=0.5&D3=3.0&a3=0.5&x0=0.0&y0=0.0&z0=0&prec=10')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3D SHO potential",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions",
          "Examples of the DVR method for solution of three-dimensional (3D) Schr\u00f6dinger equation <a id='3D'></a>"
        ],
        "type": "Text_excerpt",
        "value": "Returns a three-dimensional harmonic oscillator potential V(x, y, z) with wavenumber k. \n       \n$V(x,y,z)=\\frac{1}{2} k\\cdot[(x-x_0)^2+(y-y_0)^2+(z-z_0)^2]$\n\nParameters:\n\n- **npts** - number of points (default value 5) \n- **k** - wavenumber of the SHO potential (default value 1.0)\n- **x0** - x displacement from origin (default value 0.0)\n- **y0** - y displacement from origin (default value 0.0)\n- **z0** - z displacement from origin (default value 0.0)\n- **prec** - precision (default value 8)\n\nExample with default parameters:\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/3dHermiteSho')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n\nExample with parameters (npts=10, k=1.0, x0=0.0, y0=0, z0=0, prec=15):\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/3dHermiteSho?npts=10&k=1.0&x0=0.0&y0=0.0&z0=0.0&prec=15')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bojanakoteska/SchrodingerAPI/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": [
          "REST API",
          "RESTful web service",
          "Schr\u00f6dinger equation"
        ]
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/https://spdx.org/licenses/MIT",
        "spdx_id": "https://spdx.org/licenses/MIT",
        "type": "License",
        "value": "https://spdx.org/licenses/MIT"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach"
        ],
        "type": "Text_excerpt",
        "value": "This project is licensed under the MIT License; for more details, see the [LICENSE](https://github.com/bojanakoteska/SchrodingerAPI/blob/main/LICENSE) file.\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SchrodingerAPI"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "bojanakoteska"
      },
      "technique": "GitHub_API"
    }
  ],
  "package_id": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "net.javaguides.springboot.SchrodingerAPI"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/pom.xml",
      "technique": "code_parser"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 167681,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 77290,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 15119,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "type": "Programming_language",
        "value": "Java",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python 3",
        "type": "Programming_language",
        "value": "Python 3",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bojanakoteska",
          "type": "User"
        },
        "date_created": "2024-06-03T11:33:20Z",
        "date_published": "2024-06-03T11:38:02Z",
        "html_url": "https://github.com/bojanakoteska/SchrodingerAPI/releases/tag/v1.0.0",
        "name": "v1",
        "release_id": 158593239,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/bojanakoteska/SchrodingerAPI/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/bojanakoteska/SchrodingerAPI/releases/158593239",
        "value": "https://api.github.com/repos/bojanakoteska/SchrodingerAPI/releases/158593239",
        "zipball_url": "https://api.github.com/repos/bojanakoteska/SchrodingerAPI/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "name": "requests",
        "type": "Software_application",
        "value": "requests==2.26.0",
        "version": "==2.26.0"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "spring-boot-starter-web",
        "type": "Software_application",
        "value": "org.springframework.boot.spring-boot-starter-web",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/pom.xml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "spring-boot-starter-test",
        "type": "Software_application",
        "value": "org.springframework.boot.spring-boot-starter-test",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/pom.xml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions"
        ],
        "type": "Text_excerpt",
        "value": "- Ensure you have Java Development Kit (JDK) 8 or later installed. You can download it from [here](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html).\n- Ensure you have Apache Maven installed. You can download it from [here](https://maven.apache.org/download.cgi).\n- Ensure you have Python 3 installed. You can download it from [here](https://www.python.org/downloads/).\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support"
  ],
  "somef_provenance": {
    "date": "2025-09-19 00:16:01",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1D Morse potential <a id='1DMorse'></a>",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions",
          "Examples of the DVR method for solution of one-dimensional (1D) Schr\u00f6dinger equation <a id='1D'></a>"
        ],
        "type": "Text_excerpt",
        "value": "Returns a one-dimensional Morse potential V(x):\n\n$V(x)=D \\cdot \\{1-exp[-a\\cdot(x-x_0)]\\}^2-D$\n\nParameters: \n\n- **npts** - number of points (default value 10) \n- **D** - dissociation depth(default value 3.0)\n- **a** -  inverse \"width\" of the potential (default value 0.5)\n- **x0** - equilibrium bond distance (default value 0.0)\n- **prec** - precision (default value 6)\n\nExample with default parameters:\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/1dHermiteMorse')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n\nExample with parameters (npts=10, D=3.0, a=0.5, x0=0.0, prec=6):\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/1dHermiteMorse?npts=20&D=0.176&a=1.02&x0=1.4&prec=32')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1D SHO potential <a id='1DSHO'></a>",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions",
          "Examples of the DVR method for solution of one-dimensional (1D) Schr\u00f6dinger equation <a id='1D'></a>"
        ],
        "type": "Text_excerpt",
        "value": "Returns a one-dimensional harmonic oscillator potential V(x) with wavenumber k:\n    \n$V(x)=\\frac{1}{2} k\\cdot (x-x_0)^2$\n\nParameters:\n\n- **npts** - number of points (default value 5) \n- **k** - wavenumber of the SHO potential (default value 1.0)\n- **x0** - displacement from origin (default value 0.0)\n- **prec** - precision (default value 8)\n\nExample with default parameters:\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/1dHermiteSho')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n\nExample with parameters (npts=10, k=1.0, x0=0.0, prec=19):\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/1dHermiteSho?npts=20&k=1.0&x0=0.0&prec=19')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1D Sombrero potential <a id='1DSomb'></a>",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions",
          "Examples of the DVR method for solution of one-dimensional (1D) Schr\u00f6dinger equation <a id='1D'></a>"
        ],
        "type": "Text_excerpt",
        "value": "Returns a one-dimensional version of the sombrero potential and requires a < 0 and b > 0\n       \n$V(x)=a\\cdot x^2+b\\cdot x^4$\n       \nParameters:\n\n- **npts** - number of points (default value 5)\n- **a** - coefficient of the x^2 term (default value -5)\n- **b** - coefficient of the x^4 term (default value 1.0)\n- **prec** - precision (default value 8)\n\nExample with default parameters:\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/1dHermiteSombrero')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n\nExample with parameters (npts=10, a=-5.0, b=1.0, prec=3):\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/1dHermiteSombrero?npts=10&a=-5.0&b=1.0&prec=3')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1D Woods-Saxon potential <a id='1DWS'></a>",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions",
          "Examples of the DVR method for solution of one-dimensional (1D) Schr\u00f6dinger equation <a id='1D'></a>"
        ],
        "type": "Text_excerpt",
        "value": "Returns a Woods-Saxon potential\n\n\n$V(r)=-\\frac{V_0}{\\{1+exp[\\frac{(r-R)}{z}]\\}} ;R=r_0 \\cdot A^{1/3}$\n       \nParameters:\n\n- **npts** - number of points (default value 5)\n- **V0** - potential depth (default value 50.0)\n- **z** - surface thickness (default value 0.5)\n- **r0** - rms nuclear radius (default value 1.2)\n- **A** - mass number (default value 16)\n- **prec** - precision (default value 8)\n\n\nExample with default parameters:\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/1dHermiteWoodSax')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n\nExample with parameters (npts=10, V0=50.0, z=0.5, r0=1.2, A=16, prec=4):\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/1dHermiteWoodSax?npts=10&V0=50.0&z=0.5&r0=1.2&A=16&prec=4')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2D Morse potential",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions",
          "Examples of the DVR method for solution of two-dimensional (2D) Schr\u00f6dinger equation <a id='2D'></a>"
        ],
        "type": "Text_excerpt",
        "value": " Returns a two-dimensional Morse potential V(x,y):\n \n$V(x,y)=D_1\\cdot \\{1-exp[-a1\\cdot(x-x_0)]\\}^2-D_1+D_2\\cdot\\{1-exp[-a2\\cdot(y-y_0 )]\\}^2-D_2$\n\nParameters: \n\n- **npts** - number of points (default value 5) \n- **D1** - dissociation depth for x(default value 3.0)\n- **a1** -  inverse \"width\" of the potential for x(default value 0.5)\n- **x0** - equilibrium bond distance for x (default value 0.0)\n- **D2** - dissociation depth for y(default value 3.0)\n- **a2** -  inverse \"width\" of the potential for y(default value 0.5)\n- **y0** - equilibrium bond distance for y (default value 0.0)\n- **prec** - precision (default value 6)\n\nExample with default parameters:\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/2dHermiteMorse')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n\nExample with parameters (npts=10, D1=3.0, a1=0.5, D2=3.0, a2=0.5, x0=0, y0=0, prec=100):\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/2dHermiteMorse?npts=10&D1=3.0&a1=0.5&D2=3&a2=0.5&x0=0.0&y0=0.0&prec=100')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2D SHO potential",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions",
          "Examples of the DVR method for solution of two-dimensional (2D) Schr\u00f6dinger equation <a id='2D'></a>"
        ],
        "type": "Text_excerpt",
        "value": "Returns a two-dimensional harmonic oscillator potential V(x, y) with wavenumber k. \n       \n$V(x,y)=\\frac{1}{2} k\\cdot[(x-x_0)^2+(y-y_0)^2]$\n\nParameters:\n\n- **npts** - number of points (default value 5) \n- **k** - wavenumber of the SHO potential (default value 1.0)\n- **x0** - x displacement from origin (default value 0.0)\n- **y0** - y displacement from origin (default value 0.0)\n- **prec** - precision (default value 8)\n\nExample with default parameters:\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/2dHermiteSho')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n\n Example with parameters (npts=5, k=1.0, x0=0.0, y0=0, prec=20):\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/2dHermiteSho?npts=10&k=1.0&x0=0.0&y0=0.0&prec=20')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3D Morse potential",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions",
          "Examples of the DVR method for solution of three-dimensional (3D) Schr\u00f6dinger equation <a id='3D'></a>"
        ],
        "type": "Text_excerpt",
        "value": "Returns a three-dimensional Morse potential V(x,y,z):\n\n\n$V(x,y,z)=D_1\\cdot \\{1-exp[-a1\\cdot(x-x_0)]\\}^2-D_1+D_2\\cdot\\{1-exp[-a2\\cdot(y-y_0)]\\}^2-D_2+D_3\\cdot{1-exp[-a3\\cdot(z-z_0)]}^2-D_3$\n\n  \nParameters: \n\n- **npts** - number of points (default value 5) \n- **D1** - dissociation depth for x(default value 3.0)\n- **a1** -  inverse \"width\" of the potential for x(default value 0.5)\n- **x0** - equilibrium bond distance for x (default value 0.0)\n- **D2** - dissociation depth for y(default value 3.0)\n- **a2** -  inverse \"width\" of the potential for y(default value 0.5)\n- **y0** - equilibrium bond distance for y (default value 0.0)\n- **D3** - dissociation depth for z(default value 3.0)\n- **a3** -  inverse \"width\" of the potential for z(default value 0.5)\n- **z0** - equilibrium bond distance for z (default value 0.0)\n- **prec** - precision (default value 6)\n\nExample with default parameters:\n\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/3dHermiteMorse')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n\nExample with parameters (npts=10, D1=3.0, a1=0.5, D2=3.0, a2=0.5, D3=3.0, a3=0.5, x0=0, y0=0, prec=10):\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/3dHermiteMorse?npts=10&D1=3.0&a1=0.5&D2=3&a2=0.5&D3=3.0&a3=0.5&x0=0.0&y0=0.0&z0=0&prec=10')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3D SHO potential",
        "parent_header": [
          "Schr\u00f6dinger API - RESTful web service for solving multidimensional time-independent Schr\u00f6dinger equation using Hermite DVR approach",
          "Build, Installation, and Execution Instructions",
          "Examples of the DVR method for solution of three-dimensional (3D) Schr\u00f6dinger equation <a id='3D'></a>"
        ],
        "type": "Text_excerpt",
        "value": "Returns a three-dimensional harmonic oscillator potential V(x, y, z) with wavenumber k. \n       \n$V(x,y,z)=\\frac{1}{2} k\\cdot[(x-x_0)^2+(y-y_0)^2+(z-z_0)^2]$\n\nParameters:\n\n- **npts** - number of points (default value 5) \n- **k** - wavenumber of the SHO potential (default value 1.0)\n- **x0** - x displacement from origin (default value 0.0)\n- **y0** - y displacement from origin (default value 0.0)\n- **z0** - z displacement from origin (default value 0.0)\n- **prec** - precision (default value 8)\n\nExample with default parameters:\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/3dHermiteSho')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n\nExample with parameters (npts=10, k=1.0, x0=0.0, y0=0, z0=0, prec=15):\n\n```python\nimport requests\nresponse = requests.get('https://schrodinger.chem-api.finki.ukim.mk/3dHermiteSho?npts=10&k=1.0&x0=0.0&y0=0.0&z0=0.0&prec=15')\nif response.status_code == 200:\n        print(response.content.decode('utf-8')) \nelse:\n        print(\"None\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "version": [
    {
      "confidence": 1,
      "result": {
        "type": "Release",
        "value": "0.0.1-SNAPSHOT"
      },
      "source": "https://raw.githubusercontent.com/bojanakoteska/SchrodingerAPI/main/pom.xml",
      "technique": "code_parser"
    }
  ]
}