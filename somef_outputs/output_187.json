{
  "application_domain": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Particle physics"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "authors": [
    {
      "confidence": 1,
      "result": {
        "affiliation": "Friedrich-Alexander-University Erlangen-Nuremberg, Erlangen Centre for Astroparticle Physics",
        "email": "jschumann@km3net.de",
        "identifier": "https://orcid.org/0000-0003-3722-086X",
        "type": "String",
        "value": "Johannes Schumann"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "Friedrich-Alexander-University Erlangen-Nuremberg, Erlangen Centre for Astroparticle Physics",
        "email": "tgal@km3net.de",
        "identifier": "https://orcid.org/0000-0001-7821-8673",
        "type": "String",
        "value": "Tamas Gal"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KM3NeT/Neurthino.jl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "git+https://github.com/KM3NeT/Neurthino.jl.git"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "continuous_integration": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KM3NeT/Neurthino.jl/actions"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/.github/workflows/TagBot.yml"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/.github/workflows/ci.yml"
      },
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-07-08T10:39:00Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2019-06-13"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_published": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2021-02-24"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2025-08-24T16:42:27Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2021-02-24"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Neutrino oscillation probability calculator"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Neurthino.jl is a package for calculating neutrino oscillation probabilities. The main focus of the package lies on atmospheric neutrino flux and the neutrino propagation through earth."
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 0.9009987614536976,
      "result": {
        "original_header": "Neurthino.jl",
        "type": "Text_excerpt",
        "value": "**Neurthino.jl** is a package for calculating neutrino oscillation probabilities.\nThe main focus of the package lies on atmospheric neutrino flux and the neutrino\npropagation through earth.\n \n"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9713706415857131,
      "result": {
        "original_header": "Oscillations in Vacuum",
        "type": "Text_excerpt",
        "value": "The second option is suitable for scenarios with more **complex paths** with\nsections of different densities. An example is shown in the next chapter, where\nwe propagate neutrinos through the earth.\n \n"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9324951553201175,
      "result": {
        "original_header": "Neutrino Propagation through the Earth",
        "type": "Text_excerpt",
        "value": "The `Neurthino.jl` package also includes features for the neutrino oscillation probabilities\nthrough the Earth, i.e. it contains functions for generating a neutrino path based on the\nPREM model. In the following example a neutrino oscillogram with a resolution of 200x200 bins\nis determined. The zenith angles for up going neutrinos (cos(\u03b8)\u03f5[-1,0]) and \nsubsequently the neutrino paths are generated first:\n```\njulia> zenith = acos.(range(-1,stop=0,length=200));\n\njulia> paths = Neurthino.prempath(zenith, 2.5, samples=100, discrete_densities=0:0.1:14);\n```\nThe detector is assumed to be 2.5km under the earth's surface (a typical KM3NeT\ndetector block in the Mediterranean), which is a realistic scenario for\nWater-Cherenkov-Detectors in sea or ice. Each path consists of 100 sections of\nequal lengths while the matter density is taken from the PREM model.\nIf a vector of densities is passed as `discrete_densities`, the values are \nclipped to the closest value.\n```\njulia> energies = 10 .^ range(0, stop=2, length=200);\n\njulia> prob = P\u03bd\u03bd(U, H, energies, paths);\n```\nThe returned array `prob` is again of type `AxisArray` with an axis `Path` for the path index (instead of the `Baseline` axis).\nP(\u03bde&#8594;\u03bde) is determined by `prob[InitFlav=Electron, FinalFlav=Electron]`, which can be visualised by a `heatmap`:<br />\n![](https://github.com/KM3NeT/Neurthino.jl/raw/master/docs/src/assets/earth_prob_elel.png) <br />\nand for P(\u03bd\u03bc&#8594;\u03bd\u03bc) or `prob[InitFlav=Muon, FinalFlav=Muon]`:<br />\n![](https://github.com/KM3NeT/Neurthino.jl/raw/master/docs/src/assets/earth_prob_mumu.png)\n \n"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KM3NeT/Neurthino.jl/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/notebooks/Benchmark.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/notebooks/Benchmark.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KM3NeT/Neurthino.jl/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "KM3NeT/Neurthino.jl"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Neurthino.jl"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/badge/latestdoi/278061614"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KM3NeT/Neurthino.jl/raw/master/docs/src/assets/earth_prob_elel.png"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KM3NeT/Neurthino.jl/raw/master/docs/src/assets/neurthino.png"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=\\Delta_{ij}=m_i^2-m_j^2"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=\\forall%20i%3Cj:m_i%3Cm_j"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KM3NeT/Neurthino.jl/raw/master/docs/src/assets/earth_prob_mumu.png"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KM3NeT/Neurthino.jl/issues"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KM3NeT/Neurthino.jl/issues"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hacktoberfest, julia, neutrino, neutrino-oscillations, neutrino-path, oscillation, oscillation-probabilities, particle-physics"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": [
          "physics",
          "particle physics",
          "neutrino",
          "oscillations"
        ]
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2021 Johannes Schumann, Tamas Gal\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/https://spdx.org/licenses/MIT",
        "spdx_id": "https://spdx.org/licenses/MIT",
        "type": "License",
        "value": "https://spdx.org/licenses/MIT"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Neurthino.jl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Neurthino.jl"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "KM3NeT"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Julia",
        "size": 28767,
        "type": "Programming_language",
        "value": "Julia"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 3187,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Julia",
        "type": "Programming_language",
        "value": "Julia",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "reference_publication": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "https://doi.org/10.5281/zenodo.4568392"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2021-09-16T16:02:52Z",
        "date_published": "2021-09-16T16:02:54Z",
        "description": "## Neurthino v1.0.1\n\n[Diff since v1.0.0](https://github.com/KM3NeT/Neurthino.jl/compare/v1.0.0...v1.0.1)\n\n\n**Closed issues:**\n- Kernel crash in minimal example (#8)\n\n**Merged pull requests:**\n- Fix flavour fields (#5) (@8me)\n- Math fixes (#6) (@8me)\n- Correct matter effects for sterile flavours; handling of anti neutrinos (#9) (@philippeller)",
        "html_url": "https://github.com/KM3NeT/Neurthino.jl/releases/tag/v1.0.1",
        "name": "v1.0.1",
        "release_id": 49689693,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/KM3NeT/Neurthino.jl/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/KM3NeT/Neurthino.jl/releases/49689693",
        "value": "https://api.github.com/repos/KM3NeT/Neurthino.jl/releases/49689693",
        "zipball_url": "https://api.github.com/repos/KM3NeT/Neurthino.jl/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2021-02-27T19:03:34Z",
        "date_published": "2021-02-27T19:03:36Z",
        "description": "## Neurthino v1.0.0\n\n\n\n\n**Merged pull requests:**\n- Basic Neutrino Oscillation Functionality (#1) (@8me)\n- Add GitHub actions (#2) (@tamasgal)\n- Update docs (#3) (@tamasgal)",
        "html_url": "https://github.com/KM3NeT/Neurthino.jl/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "release_id": 39000086,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/KM3NeT/Neurthino.jl/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/KM3NeT/Neurthino.jl/releases/39000086",
        "value": "https://api.github.com/repos/KM3NeT/Neurthino.jl/releases/39000086",
        "zipball_url": "https://api.github.com/repos/KM3NeT/Neurthino.jl/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2025-09-19 00:56:18",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 16
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic Usage",
        "parent_header": [
          "Neurthino.jl"
        ],
        "type": "Text_excerpt",
        "value": "First of all the basic vacuum properties have to be defined by creating a\n`OscillationParameters` struct with fixed number of neutrino flavours of the \nconsidered model:\n\n```julia\njulia> using Neurthino\n\njulia> osc = OscillationParameters(3);\n```\n\nThe values of the mixing angles (`set\u03b8!`), mass squared differences (`set\u0394m\u00b2`)\nand CP phases (`set\u03b4!`) are initialised to 0 and have to be set individually:\n\n```\njulia> set\u03b8!(osc, 1=>2, 0.59);\n\njulia> set\u03b8!(osc, 1=>3, 0.15);\n\njulia> set\u03b8!(osc, 2=>3, 0.84);\n\njulia> set\u03b4!(osc, 1=>3, 3.86);\n```\n\nThe mass squared differences are defined as <img src=\"https://render.githubusercontent.com/render/math?math=\\Delta_{ij}=m_i^2-m_j^2\"> and\nwithin the package the convention <img src=\"https://render.githubusercontent.com/render/math?math=\\forall%20i%3Cj:m_i%3Cm_j\"> is kept.\n\n```\njulia> set\u0394m\u00b2!(osc, 2=>3, -2.523e-3);\n\njulia> set\u0394m\u00b2!(osc, 1=>2, -7.39e-5);\n```\n\nThese oscillation parameters can now be used to calculate the oscillation\nprobabilities between the flavour states: \n\n```\njulia> p = P\u03bd\u03bd(osc, 1, 10000)\n4-dimensional AxisArray{Float64,4,...} with axes:\n    :Energy, [1.0]\n    :Baseline, [10000.0]\n    :InitFlav, NeutrinoFlavour[Electron, Muon, Tau]\n    :FinalFlav, NeutrinoFlavour[Electron, Muon, Tau]\nAnd data, a 1\u00d71\u00d73\u00d73 Array{Float64,4}:\n[:, :, 1, 1] =\n 0.40280077905806266\n\n[:, :, 2, 1] =\n 0.24823028034134093\n\n[:, :, 3, 1] =\n 0.348968940600596\n\n[:, :, 1, 2] =\n 0.10025499082597984\n\n[:, :, 2, 2] =\n 0.49250415138072934\n\n[:, :, 3, 2] =\n 0.4072408577932906\n\n[:, :, 1, 3] =\n 0.49694423011595723\n\n[:, :, 2, 3] =\n 0.2592655682779296\n\n[:, :, 3, 3] =\n 0.24379020160611306\n```\n\nThe output is an `AxisArray` which provides intuitive indexing, e.g.\nfor P(\u03bd\u03bc\u2192\u03bd\u03c4) at the given energy and baseline:\n\n```\njulia> p[Energy=1, Baseline=1, InitFlav=Muon, FinalFlav=Tau]\n0.2592655682779296\n```\n\nThe probabilities are calculated based on the transition matrix \n(the so-called PMNS-Matrix) between flavour and mass eigenstates,\nas well as the Hamiltonian in the mass eigenbasis. In order to calculating these \njust once, the `P\u03bd\u03bd` function can be utilised in the following way:\n\n```\njulia> U = PMNSMatrix(osc)\n3\u00d73 Array{Complex{Float64},2}:\n   0.82161+0.0im         0.550114+0.0im        -0.112505+0.0983582im\n -0.301737+0.0608595im   0.601232+0.0407488im   0.736282+0.0im\n  0.476688+0.0545516im  -0.576975+0.0365253im   0.659968+0.0im\n\njulia> H = Hamiltonian(osc)\n3-element Array{Complex{Float64},1}:\n -0.0008902666666666667 + 0.0im\n -0.0008163666666666667 + 0.0im\n  0.0017066333333333333 + 0.0im\n\njulia> P\u03bd\u03bd(U, H, 1, 10000)\n4-dimensional AxisArray{Float64,4,...} with axes:\n    :Energy, [1.0]\n    :Baseline, [10000.0]\n    :InitFlav, NeutrinoFlavour[Electron, Muon, Tau]\n    :FinalFlav, NeutrinoFlavour[Electron, Muon, Tau]\nAnd data, a 1\u00d71\u00d73\u00d73 Array{Float64,4}:\n[:, :, 1, 1] =\n 0.40280077905806266\n\n[:, :, 2, 1] =\n 0.24823028034134093\n\n[:, :, 3, 1] =\n 0.348968940600596\n\n[:, :, 1, 2] =\n 0.10025499082597984\n\n[:, :, 2, 2] =\n 0.49250415138072934\n\n[:, :, 3, 2] =\n 0.4072408577932906\n\n[:, :, 1, 3] =\n 0.49694423011595723\n\n[:, :, 2, 3] =\n 0.2592655682779296\n\n[:, :, 3, 3] =\n 0.24379020160611306\n```\n"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "version": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "1.0.0"
      },
      "source": "https://raw.githubusercontent.com/KM3NeT/Neurthino.jl/master/codemeta.json",
      "technique": "code_parser"
    }
  ]
}