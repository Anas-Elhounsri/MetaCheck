{
  "authors": [
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/DESCRIPTION",
        "type": "Agent",
        "value": [
          {
            "email": "bjaeger@wakehealth.edu",
            "value": "Byron Jaeger"
          }
        ]
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "bjaeger@wakehealth.edu",
        "identifier": "https://orcid.org/0000-0001-7399-2299",
        "type": "String",
        "value": "Byron Jaeger"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "datePublished": "2022",
        "format": "bibtex",
        "type": "File_dump",
        "value": "citHeader(\"To cite aorsf in publications use:\")\n\n\n\nbibentry(\n  bibtype  = \"Article\",\n  title    = \"aorsf: An R package for supervised learning using the oblique random survival forest\",\n  author   = c(as.person(\"Byron C. Jaeger\"),\n               as.person(\"Sawyer Welden\"),\n               as.person(\"Kristin Lenoir\"),\n               as.person(\"Nicholas M. Pajewski\")),\n  journal  = \"Journal of Open Source Software\",\n  year     = \"2022\",\n  volume   = \"7\",\n  number   = \"77\",\n  pages    = \"4705\",\n  url      = \"https://doi.org/10.21105/joss.04705\",\n  textVersion = paste(\n   \"Jaeger et al. (2022). aorsf: An R package for supervised learning using\",\n   \"the oblique random survival forest. Journal of Open Source Software,\",\n   \"7(77), 4705. https://doi.org/10.21105/joss.04705.\"\n  )\n)\n\nbibentry(\n  bibtype  =  \"Article\",\n  title    = \"Accelerated and interpretable oblique random survival forests\",\n  author   = c(as.person(\"Byron C. Jaeger\"),\n               as.person(\"Sawyer Welden\"),\n               as.person(\"Kristin Lenoir\"),\n               as.person(\"Jaime L. Speiser\"),\n               as.person(\"Matthew W. Segar\"),\n               as.person(\"Ambarish Pandey\"),\n               as.person(\"Nicholas M. Pajewski\")),\n  journal  = \"Journal of Computational and Graphical Statistics\",\n  year     = \"2023\",\n  url      = \"https://doi.org/10.1080/10618600.2023.2231048\",\n  textVersion = paste(\n   \"Jaeger BC, Welden S, Lenoir K, Speiser JL, Segar MW, Pandey A, Pajewski NM.\",\n   \"Accelerated and interpretable oblique random survival forests.\",\n   \"Journal of Computational and Graphical Statistics. 2023 Aug 3:1-6.\"\n  )\n)\n\nbibentry(\n  bibtype      = \"Article\",\n  title        = \"Oblique Random Survival Forests\",\n  author       = c(\n                   as.person(\"Byron C. Jaeger\"),\n                   as.person(\"D. Leann Long\"),\n                   as.person(\"Dustin M. Long\"),\n                   as.person(\"Mario Sims\"),\n                   as.person(\"Jeff M. Szychowski\"),\n                   as.person(\"Yuan-I Min\"),\n                   as.person(\"Leslie A. Mcclure\"),\n                   as.person(\"George Howard\"),\n                   as.person(\"Noah Simon\")\n                   ),\n  journal      = \"Annals of Applied Statistics\",\n  year         = \"2019\",\n  volume       = \"13\",\n  number       = \"3\",\n  pages        = \"1847--1883\",\n  url          = \"https://doi.org/10.1214/19-AOAS1261\",\n\n  textVersion  =\n  paste(\"Jaeger BC, Long DL, Long DM, Sims M, Szychowski JM, Min YI, Mcclure LA, Howard G, Simon N.\",\n        \"Oblique Random Survival Forests.\",\n        \"The Annals of Applied Statistics.\",\n        \"13(3): 1847-1883.\",\n        \"URL https://doi.org/10.1214/19-AOAS1261\",\n        \"DOI: 10.1214/19-AOAS1261\"),\n  header = \"if orsf_control_net() is used please additionally cite:\"\n)\n\n"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/inst/CITATION",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "aorsf <a href=\"https://docs.ropensci.org/aorsf/\"><img src=\"man/figures/logo.png\" align=\"right\" height=\"138\" /></a>"
        ],
        "type": "Text_excerpt",
        "value": "1.  Jaeger BC, Long DL, Long DM, Sims M, Szychowski JM, Min Y, Mcclure\n    LA, Howard G, Simon N (2019). \u201cOblique random survival forests.\u201d\n    *The Annals of Applied Statistics*, *13*(3).\n    <doi:10.1214/19-aoas1261> <https://doi.org/10.1214/19-aoas1261>.\n2.  Jaeger BC, Welden S, Lenoir K, Speiser JL, Segar MW, Pandey A,\n    Pajewski NM (2023). \u201cAccelerated and interpretable oblique random\n    survival forests.\u201d *Journal of Computational and Graphical\n    Statistics*, 1-16. <doi:10.1080/10618600.2023.2231048>\n    <https://doi.org/10.1080/10618600.2023.2231048>.\n3.  Horst AM, Hill AP, Gorman KB (2020). *palmerpenguins: Palmer\n    Archipelago (Antarctica) penguin data*. R package version 0.1.0,\n    <https://allisonhorst.github.io/palmerpenguins/>.\n4.  Menze, H B, Kelm, Michael B, Splitthoff, N D, Koethe, Ullrich,\n    Hamprecht, A F (2011). \u201cOn oblique random forests.\u201d In *Machine\n    Learning and Knowledge Discovery in Databases: European Conference,\n    ECML PKDD 2011, Athens, Greece, September 5-9, 2011, Proceedings,\n    Part II 22*, 453-469. Springer.\n5.  Greenwell, M B, Boehmke, C B, McCarthy, J A (2018). \u201cA simple and\n    effective model-based variable importance measure.\u201d *arXiv preprint\n    arXiv:1805.04755*.\n"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ropensci/aorsf"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ropensci/aorsf"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bcjaeger/aorsf"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "continuous_integration": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": [
          "https://app.codecov.io/gh/bcjaeger/aorsf?branch=master",
          "https://github.com/bcjaeger/aorsf/actions",
          "https://github.com/bcjaeger/aorsf/actions?query=workflow%3Apkgcheck"
        ]
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing to aorsf\n\n\n<!-- @srrstats {G1.2} life cycle is stable with future dev plans  -->\nWant to contribute to `aorsf`? Great! `aorsf` is in an initially stable state of development, with a great deal of active subsequent development envisioned. Below is an outline of how to propose a change to `aorsf`. \n\nFor more detailed info about contributing to this, and other tidyverse packages, please see the\n[**development contributing guide**](https://rstd.io/tidy-contrib). \n\n## Fixing typos\n\nYou can fix typos, spelling mistakes, or grammatical errors in the documentation directly using the GitHub web interface, as long as the changes are made in the _source_ file. \nThis generally means you'll need to edit [roxygen2 comments](https://roxygen2.r-lib.org/articles/roxygen2.html) in an `.R`, not a `.Rd` file. \nYou can find the `.R` file that generates the `.Rd` by reading the comment in the first line.\n\n## Bigger changes\n\nIf you want to make a bigger change, it's a good idea to first file an issue and make sure someone from the team agrees that it\u2019s needed. \nIf you\u2019ve found a bug, please file an issue that illustrates the bug with a minimal \n[reprex](https://www.tidyverse.org/help/#reprex) (this will also help you write a unit test, if needed).\n\n### Pull request process\n\n*   Fork the package and clone onto your computer. If you haven't done this before, we recommend using `usethis::create_from_github(\"ropensci/aorsf\", fork = TRUE)`.\n\n*   Install all development dependencies with `devtools::install_dev_deps()`, and then make sure the package passes R CMD check by running `devtools::check()`. \n    If R CMD check doesn't pass cleanly, it's a good idea to ask for help before continuing. \n*   Create a Git branch for your pull request (PR). We recommend using `usethis::pr_init(\"brief-description-of-change\")`.\n\n*   Make your changes, commit to git, and then create a PR by running `usethis::pr_push()`, and following the prompts in your browser.\n    The title of your PR should briefly describe the change.\n    The body of your PR should contain `Fixes #issue-number`.\n\n*  For user-facing changes, add a bullet to the top of `NEWS.md` (i.e. just below the first header). Follow the style described in <https://style.tidyverse.org/news.html>.\n\n### Code style\n\n*   New code should follow the tidyverse [style guide](https://style.tidyverse.org). \n    You can use the [styler](https://CRAN.R-project.org/package=styler) package to apply these styles, but please don't restyle code that has nothing to do with your PR.  \n\n*  We use [roxygen2](https://cran.r-project.org/package=roxygen2), with [Markdown syntax](https://cran.r-project.org/web/packages/roxygen2/vignettes/rd-formatting.html), for documentation.  \n\n*  We use [testthat](https://cran.r-project.org/package=testthat) for unit tests. \n   Contributions with test cases included are easier to accept.  \n\n## Code of Conduct\n\nPlease note that the aorsf project is released with a\n[Contributor Code of Conduct](CODE_OF_CONDUCT.md). By contributing to this\nproject you agree to abide by its terms.\n"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/.github/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-08-09T13:58:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2025-08-23T18:01:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Accelerated Oblique Random Survival Forests"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/DESCRIPTION",
        "type": "String",
        "value": "Fit, interpret, and compute predictions with oblique random\n    forests. Includes support for partial dependence, variable importance,\n    passing customized functions for variable importance and identification\n    of linear combinations of features. Methods for the oblique random \n    survival forest are described in Jaeger et al., (2023)\n    <DOI:10.1080/10618600.2023.2231048>."
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Fit, interpret, and make predictions with oblique random survival forests. Oblique decision trees are notoriously slow compared to their axis based counterparts, but 'aorsf' runs as fast or faster than axis-based decision tree algorithms for right-censored time-to-event outcomes."
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 0.9038024025389204,
      "result": {
        "original_header": "Why aorsf?",
        "type": "Text_excerpt",
        "value": "- Compatible with `tidymodels` and `mlr3`\n \n"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8757465313361167,
      "result": {
        "original_header": "What does \u201coblique\u201d mean?",
        "type": "Text_excerpt",
        "value": "Decision trees are grown by splitting a set of training data into\nnon-overlapping subsets, with the goal of having more similarity within\nthe new subsets than between them. When subsets are created with a\nsingle predictor, the decision tree is *axis-based* because the subset\nboundaries are perpendicular to the axis of the predictor. When linear\ncombinations (i.e., a weighted sum) of variables are used instead of a\nsingle variable, the tree is *oblique* because the boundaries are\nneither parallel nor perpendicular to the axis. \n**Figure**: Decision trees for classification with axis-based splitting\n(left) and oblique splitting (right). Cases are orange squares; controls\nare purple circles. Both trees partition the predictor space defined by\nvariables X1 and X2, but the oblique splits do a better job of\nseparating the two classes. \nSo, how does this difference translate to real data, and how does it\nimpact random forests comprising hundreds of axis-based or oblique\ntrees? We will demonstrate this using the `penguin` data.<sup>3</sup> We\nwill also use this function to make several plots:\n``` r\nplot_decision_surface <- function(predictions, title, grid){\n \n # this is not a general function for plotting\n # decision surfaces. It just helps to minimize \n # copying and pasting of code.\n \n class_preds <- bind_cols(grid, predictions) %>%\n  pivot_longer(cols = c(Adelie,\n                        Chinstrap,\n                        Gentoo)) %>%\n  group_by(flipper_length_mm, bill_length_mm) %>%\n  arrange(desc(value)) %>%\n  slice(1)\n \n cols <- c(\"darkorange\", \"purple\", \"cyan4\")\n\n ggplot(class_preds, aes(bill_length_mm, flipper_length_mm)) +\n  geom_contour_filled(aes(z = value, fill = name),\n                      alpha = .25) +\n  geom_point(data = penguins_orsf,\n             aes(color = species, shape = species),\n             alpha = 0.5) +\n  scale_color_manual(values = cols) +\n  scale_fill_manual(values = cols) +\n  labs(x = \"Bill length, mm\",\n       y = \"Flipper length, mm\") +\n  theme_minimal() +\n  scale_x_continuous(expand = c(0,0)) +\n  scale_y_continuous(expand = c(0,0)) +\n  theme(panel.grid = element_blank(),\n        panel.border = element_rect(fill = NA),\n        legend.position = '') + \n  labs(title = title)\n \n}\n```\nWe also use a grid of points for plotting decision surfaces:\n``` r\ngrid <- expand_grid(\n\n flipper_length_mm = seq(min(penguins_orsf$flipper_length_mm),\n                     max(penguins_orsf$flipper_length_mm),\n                  len = 200),\n bill_length_mm = seq(min(penguins_orsf$bill_length_mm),\n                      max(penguins_orsf$bill_length_mm),\n                      len = 200)\n)\n```\nWe use `orsf` with `mtry=1` to fit axis-based trees:\n``` r\nfit_axis_tree <- penguins_orsf %>% \n orsf(species ~ bill_length_mm + flipper_length_mm,\n      n_tree = 1,\n      mtry = 1,\n      tree_seeds = 106760)\n```\nNext we use `orsf_update` to copy and modify the original model,\nexpanding it to fit an oblique tree by using `mtry=2` instead of\n`mtry=1`, and to include 500 trees instead of 1:\n``` r\nfit_axis_forest <- fit_axis_tree %>% \n orsf_update(n_tree = 500)\n\nfit_oblique_tree <- fit_axis_tree %>% \n orsf_update(mtry = 2)\n\nfit_oblique_forest <- fit_oblique_tree %>% \n orsf_update(n_tree = 500)\n```\nAnd now we have all we need to visualize decision surfaces using\npredictions from these four fits:\n``` r\npreds <- list(fit_axis_tree,\n              fit_axis_forest,\n              fit_oblique_tree,\n              fit_oblique_forest) %>% \n map(predict, new_data = grid, pred_type = 'prob')\n\ntitles <- c(\"Axis-based tree\",\n            \"Axis-based forest\",\n            \"Oblique tree\",\n            \"Oblique forest\")\n\nplots <- map2(preds, titles, plot_decision_surface, grid = grid)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9374124944975205,
      "result": {
        "original_header": "Variable importance",
        "type": "Text_excerpt",
        "value": "- **negation**<sup>2</sup>: Each variable is assessed separately by\n  multiplying the variable\u2019s coefficients by -1 and then determining how\n  much the model\u2019s performance changes. The worse the model\u2019s\n  performance after negating coefficients for a given variable, the more\n  important the variable. This technique is promising b/c it does not\n  require permutation and it emphasizes variables with larger\n  coefficients in linear combinations, but it is also relatively new and\n  hasn\u2019t been studied as much as permutation importance. See\n  Jaeger, (2023) for more details on this technique. \n- **analysis of variance (ANOVA)**<sup>4</sup>: A p-value is computed\n  for each coefficient in each linear combination of variables in each\n  decision tree. Importance for an individual predictor variable is the\n  proportion of times a p-value for its coefficient is \\< 0.01. This\n  technique is very efficient computationally, but may not be as\n  effective as permutation or negation in terms of selecting signal over\n  noise variables. See [Menze,\n  2011](https://link.springer.com/chapter/10.1007/978-3-642-23783-6_29)\n  for more details on this technique. \n"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9153648812653504,
      "result": {
        "original_header": "Interaction scores",
        "type": "Text_excerpt",
        "value": "The `orsf_vint()` function computes a score for each possible\ninteraction in a model based on PD using the method described in\nGreenwell et al, 2018.<sup>5</sup> It can be slow for larger datasets,\nbut substantial speedups occur by making use of multi-threading and\nrestricting the search to a smaller set of predictors.\n``` r\npreds_interaction <- c(\"albumin\", \"protime\", \"bili\", \"spiders\", \"trt\")\n\n# While it is tempting to speed up `orsf_vint()` by growing a smaller \n# number of trees, results may become unstable with this shortcut.\npbc_interactions <- pbc_fit %>% \n orsf_update(n_tree = 500, tree_seeds = 329) %>% \n orsf_vint(n_thread = 0,  predictors = preds_interaction)\n\npbc_interactions\n#>          interaction      score\n#>               <char>      <num>\n#>  1: albumin..protime 0.97837184\n#>  2:    protime..bili 0.78999788\n#>  3:    albumin..bili 0.59128756\n#>  4:    bili..spiders 0.13192184\n#>  5:        bili..trt 0.13192184\n#>  6: albumin..spiders 0.06578222\n#>  7:     albumin..trt 0.06578222\n#>  8: protime..spiders 0.03012718\n#>  9:     protime..trt 0.03012718\n#> 10:     spiders..trt 0.00000000\n```\n \nDo these interaction scores make sense? Let\u2019s test the top scoring and\nlowest scoring interactions using `coxph()`.\n``` r\nlibrary(survival)\n# the top scoring interaction should get a lower p-value\nanova(coxph(Surv(time, status) ~ protime * albumin, data = pbc_orsf))\n#> Analysis of Deviance Table\n#>  Cox model: response is Surv(time, status)\n#> Terms added sequentially (first to last)\n#> \n#>                  loglik  Chisq Df Pr(>|Chi|)    \n#> NULL            -550.19                         \n#> protime         -538.51 23.353  1  1.349e-06 ***\n#> albumin         -514.89 47.255  1  6.234e-12 ***\n#> protime:albumin -511.76  6.252  1    0.01241 *  \n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n# the bottom scoring interaction should get a higher p-value\nanova(coxph(Surv(time, status) ~ spiders * trt, data = pbc_orsf))\n#> Analysis of Deviance Table\n#>  Cox model: response is Surv(time, status)\n#> Terms added sequentially (first to last)\n#> \n#>              loglik   Chisq Df Pr(>|Chi|)    \n#> NULL        -550.19                          \n#> spiders     -538.58 23.2159  1  1.448e-06 ***\n#> trt         -538.39  0.3877  1     0.5335    \n#> spiders:trt -538.29  0.2066  1     0.6494    \n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n \nNote: this is exploratory and not a true null hypothesis test. Why?\nBecause we used the same data both to generate and to test the null\nhypothesis. We are not so much conducting statistical inference when we\ntest these interactions with `coxph` as we are demonstrating the\ninteraction scores that `orsf_vint()` provides are consistent with tests\nfrom other models.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8415256689937816,
      "result": {
        "original_header": "Comparison to existing software",
        "type": "Text_excerpt",
        "value": "- describes `aorsf` in detail with a summary of the procedures used in\n  the tree fitting algorithm \n- reports prediction accuracy and computational efficiency of all\n  learners. \n"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9268956549422875,
      "result": {
        "original_header": "Funding",
        "type": "Text_excerpt",
        "value": "The developers of `aorsf` received financial support from the Center for\nBiomedical Informatics, Wake Forest University School of Medicine. We\nalso received support from the National Center for Advancing\nTranslational Sciences of the National Institutes of Health under Award\nNumber UL1TR001420. \nThe content is solely the responsibility of the authors and does not\nnecessarily represent the official views of the National Institutes of\nHealth.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "development_status": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "https://www.repostatus.org/#wip"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ropensci/aorsf/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ropensci/aorsf/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ropensci/aorsf"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "aorsf "
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "description",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ropensci/aorsf/main/DESCRIPTION"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/DESCRIPTION",
      "technique": "file_exploration"
    }
  ],
  "has_package_file": [
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/DESCRIPTION",
        "type": "Url",
        "value": "DESCRIPTION"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/DESCRIPTION",
      "technique": "code_parser"
    }
  ],
  "homepage": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://docs.ropensci.org/aorsf/"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/DESCRIPTION",
      "technique": "code_parser"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "aorsf"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/doi/10.5281/zenodo.7116854"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://joss.theoj.org/papers/10.21105/joss.04705/status.svg"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ropensci/aorsf/main/man/figures/tree_axis_v_oblique.png"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ropensci/aorsf/main/man/figures/README-unnamed-chunk-9-1.png"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "aorsf <a href=\"https://docs.ropensci.org/aorsf/\"><img src=\"man/figures/logo.png\" align=\"right\" height=\"138\" /></a>"
        ],
        "type": "Text_excerpt",
        "value": "You can install `aorsf` from CRAN using\n\n``` r\ninstall.packages(\"aorsf\")\n```\n\nYou can install the development version of aorsf from\n[GitHub](https://github.com/) with:\n\n``` r\n# install.packages(\"remotes\")\nremotes::install_github(\"ropensci/aorsf\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ropensci/aorsf/issues"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ropensci/aorsf/issues/"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bcjaeger/aorsf/issues"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "data-science, oblique, random-forest, rstats, survival"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": [
          "r",
          "rstats",
          "data-science"
        ]
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "File_dump",
        "value": "# MIT License\n\nCopyright (c) 2022 aorsf authors (Byron C. Jaeger, Sawyer Welden, and Nicholas M. Pajewski)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/LICENSE.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/DESCRIPTION",
        "type": "String",
        "value": "MIT + file LICENSE"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/https://spdx.org/licenses/MIT",
        "spdx_id": "https://spdx.org/licenses/MIT",
        "type": "License",
        "value": "https://spdx.org/licenses/MIT"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ropensci/aorsf/main/man/figures/logo.png"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "aorsf"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "aorsf: Accelerated Oblique Random Survival Forests"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ropensci"
      },
      "technique": "GitHub_API"
    }
  ],
  "package_id": [
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/DESCRIPTION",
        "type": "String",
        "value": "aorsf"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/DESCRIPTION",
      "technique": "code_parser"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 430899,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 220390,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 3433,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "type": "Programming_language",
        "url": "https://r-project.org",
        "value": "R",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.Rmd"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "https://github.com/bcjaeger/aorsf/blob/master/README.md"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1805.04755*.\n\n## Funding\n\nThe developers of `aorsf` received financial support from the Center for\nBiomedical Informatics, Wake Forest University School of Medicine. We\nalso received support from the National Center for Advancing\nTranslational Sciences of the National Institutes of Health under Award\nNumber UL1TR001420.\n\nThe content is solely the responsibility of the authors and does not\nnecessarily represent the official views of the National Institutes of\nHealth."
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bcjaeger",
          "type": "User"
        },
        "date_created": "2024-01-19T18:32:12Z",
        "date_published": "2024-01-22T16:29:40Z",
        "description": "The `orsf` function can now be applied to continuous, binary, or categorical outcomes. This release also includes more support for partial dependence, including efficient multi-threading and some API changes that make it less tedious to use the `orsf_pd` functions. ",
        "html_url": "https://github.com/ropensci/aorsf/releases/tag/v0.1.3",
        "name": "Classification and regression",
        "release_id": 138012884,
        "tag": "v0.1.3",
        "tarball_url": "https://api.github.com/repos/ropensci/aorsf/tarball/v0.1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/aorsf/releases/138012884",
        "value": "https://api.github.com/repos/ropensci/aorsf/releases/138012884",
        "zipball_url": "https://api.github.com/repos/ropensci/aorsf/zipball/v0.1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bcjaeger",
          "type": "User"
        },
        "date_created": "2023-10-14T16:45:19Z",
        "date_published": "2023-10-14T18:36:43Z",
        "description": "Re-worked C++ following the design of the `ranger` package, making the codebase much more straightforward to maintain. Also, multi-threading has been added as a feature in addition to a few others (see https://docs.ropensci.org/aorsf/news/index.html for full description).",
        "html_url": "https://github.com/ropensci/aorsf/releases/tag/v0.1.1",
        "name": "Object oriented",
        "release_id": 125097192,
        "tag": "v0.1.1",
        "tarball_url": "https://api.github.com/repos/ropensci/aorsf/tarball/v0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/aorsf/releases/125097192",
        "value": "https://api.github.com/repos/ropensci/aorsf/releases/125097192",
        "zipball_url": "https://api.github.com/repos/ropensci/aorsf/zipball/v0.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bcjaeger",
          "type": "User"
        },
        "date_created": "2022-11-07T12:39:15Z",
        "date_published": "2022-11-07T12:40:56Z",
        "description": "* `orsf` formulas now accepts `Surv` objects (see https://github.com/ropensci/aorsf/issues/11)\r\n\r\n* Added `verbose_progress` input to `orsf`, which prints messages to console indicating progress. \r\n\r\n* Allowance of missing values for `orsf`. Mean and mode imputation is performed for observations with missing data. These values can also be used to impute new data with missing values.\r\n\r\n* Centering and scaling of predictors is now done prior to growing the forest. ",
        "html_url": "https://github.com/ropensci/aorsf/releases/tag/v0.0.4",
        "name": "Missing data, scaling, verbosity, and more options in formula",
        "release_id": 82262187,
        "tag": "v0.0.4",
        "tarball_url": "https://api.github.com/repos/ropensci/aorsf/tarball/v0.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/aorsf/releases/82262187",
        "value": "https://api.github.com/repos/ropensci/aorsf/releases/82262187",
        "zipball_url": "https://api.github.com/repos/ropensci/aorsf/zipball/v0.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bcjaeger",
          "type": "User"
        },
        "date_created": "2022-09-27T13:34:00Z",
        "date_published": "2022-09-27T15:04:54Z",
        "description": "See https://docs.ropensci.org/aorsf/news/index.html, version 0.0.3",
        "html_url": "https://github.com/ropensci/aorsf/releases/tag/v0.0.3",
        "name": "aorsf: An R package for supervised learning using the oblique random survival forest",
        "release_id": 78309435,
        "tag": "v0.0.3",
        "tarball_url": "https://api.github.com/repos/ropensci/aorsf/tarball/v0.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/aorsf/releases/78309435",
        "value": "https://api.github.com/repos/ropensci/aorsf/releases/78309435",
        "zipball_url": "https://api.github.com/repos/ropensci/aorsf/zipball/v0.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bcjaeger",
          "type": "User"
        },
        "date_created": "2022-08-23T17:57:32Z",
        "date_published": "2022-08-23T18:20:03Z",
        "description": "Matches 0.0.1 on CRAN",
        "html_url": "https://github.com/ropensci/aorsf/releases/tag/v0.0.1",
        "name": "Accelerated and interpretable",
        "release_id": 75134883,
        "tag": "v0.0.1",
        "tarball_url": "https://api.github.com/repos/ropensci/aorsf/tarball/v0.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/ropensci/aorsf/releases/75134883",
        "value": "https://api.github.com/repos/ropensci/aorsf/releases/75134883",
        "zipball_url": "https://api.github.com/repos/ropensci/aorsf/zipball/v0.0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "repository_status": [
    {
      "confidence": 1,
      "result": {
        "description": "Active \u2013 The project has reached a stable, usable\nstate and is being actively\ndeveloped.",
        "type": "Url",
        "value": "https://www.repostatus.org/#active"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Partial dependence (PD)",
        "parent_header": [
          "aorsf <a href=\"https://docs.ropensci.org/aorsf/\"><img src=\"man/figures/logo.png\" align=\"right\" height=\"138\" /></a>"
        ],
        "type": "Text_excerpt",
        "value": "Partial dependence (PD) shows the expected prediction from a model as a\nfunction of a single predictor or multiple predictors. The expectation\nis marginalized over the values of all other predictors, giving\nsomething like a multivariable adjusted estimate of the model\u2019s\nprediction.. You can use specific values for a predictor to compute PD\nor let `aorsf` pick reasonable values for you if you use\n`pred_spec_auto()`:\n\n``` r\n# pick your own values\norsf_pd_oob(bill_fit, pred_spec = list(species = c(\"Adelie\", \"Gentoo\")))\n#>    species     mean      lwr     medn      upr\n#>     <fctr>    <num>    <num>    <num>    <num>\n#> 1:  Adelie 39.99394 35.76532 39.80782 46.13931\n#> 2:  Gentoo 46.66565 40.02938 46.88517 51.61367\n\n# let aorsf pick reasonable values for you:\norsf_pd_oob(bill_fit, pred_spec = pred_spec_auto(bill_depth_mm, island))\n#>     bill_depth_mm    island     mean      lwr     medn      upr\n#>             <num>    <fctr>    <num>    <num>    <num>    <num>\n#>  1:          14.3    Biscoe 43.94960 35.90421 45.30159 51.05109\n#>  2:          15.6    Biscoe 44.24705 36.62759 45.57321 51.08020\n#>  3:          17.3    Biscoe 44.84757 36.53804 45.62910 53.93833\n#>  4:          18.7    Biscoe 45.08939 36.35893 46.16893 54.42075\n#>  5:          19.5    Biscoe 45.13608 36.21033 46.08023 54.42075\n#> ---                                                            \n#> 11:          14.3 Torgersen 43.55984 35.47143 44.18127 51.05109\n#> 12:          15.6 Torgersen 43.77317 35.44683 44.28406 51.08020\n#> 13:          17.3 Torgersen 44.56465 35.84585 44.83694 53.93833\n#> 14:          18.7 Torgersen 44.68367 35.44010 44.86667 54.42075\n#> 15:          19.5 Torgersen 44.64605 35.44010 44.86667 54.42075\n```\n\nThe summary function, `orsf_summarize_uni()`, computes PD for as many\nvariables as you ask it to, using sensible values.\n\n``` r\norsf_summarize_uni(pbc_fit, n_variables = 2)\n#> \n#> -- bili (VI Rank: 1) -----------------------------\n#> \n#>         |----------------- Risk -----------------|\n#>   Value      Mean     Median     25th %    75th %\n#>  <char>     <num>      <num>      <num>     <num>\n#>    0.60 0.2098108 0.07168855 0.01138461 0.2860450\n#>    0.80 0.2117933 0.07692308 0.01709469 0.2884990\n#>    1.40 0.2326560 0.08445419 0.02100837 0.3563622\n#>    3.55 0.4265979 0.35820106 0.05128824 0.7342923\n#>    7.30 0.4724608 0.44746241 0.11759259 0.8039683\n#> \n#> -- copper (VI Rank: 2) ---------------------------\n#> \n#>         |----------------- Risk -----------------|\n#>   Value      Mean     Median     25th %    75th %\n#>  <char>     <num>      <num>      <num>     <num>\n#>    25.0 0.2332412 0.04425936 0.01587919 0.3888304\n#>    42.5 0.2535448 0.07417582 0.01754386 0.4151786\n#>    74.0 0.2825471 0.11111111 0.01988069 0.4770833\n#>     130 0.3259604 0.18771003 0.04658385 0.5054348\n#>     217 0.4213303 0.28571429 0.13345865 0.6859423\n#> \n#>  Predicted risk at time t = 1788 for top 2 predictors\n```\n\nFor more on PD, see the\n[vignette](https://docs.ropensci.org/aorsf/articles/pd.html)\n"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2025-09-19 02:21:27",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 59
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Get started",
        "parent_header": [
          "aorsf <a href=\"https://docs.ropensci.org/aorsf/\"><img src=\"man/figures/logo.png\" align=\"right\" height=\"138\" /></a>"
        ],
        "type": "Text_excerpt",
        "value": "``` r\nlibrary(aorsf)\nlibrary(tidyverse)\n```\n\n`aorsf` fits several types of oblique RFs with the `orsf()` function,\nincluding classification, regression, and survival RFs.\n\nFor classification, we fit an oblique RF to predict penguin species\nusing `penguin` data from the magnificent `palmerpenguins` [R\npackage](https://allisonhorst.github.io/palmerpenguins/)\n\n``` r\n# An oblique classification RF\npenguin_fit <- orsf(data = penguins_orsf,\n                    n_tree = 5, \n                    formula = species ~ .)\n\npenguin_fit\n#> ---------- Oblique random classification forest\n#> \n#>      Linear combinations: Accelerated Logistic regression\n#>           N observations: 333\n#>                N classes: 3\n#>                  N trees: 5\n#>       N predictors total: 7\n#>    N predictors per node: 3\n#>  Average leaves per tree: 6\n#> Min observations in leaf: 5\n#>           OOB stat value: 0.99\n#>            OOB stat type: AUC-ROC\n#>      Variable importance: anova\n#> \n#> -----------------------------------------\n```\n\nFor regression, we use the same data but predict bill length of\npenguins:\n\n``` r\n# An oblique regression RF\nbill_fit <- orsf(data = penguins_orsf, \n                 n_tree = 5, \n                 formula = bill_length_mm ~ .)\n\nbill_fit\n#> ---------- Oblique random regression forest\n#> \n#>      Linear combinations: Accelerated Linear regression\n#>           N observations: 333\n#>                  N trees: 5\n#>       N predictors total: 7\n#>    N predictors per node: 3\n#>  Average leaves per tree: 42.6\n#> Min observations in leaf: 5\n#>           OOB stat value: 0.76\n#>            OOB stat type: RSQ\n#>      Variable importance: anova\n#> \n#> -----------------------------------------\n```\n\nMy personal favorite is the oblique survival RF with accelerated Cox\nregression because it was the first type of oblique RF that `aorsf`\nprovided (see [JCGS\npaper](https://doi.org/10.1080/10618600.2023.2231048)). Here, we use it\nto predict mortality risk following diagnosis of primary biliary\ncirrhosis:\n\n``` r\n# An oblique survival RF\npbc_fit <- orsf(data = pbc_orsf, \n                n_tree = 5,\n                formula = Surv(time, status) ~ . - id)\n\npbc_fit\n#> ---------- Oblique random survival forest\n#> \n#>      Linear combinations: Accelerated Cox regression\n#>           N observations: 276\n#>                 N events: 111\n#>                  N trees: 5\n#>       N predictors total: 17\n#>    N predictors per node: 5\n#>  Average leaves per tree: 20.4\n#> Min observations in leaf: 5\n#>       Min events in leaf: 1\n#>           OOB stat value: 0.79\n#>            OOB stat type: Harrell's C-index\n#>      Variable importance: anova\n#> \n#> -----------------------------------------\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "version": [
    {
      "confidence": 1,
      "result": {
        "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/DESCRIPTION",
        "type": "String",
        "value": "0.1.5.9001"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/DESCRIPTION",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "0.0.1"
      },
      "source": "https://raw.githubusercontent.com/ropensci/aorsf/main/codemeta.json",
      "technique": "code_parser"
    }
  ]
}