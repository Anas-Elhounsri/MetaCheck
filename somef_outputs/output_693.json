{
  "authors": [
    {
      "confidence": 1,
      "result": {
        "affiliation": "UK Centre for Ecology & Hydrology, Lancaster Environment Centre, Library Avenue, Bailrigg, Lancaster, LA1 4AP, UK",
        "email": "sharrison@ceh.ac.uk",
        "identifier": "0000-0001-8491-4720",
        "type": "String",
        "value": "Sam Harrison"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "UK Centre for Ecology & Hydrology, Maclean Building, Benson Lane, Crowmarsh Gifford, Wallingford, OX10 8BB, UK",
        "email": "vke@ceh.ac.uk",
        "identifier": "0000-0003-4489-5363",
        "type": "String",
        "value": "Virginie D Keller"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "UK Centre for Ecology & Hydrology, Maclean Building, Benson Lane, Crowmarsh Gifford, Wallingford, OX10 8BB, UK",
        "email": "rjw@ceh.ac.uk",
        "identifier": "0000-0002-9876-0491",
        "type": "String",
        "value": "Richard J Williams"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "UK Centre for Ecology & Hydrology, Maclean Building, Benson Lane, Crowmarsh Gifford, Wallingford, OX10 8BB, UK",
        "email": "mihu@ceh.ac.uk",
        "identifier": "0000-0003-3764-5331",
        "type": "String",
        "value": "Michael Hutchins"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "UK Centre for Ecology & Hydrology, Lancaster Environment Centre, Library Avenue, Bailrigg, Lancaster, LA1 4AP, UK",
        "email": "stlo@ceh.ac.uk",
        "identifier": "0000-0002-3627-851X",
        "type": "String",
        "value": "Stephen Lofts"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/samharrison7/fortran-error-handler"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/samharrison7/fortran-error-handler"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "continuous_integration": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/.github/workflows/fair-software.yml"
      },
      "technique": "file_exploration"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contribution Guide\n\nThanks for considering contributing to the Fortran Error Handler. We very much welcome your input.\n\n## Bug reports\n\nWhilst bug reports are very welcome, we strongly encourage pull requests to accompany these. Reports should be made via the issue tracker and should include enough information to be fully reproducible. This includes information on the system and compiler you are using, as well as detailed information about what you were doing that caused the bug.\n\n## New and updated features\n\nWe welcome new and updated features via pull requests. Only completed features that do not require any further coding to become functional will be accepted. If you have an idea for a feature but don't have the time to code it, then consider raising a feature request issue. If you have some code towards a feature but won't have time to finish it, then raise an issue highlighting this, and if we think the feature is valuable enough, we may open a new feature branch for you to submit your code to.\n\n## Which branch?\n\nPlease send pull requests for all contributions (bug reports and features) to the `develop` branch.\n\n## Security vulnerabilities\n\nIf you discover a security vulnerability, please send an email to Sam Harrison at [samharrison.xg@gmail.com](mailto:samharrison.xg@gmail.com). Please do not submit an issue with the vulnerability.\n\n## Coding style\n\nFortran does not have strict coding style conventions, but we have implemented our own with this project. Before contributing, please read through some of the code to get a flavour of these, and stick to them as much as possible. They are somewhat similar to Java and PHP conventions, and include:\n- Four spaces to ident, ident all blocks (types, functions, loops etc) and save files as UTF-8 encoding.\n- `lowerCamelCase` for variable and function names, with the exception of globally-available variables, which should be in capitals.\n- `UpperCamelCase` for type and module names.\n- Lowercase for all Fortran constructs (`do`, `module`, `subroutine` etc).\n- Variable names should be verbose enough to be understandable without needing documentation."
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-06-27T16:09:37Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2020-06-05"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_published": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2020-06-05"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-07-28T12:15:34Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2023-05-31"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Comprehensive error framework for applications requiring functional and robust error handling, utilising the power of modern object-oriented Fortran."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Comprehensive error framework for applications requiring functional and robust error handling, utilising the power of modern object-oriented Fortran."
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/samharrison7/fortran-error-handler/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Fortran Error Handler",
        "type": "Text_excerpt",
        "value": "[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.4268263.svg)](https://doi.org/10.5281/zenodo.4268263)\n[![fair-software.eu](https://img.shields.io/badge/fair--software.eu-%E2%97%8F%20%20%E2%97%8F%20%20%E2%97%8B%20%20%E2%97%8F%20%20%E2%97%8B-orange)](https://fair-software.eu)\n\nFortran error handling frameworks are few and far between, and those that do exist often implement only parts of the error handling process, or rely on pre-processors. The goal of this error handling framework is to provide a universal and comprehensive solution for applications requiring functional and robust error handling, utilising the power of modern object-oriented Fortran.\n\n- [Getting started](#getting-started)\n- [Usage](#usage)\n    - [Basic structure](#usage-structure)\n    - [Quick start guide](#usage-quickstart)\n- [Learn more](#more)\n- [Caveats and limitations](#more)\n\n<a name=\"getting-started\"></a>"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`fpm` - Fortran Package Manager",
        "parent_header": [
          "Fortran Error Handler",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "The simplest way is to use [fpm (Fortran Package Manager)](https://fpm.fortran-lang.org/en/index.html). You can either directly include the Fortran Error Handler as a dependency in your `fpm.toml` file:\n\n```toml\n[dependencies]\nfeh = { git = \"https://github.com/samharrison7/fortran-error-handler\" }\n```\n\nOr you can clone the repo and build the library yourself using fpm:\n\n```bash\n$ git clone https://github.com/samharrison7/fortran-error-handler\n$ cd fortran-error-handler\n$ fpm build\n```\n\nA static library (e.g. `libfeh.a` on Linux) and `.mod` files will be generated in the `build` directory for you to use. An example executable (using `example/example_usage.f90`) will also be generated. Running `fpm test` will run tests (using `tests/run_tests.f90`) for the framework. \nYou can also get fpm to install the Fortran Error Handler locally (e.g. to `/home/<user>/.local`):\n\n```bash\n$ fpm install\n```\n\nFpm can easily be installed using Conda: `conda install -c conda-forge fpm`.\n"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Grab the files",
        "parent_header": [
          "Fortran Error Handler",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "Another simple method is to simple grab a copy of the source files (in `src/`) and include at the start of your compilation setup. Source files should be compiled in this order: `ErrorInstance.f90`, `ErrorHandler.f90`, `ErrorCriteria.f90`, `Result.f90`. An example [Makefile.example](./Makefile.example) is included, which can be altered according to your compiler and preferences. \n"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Meson",
        "parent_header": [
          "Fortran Error Handler",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "If you use [meson](https://mesonbuild.com/), a [meson.build](./meson.build) file is provided. For example, if you want to build into the `buildmeson` directory:\n\n```bash\n$ meson buildmeson\n$ ninja -C buildmeson\n```\n\nFrom meson 0.56, you can use the `meson compile` command instead of `ninja`. This will generate the example and test executables, a shared library and module files. You can run the tests directly using meson: `meson test -C buildmeson`.\n\nBy default, the library is built with a debug build type. To build for release (with `-O3` optimisations), specify this via the `--buildtype=release` option:\n\n```bash\n$ meson buildrelease --buildtype=release\n$ ninja -C buildrelease\n```\n\nInstalling using meson (`meson install`) isn't recommended at the moment as `.mod` files are not installed - see [this issue](https://github.com/mesonbuild/meson/issues/5374).\n"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CMake",
        "parent_header": [
          "Fortran Error Handler",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "The code can also be compiled using CMake, which similarly generates a library and `.mod` files, an example executable, and executable of unit tests.\n\n```bash\n$ mkdir build\n$ cd build\n$ cmake ..\n$ make\n# To run the unit tests\n$ ./test\n# To run the example\n$ ./example\n```\n\n<a name=\"usage\"></a>"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic structure",
        "parent_header": [
          "Fortran Error Handler",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The framework consists of two main classes:\n\n- [ErrorHandler](doc/ErrorHandler.md): Responsible for initiating the error handling environment, queuing and triggering error events, and storing a list of possible error codes and their respective error messages.\n- [ErrorInstance](doc/ErrorInstance.md): An ErrorInstance is an object representing an error, containing an error code, error message, whether the error is critical (should stop the program executing), and a user-defined trace of where the error has come from.\n\nA number of further classes provide added functionality:\n\n- [Result](doc/Result.md): A Result object, though not required to use the framework, is designed as an object to be returned from any procedures that (may) throw an error. An object of `type(Result)` contains an `errors` component, which is an array of ErrorInstances and is intended to be returned from procedures that normally wouldn't return anything else (i.e., subroutines). To facilitate the returning of data as well as errors from procedures (i.e., functions), a number of separate types extend `Result`, each one dealing with data of a different rank (dimensionality). In addition to the `errors` component, they contain a `data` component, whose rank is determined by the type name. For example, `type(Result0D)` is used for scalar data (0D), `type(Result1D)` is used for data of rank-1 (1D) and `type(Result2D)` is used for data of rank-2 (2D). The maximum data rank is currently rank-4 (`type(Result4D)`).\n- [ErrorCriteria](doc/ErrorCriteria.md): This class extends the ErrorHandler and defines a number of common \"criteria\" used for error checking, such as checking whether a number falls between given bounds. Criteria functions expedite the error checking process with intuitive function calls returning pre-defined ErrorInstances.\n\n<a name=\"usage-quickstart\"></a>"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Learn more <a name=\"more\"></a>",
        "parent_header": [
          "Fortran Error Handler"
        ],
        "type": "Text_excerpt",
        "value": "Explore the documentation for each class to learn how to best use the framework, and browse the examples to get an idea of how to implement the framework into your project:\n\n- [ErrorHandler](doc/ErrorHandler.md)\n- [ErrorInstance](doc/ErrorInstance.md)\n- [Result](doc/Result.md)\n- [ErrorCriteria](doc/ErrorCriteria.md)\n- [Examples](example/)\n"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Caveats and limitations <a name=\"caveats\"></a>",
        "parent_header": [
          "Fortran Error Handler"
        ],
        "type": "Text_excerpt",
        "value": "- Error code must be less than 99999.\n- Result objects only support up to rank-4 (4 dimensional) data.\n- Limited support for different kinds, due to Fortran's lack of kind polymorphism. In particular, ErrorCriteria only accept 4-byte integers and single precision, double precision and quadruple precision reals, as such:\n\n```fortran\ninteger, parameter :: dp = selected_real_kind(15,307)\ninteger, parameter :: qp = selected_real_kind(33,4931)\n\ninteger :: i = 1\nreal :: r = 1.0\nreal(dp) :: r_dp = 1.0_dp\nreal(qp) :: r_qp = 1.0_qp\n```\n"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/samharrison7/fortran-error-handler/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "samharrison7/fortran-error-handler"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Fortran Error Handler"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.5281/zenodo.4268263"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start guide",
        "parent_header": [
          "Fortran Error Handler",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Let's create a quick program that asks for a user's input, checks that it passes a number of criteria and if it doesn't, triggers an error.\n\nFirstly, you need to include the appropriate modules to use:\n\n```fortran\nuse ErrorInstanceModule\nuse ErrorCriteriaModule\nuse ResultModule\n```\n\nErrorCriteria extends ErrorHandler and so if we are using the ErrorCriteria class, we don't need to directly use the ErrorHandler. ErrorCriteria can be thought of as the ErrorHandler (thus responsible for storing and triggering errors), but with criteria-checking capabilities. If we're using it, we need to create and initialise an ErrorCriteria instance so that default ErrorInstances are set for different criteria. If we don't want criteria-checking capabilities, we can just create and initialise the ErrorHandler instead.\n\nLet's also initialise an integer to store the user's input into, and a scalar (0D) Result object to store data and errors in:\n\n```fortran\ntype(ErrorCriteria) :: EH       ! If criteria-checking not needed, use ErrorHandler instead\ninteger :: i\ntype(Result0D) :: r\n```\n\nWe first need to initialise the ErrorCriteria (and thus ErrorHandler). This sets a default error with code 1, and a \"no error\" with code 0, as well as a number of default errors for the criteria (see the [ErrorCriteria docs](doc/ErrorCriteria.md)). At the same time, let's specify two custom errors that we might want to trigger at some later point in the code. `isCritical` determines whether triggering of the error stops the program executing or just prints a warning, and it defaults to true (i.e., triggering an error stops the program).\n\n```fortran\ncall EH%init( &\n    errors = [ &\n        ErrorInstance(code=200, message=\"A custom error message.\", isCritical=.false.), &\n        ErrorInstance(code=300, message=\"Another custom error message.\", isCritical=.true.) &\n    ] &\n)\n```\n\nWe can also add errors to the ErrorHandler on the fly by using the `add` procedure: `call EH%add(code=200, message=\"A custom error message.\")`.\n\nNow let's get the user to enter an integer, and specify that it should be between 0 and 10, but not equal to 5:\n\n```fortran\nwrite(*,\"(a)\") \"Enter an integer between 0 and 10, but not equal to 5:\"\nread(*,*) i\n```\n\nWe now need to test `i` meets these criteria, and we can do that using the ErrorCriteria's `limit` and `notEqual` methods. We'll do this at the same time as creating the Result object, which stores the data `i` as well as any errors:\n\n```fortran\nr = Result( &\n    data = i, &\n    errors = [ &\n        EH%limit(i,0,10), &\n        EH%notEqual(i,5) &\n    ] &\n)\n```\n\nNow we can attempt to trigger any errors that might be present, by using the ErrorHandler's `trigger` method, which accepts either an error code, an ErrorInstance or an array of ErrorInstances as its parameters. If the criteria check didn't result in any errors, nothing will happen (in reality, the criteria returns an ErrorInstance with code 0 - the default \"no error\" - which the `trigger` method ignores).\n\n```fortran\ncall EH%trigger(errors=r%getErrors())\n```\n\nThe default ErrorInstances set up by the `init` procedure for ErrorCriteria all have `isCritical` set to true, and so if either of these criteria errors are triggered, program execution will be stopped. The default criteria errors can be altered by using the `modify` procedure - see the [ErrorCriteria docs](doc/ErrorCriteria.md). Finally, let's print the value to the console:\n\n```fortran\nwrite(*,\"(a,i1)\") \"Input value is: \", .integer. r\n```\n\nA number of operators, such an `.integer.` and `.real.`, are available to quickly return the data (which is stored polymorphically) from a Result object as a specific type. If you are uncomfortable using custom operators, then the corresponding procedures `r%getDataAsInteger()`, `r%getDataAsReal()`, etc, are also available. See the [Result docs](doc/Result.md) for more details.\n\nLet's test it out with a few different integers:\n\n```bash\n$ Enter an integer between 0 and 10, but not equal to 5:\n$ 12\n$ Error: Value must be between 0 and 10. Given value: 12.\n$ ERROR STOP 105\n\n$ Enter an integer between 0 and 10, but not equal to 5:\n$ 5\n$ Error: Value must not be equal to 5. Given value: 5.\n$ ERROR STOP 106\n\n$ Enter an integer between 0 and 10, but not equal to 5:\n$ 1\n$ Input value is: 1\n```\n\nThe stop codes 105 and 106 are the default error codes for those particular limit criteria. These codes can be modified using the ErrorCriteria's `modifyErrorCriterionCode` procedure. See the [ErrorCriteria docs](doc/ErrorCriteria.md).\n\nThe framework is designed to work seemlessly in large object-oriented projects, where Result objects can be returned from functions with ErrorInstances that contain a user-defined trace of where the error came from. The goal of such a trace is to provide more useful errors to end users of your application, who might not have access to the source code and thus find standard stack traces containing references to files and line numbers useless. More details can be found in the [ErrorInstance docs](doc/ErrorInstance.md), and more thorough examples in the [examples directory](example/).\n"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/samharrison7/fortran-error-handler/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "error-handling, fortran, fortran-package-manager, fpm"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": [
          "Fortran",
          "error handling"
        ]
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Sam Harrison\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/MIT",
        "spdx_id": "MIT",
        "type": "License",
        "value": "MIT"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "fortran-error-handler"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "samharrison7"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Fortran",
        "size": 235584,
        "type": "Programming_language",
        "value": "Fortran"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Meson",
        "size": 1068,
        "type": "Programming_language",
        "value": "Meson"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 769,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 604,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "samharrison7",
          "type": "User"
        },
        "date_created": "2023-05-31T17:55:06Z",
        "date_published": "2023-05-31T17:58:30Z",
        "description": "Updating fpm support",
        "html_url": "https://github.com/samharrison7/fortran-error-handler/releases/tag/1.0.5",
        "name": "1.0.5",
        "release_id": 105570267,
        "tag": "1.0.5",
        "tarball_url": "https://api.github.com/repos/samharrison7/fortran-error-handler/tarball/1.0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/samharrison7/fortran-error-handler/releases/105570267",
        "value": "https://api.github.com/repos/samharrison7/fortran-error-handler/releases/105570267",
        "zipball_url": "https://api.github.com/repos/samharrison7/fortran-error-handler/zipball/1.0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "samharrison7",
          "type": "User"
        },
        "date_created": "2022-01-02T10:06:27Z",
        "date_published": "2022-01-02T10:08:34Z",
        "description": "Adding copyright to `fpm.toml`.",
        "html_url": "https://github.com/samharrison7/fortran-error-handler/releases/tag/1.0.4",
        "name": "1.0.4",
        "release_id": 56268478,
        "tag": "1.0.4",
        "tarball_url": "https://api.github.com/repos/samharrison7/fortran-error-handler/tarball/1.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/samharrison7/fortran-error-handler/releases/56268478",
        "value": "https://api.github.com/repos/samharrison7/fortran-error-handler/releases/56268478",
        "zipball_url": "https://api.github.com/repos/samharrison7/fortran-error-handler/zipball/1.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "samharrison7",
          "type": "User"
        },
        "date_created": "2021-12-31T16:38:41Z",
        "date_published": "2021-12-31T16:41:20Z",
        "description": "Adding fpm support",
        "html_url": "https://github.com/samharrison7/fortran-error-handler/releases/tag/1.0.3",
        "name": "1.0.3",
        "release_id": 56234872,
        "tag": "1.0.3",
        "tarball_url": "https://api.github.com/repos/samharrison7/fortran-error-handler/tarball/1.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/samharrison7/fortran-error-handler/releases/56234872",
        "value": "https://api.github.com/repos/samharrison7/fortran-error-handler/releases/56234872",
        "zipball_url": "https://api.github.com/repos/samharrison7/fortran-error-handler/zipball/1.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "samharrison7",
          "type": "User"
        },
        "date_created": "2020-11-11T15:06:02Z",
        "date_published": "2020-11-11T15:12:39Z",
        "description": "Initial release version of the Fortran Error Handler.",
        "html_url": "https://github.com/samharrison7/fortran-error-handler/releases/tag/1.0.2",
        "name": "Initial release",
        "release_id": 33808393,
        "tag": "1.0.2",
        "tarball_url": "https://api.github.com/repos/samharrison7/fortran-error-handler/tarball/1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/samharrison7/fortran-error-handler/releases/33808393",
        "value": "https://api.github.com/repos/samharrison7/fortran-error-handler/releases/33808393",
        "zipball_url": "https://api.github.com/repos/samharrison7/fortran-error-handler/zipball/1.0.2"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "support",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2025-09-19 02:42:14",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 20
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "non-software"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting started",
        "parent_header": [
          "Fortran Error Handler"
        ],
        "type": "Text_excerpt",
        "value": "There are a few ways to get the Fortran Error Handler into your project. The following have been tested with recent version of the GFortran and Intel Fortran compiler (`ifort`, not `ifx`).\n"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`fpm` - Fortran Package Manager",
        "parent_header": [
          "Fortran Error Handler",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "The simplest way is to use [fpm (Fortran Package Manager)](https://fpm.fortran-lang.org/en/index.html). You can either directly include the Fortran Error Handler as a dependency in your `fpm.toml` file:\n\n```toml\n[dependencies]\nfeh = { git = \"https://github.com/samharrison7/fortran-error-handler\" }\n```\n\nOr you can clone the repo and build the library yourself using fpm:\n\n```bash\n$ git clone https://github.com/samharrison7/fortran-error-handler\n$ cd fortran-error-handler\n$ fpm build\n```\n\nA static library (e.g. `libfeh.a` on Linux) and `.mod` files will be generated in the `build` directory for you to use. An example executable (using `example/example_usage.f90`) will also be generated. Running `fpm test` will run tests (using `tests/run_tests.f90`) for the framework. \nYou can also get fpm to install the Fortran Error Handler locally (e.g. to `/home/<user>/.local`):\n\n```bash\n$ fpm install\n```\n\nFpm can easily be installed using Conda: `conda install -c conda-forge fpm`.\n"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Grab the files",
        "parent_header": [
          "Fortran Error Handler",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "Another simple method is to simple grab a copy of the source files (in `src/`) and include at the start of your compilation setup. Source files should be compiled in this order: `ErrorInstance.f90`, `ErrorHandler.f90`, `ErrorCriteria.f90`, `Result.f90`. An example [Makefile.example](./Makefile.example) is included, which can be altered according to your compiler and preferences. \n"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Meson",
        "parent_header": [
          "Fortran Error Handler",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "If you use [meson](https://mesonbuild.com/), a [meson.build](./meson.build) file is provided. For example, if you want to build into the `buildmeson` directory:\n\n```bash\n$ meson buildmeson\n$ ninja -C buildmeson\n```\n\nFrom meson 0.56, you can use the `meson compile` command instead of `ninja`. This will generate the example and test executables, a shared library and module files. You can run the tests directly using meson: `meson test -C buildmeson`.\n\nBy default, the library is built with a debug build type. To build for release (with `-O3` optimisations), specify this via the `--buildtype=release` option:\n\n```bash\n$ meson buildrelease --buildtype=release\n$ ninja -C buildrelease\n```\n\nInstalling using meson (`meson install`) isn't recommended at the moment as `.mod` files are not installed - see [this issue](https://github.com/mesonbuild/meson/issues/5374).\n"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CMake",
        "parent_header": [
          "Fortran Error Handler",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "The code can also be compiled using CMake, which similarly generates a library and `.mod` files, an example executable, and executable of unit tests.\n\n```bash\n$ mkdir build\n$ cd build\n$ cmake ..\n$ make\n# To run the unit tests\n$ ./test\n# To run the example\n$ ./example\n```\n\n<a name=\"usage\"></a>"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Fortran Error Handler"
        ],
        "type": "Text_excerpt",
        "value": "Read the below documentation for example usage, and check out the [example](example/) directory for ideas of how to incorporate into your project.\n\n<a name=\"usage-structure\"></a>"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic structure",
        "parent_header": [
          "Fortran Error Handler",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The framework consists of two main classes:\n\n- [ErrorHandler](doc/ErrorHandler.md): Responsible for initiating the error handling environment, queuing and triggering error events, and storing a list of possible error codes and their respective error messages.\n- [ErrorInstance](doc/ErrorInstance.md): An ErrorInstance is an object representing an error, containing an error code, error message, whether the error is critical (should stop the program executing), and a user-defined trace of where the error has come from.\n\nA number of further classes provide added functionality:\n\n- [Result](doc/Result.md): A Result object, though not required to use the framework, is designed as an object to be returned from any procedures that (may) throw an error. An object of `type(Result)` contains an `errors` component, which is an array of ErrorInstances and is intended to be returned from procedures that normally wouldn't return anything else (i.e., subroutines). To facilitate the returning of data as well as errors from procedures (i.e., functions), a number of separate types extend `Result`, each one dealing with data of a different rank (dimensionality). In addition to the `errors` component, they contain a `data` component, whose rank is determined by the type name. For example, `type(Result0D)` is used for scalar data (0D), `type(Result1D)` is used for data of rank-1 (1D) and `type(Result2D)` is used for data of rank-2 (2D). The maximum data rank is currently rank-4 (`type(Result4D)`).\n- [ErrorCriteria](doc/ErrorCriteria.md): This class extends the ErrorHandler and defines a number of common \"criteria\" used for error checking, such as checking whether a number falls between given bounds. Criteria functions expedite the error checking process with intuitive function calls returning pre-defined ErrorInstances.\n\n<a name=\"usage-quickstart\"></a>"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start guide",
        "parent_header": [
          "Fortran Error Handler",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Let's create a quick program that asks for a user's input, checks that it passes a number of criteria and if it doesn't, triggers an error.\n\nFirstly, you need to include the appropriate modules to use:\n\n```fortran\nuse ErrorInstanceModule\nuse ErrorCriteriaModule\nuse ResultModule\n```\n\nErrorCriteria extends ErrorHandler and so if we are using the ErrorCriteria class, we don't need to directly use the ErrorHandler. ErrorCriteria can be thought of as the ErrorHandler (thus responsible for storing and triggering errors), but with criteria-checking capabilities. If we're using it, we need to create and initialise an ErrorCriteria instance so that default ErrorInstances are set for different criteria. If we don't want criteria-checking capabilities, we can just create and initialise the ErrorHandler instead.\n\nLet's also initialise an integer to store the user's input into, and a scalar (0D) Result object to store data and errors in:\n\n```fortran\ntype(ErrorCriteria) :: EH       ! If criteria-checking not needed, use ErrorHandler instead\ninteger :: i\ntype(Result0D) :: r\n```\n\nWe first need to initialise the ErrorCriteria (and thus ErrorHandler). This sets a default error with code 1, and a \"no error\" with code 0, as well as a number of default errors for the criteria (see the [ErrorCriteria docs](doc/ErrorCriteria.md)). At the same time, let's specify two custom errors that we might want to trigger at some later point in the code. `isCritical` determines whether triggering of the error stops the program executing or just prints a warning, and it defaults to true (i.e., triggering an error stops the program).\n\n```fortran\ncall EH%init( &\n    errors = [ &\n        ErrorInstance(code=200, message=\"A custom error message.\", isCritical=.false.), &\n        ErrorInstance(code=300, message=\"Another custom error message.\", isCritical=.true.) &\n    ] &\n)\n```\n\nWe can also add errors to the ErrorHandler on the fly by using the `add` procedure: `call EH%add(code=200, message=\"A custom error message.\")`.\n\nNow let's get the user to enter an integer, and specify that it should be between 0 and 10, but not equal to 5:\n\n```fortran\nwrite(*,\"(a)\") \"Enter an integer between 0 and 10, but not equal to 5:\"\nread(*,*) i\n```\n\nWe now need to test `i` meets these criteria, and we can do that using the ErrorCriteria's `limit` and `notEqual` methods. We'll do this at the same time as creating the Result object, which stores the data `i` as well as any errors:\n\n```fortran\nr = Result( &\n    data = i, &\n    errors = [ &\n        EH%limit(i,0,10), &\n        EH%notEqual(i,5) &\n    ] &\n)\n```\n\nNow we can attempt to trigger any errors that might be present, by using the ErrorHandler's `trigger` method, which accepts either an error code, an ErrorInstance or an array of ErrorInstances as its parameters. If the criteria check didn't result in any errors, nothing will happen (in reality, the criteria returns an ErrorInstance with code 0 - the default \"no error\" - which the `trigger` method ignores).\n\n```fortran\ncall EH%trigger(errors=r%getErrors())\n```\n\nThe default ErrorInstances set up by the `init` procedure for ErrorCriteria all have `isCritical` set to true, and so if either of these criteria errors are triggered, program execution will be stopped. The default criteria errors can be altered by using the `modify` procedure - see the [ErrorCriteria docs](doc/ErrorCriteria.md). Finally, let's print the value to the console:\n\n```fortran\nwrite(*,\"(a,i1)\") \"Input value is: \", .integer. r\n```\n\nA number of operators, such an `.integer.` and `.real.`, are available to quickly return the data (which is stored polymorphically) from a Result object as a specific type. If you are uncomfortable using custom operators, then the corresponding procedures `r%getDataAsInteger()`, `r%getDataAsReal()`, etc, are also available. See the [Result docs](doc/Result.md) for more details.\n\nLet's test it out with a few different integers:\n\n```bash\n$ Enter an integer between 0 and 10, but not equal to 5:\n$ 12\n$ Error: Value must be between 0 and 10. Given value: 12.\n$ ERROR STOP 105\n\n$ Enter an integer between 0 and 10, but not equal to 5:\n$ 5\n$ Error: Value must not be equal to 5. Given value: 5.\n$ ERROR STOP 106\n\n$ Enter an integer between 0 and 10, but not equal to 5:\n$ 1\n$ Input value is: 1\n```\n\nThe stop codes 105 and 106 are the default error codes for those particular limit criteria. These codes can be modified using the ErrorCriteria's `modifyErrorCriterionCode` procedure. See the [ErrorCriteria docs](doc/ErrorCriteria.md).\n\nThe framework is designed to work seemlessly in large object-oriented projects, where Result objects can be returned from functions with ErrorInstances that contain a user-defined trace of where the error came from. The goal of such a trace is to provide more useful errors to end users of your application, who might not have access to the source code and thus find standard stack traces containing references to files and line numbers useless. More details can be found in the [ErrorInstance docs](doc/ErrorInstance.md), and more thorough examples in the [examples directory](example/).\n"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/README.md",
      "technique": "header_analysis"
    }
  ],
  "version": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "v1.0.5"
      },
      "source": "https://raw.githubusercontent.com/samharrison7/fortran-error-handler/develop/codemeta.json",
      "technique": "code_parser"
    }
  ]
}