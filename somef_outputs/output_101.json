{
  "application_domain": [
    {
      "confidence": 0.9614120895344161,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/emtee40/panako"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/JorenSix/Panako"
      },
      "source": "https://raw.githubusercontent.com/emtee40/panako/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "continuous_integration": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/emtee40/panako/master/.github/workflows/gradle.yml"
      },
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-09-03T21:26:58Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2022-06-30"
      },
      "source": "https://raw.githubusercontent.com/emtee40/panako/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_published": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2022-06-30"
      },
      "source": "https://raw.githubusercontent.com/emtee40/panako/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-09-03T21:27:56Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2022-06-30"
      },
      "source": "https://raw.githubusercontent.com/emtee40/panako/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Panako: a scalable audio search system"
      },
      "source": "https://raw.githubusercontent.com/emtee40/panako/master/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 0.8544340154766323,
      "result": {
        "original_header": "\"Changelog\":#changelog",
        "type": "Text_excerpt",
        "value": "Content based music search algorithms make it possible to identify a small audio fragment in a digital music archive with potentially millions of songs. Current search algorithms are able to respond quickly and reliably on an audio query, even if there is noise or other distortions present. During the last decades they have been used successfully as digital music archive management tools, music identification services for smartphones or for digital rights management.  \n\nMost algorithms, as they are described in the literature, do not allow substantial changes in replay speed. The speed of the audio query needs to be the same as the reference audio for the current algorithms to work. This poses a problem, since changes in replay speed do occur commonly, they are either introduced by accident during an analog to digital conversion or are introduced deliberately.  \nThe Panako algorithm allows such changes while maintaining other desired features as scalability, robustness and reliability.  Next to the panako algorithm there is also an implementation of the algorithm described in \"An Industrial-Strength Audio Search Algorithm\":http://www.ee.columbia.edu/~dpwe/papers/Wang03-shazam.pdf (internally identified as Olaf). Also the algorithm in \"A Robust Audio Fingerprinter Based on Pitch Class Histograms - Applications for Ethnic Music Archives\":http://0110.be/files/attachments/415/2012.01.20.fingerprinter.submitted.pdf is available. To make comparisons between fingerprinting systems easy, researchers are kindly invited to contribute algorithms to the Panako project. \nThe Panako repository is organized as follows: \n"
      },
      "source": "https://raw.githubusercontent.com/emtee40/panako/master/README.textile",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8848628155235285,
      "result": {
        "original_header": "Iterate the list",
        "type": "Text_excerpt",
        "value": "The default key-value-store is backed by some kind of B-tree structure. Removing many elements from such structure might leave the tree in an unbalanced state, which results in worse performance. I am not sure about the performance implications of deletion for LMDB but it might be of interest to either rebuild the index or avoid deletion as much as possible.  \n\nh3(#query). Query for Matches - **@panako query@** \nThe @query@ command extracts fingerprints from a short audio frament and tries to match the fingerprints with the database. The incoming audio is, by default, chopped in parts of 25s with an overlap of 5s. So every @25-5=20s@ the database is queried and a result is printed to the command line. \nThis application checks the similarity of two files. The percentage returned indicates the percentage of seconds for which fingerprints match between the first and second file. So 100% that matches are found in every second. A result of 30% still means that much of the audio matches.  \nNote that this operation is performed in memory. Nothing changes on disk. \n"
      },
      "source": "https://raw.githubusercontent.com/emtee40/panako/master/README.textile",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9676352267222845,
      "result": {
        "original_header": "S. Chang et al., \"**Neural Audio Fingerprint for High-Specific Audio Retrieval Based on Contrastive Learning**\" (2021) - ICASSP 2021.",
        "type": "Text_excerpt",
        "value": "Another way to contribute is to dive into the code, fork and improve Panako yourself. Merge requests with additional documentation, bug fixes or new features will be handled and end up in the main branch if correctness, maintainability and simplicity are kept in check. However, keep in mind the note below:   \nMy time to spend on Panako is limited and goes in __activity bursts__. If an issue is raised it might take a couple of months before I am able to spend time on it during the next burst of activity. A period of relative silence does not mean your feedback is not greatly valued! \n"
      },
      "source": "https://raw.githubusercontent.com/emtee40/panako/master/README.textile",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8919947118352963,
      "result": {
        "original_header": "Results are parsed.",
        "type": "Text_excerpt",
        "value": "<dt>Version 1.6</dt><dd>2017-03-17</dd> This release adds a simplified version of chromaprint and an implementation of \"'A Highly Robust Audio Fingerprinting System' by Haitsma and Kalker\":http://www.ismir2002.ismir.net/proceedings/02-FP04-2.pdf \n<dt>Version 2.0</dt><dd>2021-04-27</dd> A major overhaul of Panako. The main aim of this release is to ensure the longevity and maintainability of Panako. The featureset has been reduced to focus on core functionality. The version bump is also explained by the use of lambdas and the need for a newer JRE (8+). A list of changes: \n* The number of dependencies has been drastically cut by removing support for multiple key-value stores. \n* The key-value store has been changed to a faster and simpler system (from MapDB to LMDB). \n* The SyncSink functionality has been moved to another project (with Panako as dependency). \n* The main algorithms have been replaced with simpler and better working versions:\n** Olaf is a new implementation of the classic Shazam algorithm. \n** The algoritm described in the Panako paper was also replaced. The core ideas are still the same. The main change is the use of a \"Gabor transform\":https://en.wikipedia.org/wiki/Gabor_transform to go from time domain to the spectral domain (previously a constant-q transform was used).  The gabor transform is implemented by \"JGaborator\":https://github.com/JorenSix/JGaborator which in turn relies on \"The Gaborator\":https://gaborator.com/ C++ library via JNI. \n* Folder structure has been simplified.\n* The UI, which was mainly used for debugging, has been removed.\n* A new set of helper scripts are added in the @scripts@ directory. They help with evaluation, parsing results, checking results, building panako, creating documentation,...\n* Changed the default panako location to ~/.panako, so users can install and use panako more easily (withouth need for sudo rights) \n"
      },
      "source": "https://raw.githubusercontent.com/emtee40/panako/master/README.textile",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9342795562652729,
      "result": {
        "type": "Text_excerpt",
        "value": "Panako is an \"acoustic fingerprinting\":https://en.wikipedia.org/wiki/Acoustic_fingerprint system. The system is able to extract fingerprints from an audio stream, and either store those fingerprints in a database, or find a match between the extracted fingerprints and stored fingerprints.  Several acoustic fingerprinting algorithms are implemented within Panako. The main algorithm, the Panako algorithm, has the feature that audio queries can be identified reliably and quickly even if they has been sped up, time stretched or pitch shifted with respect to the reference audio. The main focus of Panako is to serve as a demonstration of the Panako algorithm. Other acoustic fingerprinting schemes are implemented to serve as a baseline for comparison. More information can be found in the \"article about Panako\":http://www.terasoft.com.tw/conf/ismir2014/proceedings/T048_122_Paper.pdf. \nPlease be aware of the patents \"US7627477 B2\":https://www.google.com/patents/US7627477 and \"US6990453\":https://www.google.com/patents/US6990453 and \"perhaps others\":http://www.shazam.com/music/web/productfeatures.html?id=1284. They describe techniques used in some algorithms implemented within Panako. The patents limit the use of some algorithms  under various conditions and for several regions. Please make sure to consult your intellectual property rights specialist if you are in doubt about these restrictions. If these restrictions apply, respect the patent holders rights. The first aim of Panako is to serve as a research platform to experiment with and improve fingerprinting algorithms. \n"
      },
      "source": "https://raw.githubusercontent.com/emtee40/panako/master/README.textile",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/emtee40/panako/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/emtee40/panako/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "emtee40/panako"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "\"Why Panako?\":#why"
      },
      "source": "https://raw.githubusercontent.com/emtee40/panako/master/README.textile",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/emtee40/panako/master/resources/scripts/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/emtee40/panako/master/resources/scripts/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/emtee40/panako/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "apt-get install sox wget",
        "type": "Text_excerpt",
        "value": "panako -v #prints version\npanako stats #db info\ncd resources/scripts/create_test_dataset\nruby create_dataset.rb #make sure SoX is installed\npanako store STRATEGY=panako dataset/reference_items/*\npanako query STRATEGY=panako dataset/queries/*\n\nThe output after running the store command should be similar to the following. The last column represents how many seconds of audio can be processed in a single second. On the device that ran the command about 80 seconds are processed in a single second.\n\nbc. Index;Audiofile;Audio duration;Processing time;Audio duration/processing time\n1/5;1009601.wav;00:00:32;674.00 ms;47.12\n2/5;406015.wav;00:03:21;2.53 s;79.50\n3/5;557132.wav;00:04:24;3.25 s;81.18\n4/5;566726.wav;00:03:17;2.43 s;81.10\n5/5;946523.wav;00:04:39;3.55 s;78.5\n\nAfter running the query command the following should appear.\n\nbc. Index; Total ; Query path;Query start (s);Query stop (s); Match path;Match id; Match start (s); Match stop (s); Match score; Time factor (%); Frequency factor(%); Seconds with match (%)\n1 ; 5 ; queries/1009601_17_100.wav ; 1.269 ; 12.925 ; reference_items/1009601.wav ; 1009601 ; 18.269 ; 29.925 ; 193 ; 1.001 % ; 1.000 %; 1.00\n4 ; 5 ; queries/566726_129_101.wav ; 0.885 ; 8.381 ; reference_items/566726.wav ; 566726 ; 129.893 ; 137.437 ; 127 ; 1.006 % ; 1.016 %; 1.00\n5 ; 5 ; queries/946523_208_103.wav ; 0.941 ; 11.909 ; reference_items/946523.wav ; 946523 ; 208.949 ; 220.245 ; 70 ; 1.031 % ; 1.016 %; 0.83\n3 ; 5 ; queries/557132_97_104.wav ; 0.925 ; 12.405 ; reference_items/557132.wav ; 557132 ; 97.933 ; 109.869 ; 173 ; 1.040 % ; 1.042 %; 1.00\n2 ; 5 ; queries/406015_182_97.wav ; 0.917 ; 9.109 ; reference_items/406015.wav ; 406015 ; 182.917 ; 190.853 ; 101 ; 0.972 % ; 0.976 %; 1.00\n\n\nTo interpret the results, it helps to explain the output:\n\n* *Index* The index in the list of queries, note that the results might be out of order due to the multi-threaded nature of Panako.\n* *Total* The total number of queries being handled.\n* *Query path* The path of the query file\n* *Query start (s)* The matching part of the query with the reference starts at this point in the query. It is expressed in seconds.\n* *Query stop (s)* The matching part of the query with the reference stops at this point in the query. It is expressed in seconds.\n* *Match path* The path of the matching file.\n* *Match id* The internal identifier of the matching file. If the filename contains only digits then it equals the file name (as is the case here). Otherwise it is a hash of the filename.\n* *Match start (s)* The matching part of the query with the reference starts at this point in the reference. It is expressed in seconds.\n* *Match stop (s)* The matching part of the query with the reference stops at this point in the reference. It is expressed in seconds.\n* *Match score* The number of matching fingerprints between query and reference. The number of fingerprints per second can be calculated by dividing by the match duration.\n* *Time factor (%)* How much faster the query is with respect to the reference.\n* *Frequency factor(%)* How much higher in pitch the query is with respect to the reference. If the query is sped up the time factor is expected to be nearly equal to the frequency factor.\n* *Seconds with match (%)*  The number of seconds for which matches are found. If in each matching second a match is found, then this number is 1. A low ratio might indicate a false positive. \n\nFor the test queries the start of the match is encoded into the filename. Likewise for the speed-up factor and matching identifier. For example @queries/557132_97_104.wav@ expects to match the file with identifier @557132@ starting from second 97 at a speed up of 104%. When looking at the result this closely matches what is reported.\n\nSee below for a \"full evaluation of Panako\":#eval. The evaluation tests retrieval rates for various factors of pitch-shifting, time-stretching, speed-up and some audio effects.\n\nh2(#test). Benchmarking Panako \n\nTo get an idea on the speed and scalability of panako, there is a \"benchmark script\":./resources/scripts/benchmark/benchmark.rb and some more \"information on benchmarking panako and how to run the benchmark yourself\":./resources/scripts/benchmark/benchmark.textile.\n\nh2(#docker). Panako and Docker \n\nPanako can also be ran in a containerized environment. A @Dockerfile@ is provided which should both work on @x86_64@ as @aarch64@. To build the container and run commands the following should get you started. Note that the database with fingerprints is located on the host at @~/.panako/docker@:\n\nTo access audio files relative paths are given with respect to the current directory on the host. Watch out with absolute (host) paths, these will not work correctly.\n\nbc. docker build -t panako:2.1 resources/scripts/\nmkdir -p $HOME/.panako/docker\nwget \"https://filesamples.com/samples/audio/mp3/sample3.mp3\""
      },
      "source": "https://raw.githubusercontent.com/emtee40/panako/master/README.textile",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/emtee40/panako/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": [
          "Acoustic fingerprinting",
          "content based audio search",
          "audio duplicate detection",
          "music information retreival"
        ]
      },
      "source": "https://raw.githubusercontent.com/emtee40/panako/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU Affero General Public License v3.0",
        "spdx_id": "AGPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/agpl-3.0",
        "value": "https://api.github.com/licenses/agpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/AGPL",
        "spdx_id": "AGPL",
        "type": "License",
        "value": "AGPL"
      },
      "source": "https://raw.githubusercontent.com/emtee40/panako/master/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "panako"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "emtee40"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 448024,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Ruby",
        "size": 28281,
        "type": "Programming_language",
        "value": "Ruby"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 10858,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 2465,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2349,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 1648,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1397,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Gnuplot",
        "size": 800,
        "type": "Programming_language",
        "value": "Gnuplot"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/emtee40/panako/master/README.textile"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2025-09-19 00:31:07",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "version": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2.1"
      },
      "source": "https://raw.githubusercontent.com/emtee40/panako/master/codemeta.json",
      "technique": "code_parser"
    }
  ]
}