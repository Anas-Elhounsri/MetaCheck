{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "\u2764\ufe0f Acknowledgements",
        "parent_header": [
          "OpenSim Creator <img src=\"resources/OpenSimCreator/textures/logo.svg\" align=\"right\" alt=\"OpenSim Creator Logo\" width=\"128\" height=\"128\" />"
        ],
        "type": "Text_excerpt",
        "value": "We would like to thank the [Chan Zuckerberg Initiative](https://chanzuckerberg.com/) which\ncurrently funds OpenSim Creator's development through the \"Essential Open Source Software\nfor Science\" grant scheme (Chan Zuckerberg Initiative DAF, 2020-218896 (5022)).\n\nWe would also like to thank the [Department of Biomechanical Engineering at TU Delft](https://www.tudelft.nl/3me/over/afdelingen/biomechanical-engineering),\nwhich has provided the necessary institutional support required to keep OpenSim Creator's\ndevelopment supported and stable.\n\n<table align=\"center\">\n  <tr>\n    <td colspan=\"2\" align=\"center\">Project Sponsors</td>\n  </tr>\n  <tr>\n    <td align=\"center\">\n      <a href=\"https://www.tudelft.nl/3me/over/afdelingen/biomechanical-engineering\">\n        <img src=\"resources/OpenSimCreator/textures/tudelft_logo.svg\" alt=\"TUD logo\" height=\"128\" />\n        <br />\n        Biomechanical Engineering at TU Delft\n      </a>\n    </td>\n    <td align=\"center\">\n      <a href=\"https://chanzuckerberg.com/\">\n        <img src=\"resources/OpenSimCreator/textures/chanzuckerberg_logo.svg\" alt=\"CZI logo\" width=\"128\" height=\"128\" />\n        <br />\n        Chan Zuckerberg Initiative\n      </a>\n    </td>\n  </tr>\n</table>\n\nFinally, we would also like to thank the wider open-source community. OpenSim Creator\nwouldn't be possible without using and learning from high-quality open-source libraries\nand technical literature from thousands of contributors.\n"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "application_domain": [
    {
      "confidence": 0.8270083906683892,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "authors": [
    {
      "confidence": 1,
      "result": {
        "email": "ahabib@stanford.edu",
        "type": "Agent",
        "value": "ahabib@stanford.edu"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/Bindings/Python/setup.py",
      "technique": "code_parser"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "author": [
          {
            "family_name": "Kewley",
            "given_name": "Adam",
            "name": "Adam Kewley",
            "type": "Agent",
            "url": "https://orcid.org/0000-0002-6505-5374"
          },
          {
            "family_name": "Beesel",
            "given_name": "Julia",
            "name": "Julia Beesel",
            "type": "Agent",
            "url": "https://orcid.org/0000-0001-5457-0103"
          },
          {
            "family_name": "Seth",
            "given_name": "Ajay",
            "name": "Ajay Seth",
            "type": "Agent",
            "url": "https://orcid.org/0000-0003-4217-1580"
          }
        ],
        "datePublished": "2025",
        "format": "cff",
        "title": "OpenSim Creator",
        "type": "File_dump",
        "url": "https://doi.org/10.5281/zenodo.17084236",
        "value": "# This CITATION.cff file was generated with cffinit.\n# Visit https://bit.ly/cffinit to generate yours today!\n\ncff-version: 1.2.0\ntitle: OpenSim Creator\nmessage: >-\n  If you use this software, please cite it using the\n  metadata from this file.\ntype: software\nauthors:\n  - given-names: Adam\n    family-names: Kewley\n    email: contact@adamkewley.com\n    affiliation: Delft University of Technology\n    orcid: 'https://orcid.org/0000-0002-6505-5374'\n  - given-names: Julia\n    name-particle: van\n    family-names: Beesel\n    orcid: 'https://orcid.org/0000-0001-5457-0103'\n  - given-names: Ajay\n    family-names: Seth\n    email: A.Seth@tudelft.nl\n    affiliation: Delft University of Technology\n    orcid: 'https://orcid.org/0000-0003-4217-1580'\nidentifiers:\n  - type: doi\n    value: 10.5281/zenodo.17084236\n    description: Zenodo entry containing 0.6.0 binaries\n  - type: url\n    value: 'https://www.opensimcreator.com'\n    description: Project URL\nrepository-code: >-\n  https://github.com/ComputationalBiomechanicsLab/opensim-creator\nurl: 'https://www.opensimcreator.com'\nrepository-artifact: >-\n  https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases\nabstract: A desktop GUI for editing+simulating OpenSim models.\nkeywords:\n  - OpenSim\n  - Biomechanics\n  - Musculoskeletal Modelling\n  - Simbody\n  - Mechanical Modelling\n  - Simulation Software\nlicense: Apache-2.0\ncommit: 10968d832cb05e29cb1ed98b45eab7d59ba73eb5\nversion: 0.6.0\ndate-released: '2025-09-09'\n"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/CITATION.cff",
      "technique": "file_exploration"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\nThis Code of Conduct also applies outside the project spaces when there is a\nreasonable belief that an individual's behavior may have a negative impact on\nthe project or its community.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project lead at <a.kewley@tudelft.nl>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ComputationalBiomechanicsLab/opensim-creator"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ComputationalBiomechanicsLab/opensim-creator"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://opensim.stanford.edu/"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/Bindings/Python/setup.py",
      "technique": "code_parser"
    }
  ],
  "continuous_integration": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/.github/workflows/continuous-integration-workflow.yml"
      },
      "technique": "file_exploration"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing Guidelines\n\n## Index\n\n- [Getting Started & General Advice](#getting-started--general-advice)\n- [Issues vs Discussions](#issues-vs-discussions)\n- [How to open an Issue](#how-to-open-an-issue)\n- [How to open a Pull Request](#how-to-open-a-pull-request)\n- [Copyright / Contributor License Agreement](#copyright--contributor-license-agreement)\n\n## Getting Started & General Advice\n\n- Article: [How To Ask Good Questions](https://bit.ly/3nwRnx1).\n- Please browse the [Wiki](https://github.com/ocornut/imgui/wiki) to find code snippets, links and other resources (e.g. [Getting Started](https://github.com/ocornut/imgui/wiki/Getting-Started), [Useful extensions](https://github.com/ocornut/imgui/wiki/Useful-Extensions)).\n- Please read [Getting Started](https://github.com/ocornut/imgui/wiki/Getting-Started) if your question relates to setting up Dear ImGui.\n- Please read [docs/FAQ.md](https://github.com/ocornut/imgui/blob/master/docs/FAQ.md).\n- Please read [docs/FONTS.md](https://github.com/ocornut/imgui/blob/master/docs/FONTS.md) if your question relates to fonts or text.\n- Please run `ImGui::ShowDemoWindow()` to explore the demo and its sources.\n- Please use the search function of your IDE to search for symbols and comments related to your situation.\n- Please use the search function of GitHub to look for similar topics (always include 'Closed' issues/pr in your search).\n- You may [browse issues by Labels](https://github.com/ocornut/imgui/labels).\n- Please use a web search engine to look for similar issues.\n- If you get a crash or assert, use a debugger to locate the line triggering it and read the comments around.\n- Please don't be a [Help Vampire](https://slash7.com/2006/12/22/vampires/).\n\n## 'Issues' vs 'Discussions'\n\nWe are happy to use 'Issues' for many type of open-ended questions. We are encouraging 'Issues' becoming an enormous, centralized and cross-referenced database of Dear ImGui contents.\n\nOnly if you:\n- Cannot BUILD or LINK examples.\n- Cannot BUILD, or LINK, or RUN Dear ImGui in your application or custom engine.\n- Cannot LOAD a font.\n\nThen please [use the Discussions forums](https://github.com/ocornut/imgui/discussions) instead of opening an issue.\n\nIf Dear ImGui is successfully showing in your app and you have used Dear ImGui before, you can open an Issue. Any form of discussions is welcome as a new issue.\n\n## How to open an issue\n\nYou may use the Issue Tracker to submit bug reports, feature requests or suggestions. You may ask for help or advice as well. But **PLEASE CAREFULLY READ THIS WALL OF TEXT. ISSUES IGNORING THOSE GUIDELINES MAY BE CLOSED. USERS IGNORING THOSE GUIDELINES MIGHT BE BLOCKED.**\n\nPlease do your best to clarify your request. The amount of incomplete or ambiguous requests due to people not following those guidelines is often overwhelming. Issues created without the requested information may be closed prematurely. Exceptionally entitled, impolite, or lazy requests may lead to bans.\n\n**PLEASE UNDERSTAND THAT OPEN-SOURCE SOFTWARE LIVES OR DIES BY THE AMOUNT OF ENERGY MAINTAINERS CAN SPARE. WE HAVE LOTS OF STUFF TO DO. THIS IS AN ATTENTION ECONOMY AND MANY LAZY OR MINOR ISSUES ARE HOGGING OUR ATTENTION AND DRAINING ENERGY, TAKING US AWAY FROM MORE IMPORTANT WORK.**\n\nSteps:\n\n- Article: [How To Ask Good Questions](https://bit.ly/3nwRnx1).\n- **PLEASE DO FILL THE REQUESTED NEW ISSUE TEMPLATE.** Including Dear ImGui version number, branch name, platform/renderer back-ends (imgui_impl_XXX files), operating system.\n- **Try to be explicit with your GOALS, your EXPECTATIONS and what you have tried**.  Be mindful of [The XY Problem](http://xyproblem.info/). What you have in mind or in your code is not obvious to other people. People frequently discuss problems and suggest incorrect solutions without first clarifying their goals. When requesting a new feature, please describe the usage context (how you intend to use it, why you need it, etc.). If you tried something and it failed, show us what you tried.\n- **Please INCLUDE CODE. Provide a Minimal, Complete, and Verifiable Example ([MCVE](https://stackoverflow.com/help/mcve)) to demonstrate your problem**. An ideal submission includes a small piece of code that anyone can paste into one of the examples applications (examples/../main.cpp) or demo (imgui_demo.cpp) to understand and reproduce it. **Narrowing your problem to its shortest and purest form is the easiest way to understand it, explain it and fix it**. Please test your shortened code to ensure it exhibits the problem. **Often while creating the MCVE you will solve the problem!** Many questions that are missing a standalone verifiable example are missing the actual cause of their issue in the description, which ends up wasting everyone's time.\n- **Attach screenshots (or GIF/video) to clarify the context**. They often convey useful information that is omitted by the description. You can drag pictures/files in the message edit box. Avoid using 3rd party image hosting services, prefer the long-term longevity of GitHub attachments (you can drag pictures into your post). On Windows, you can use [ScreenToGif](https://www.screentogif.com/) to easily capture .gif files.\n- **If you are discussing an assert or a crash, please provide a debugger callstack**. Never state \"it crashes\" without additional information. If you don't know how to use a debugger and retrieve a callstack, learning about it will be useful.\n- **Please make sure that your project has asserts enabled.** Calls to IM_ASSERT() are scattered in the code to help catch common issues. When an assert is triggered read the comments around it. By default IM_ASSERT() calls the standard assert() function. To verify that your asserts are enabled, add the line `IM_ASSERT(false);` in your main() function. Your application should display an error message and abort. If your application doesn't report an error, your asserts are disabled.\n- Please state if you have made substantial modifications to your copy of Dear ImGui or the back-end.\n- If you are not calling Dear ImGui directly from C++, please provide information about your Language and the wrapper/binding you are using.\n- Be mindful that messages are being sent to the mailbox of \"Watching\" users. Try to proofread your messages before sending them. Edits are not seen by those users unless they browse the site.\n\n**Some unfortunate words of warning**\n- If you are involved in cheating schemes (e.g. DLL injection) for competitive online multiplayer games, please don't post here. We won't answer and you will be blocked. It doesn't matter if your question relates to said project. We've had too many of you and need to protect our time and sanity.\n- Due to frequent abuse of this service from the aforementioned users, if your GitHub account is anonymous and was created five minutes ago please understand that your post will receive more scrutiny and incomplete questions will be harshly dismissed.\n\nIf you have been using Dear ImGui for a while or have been using C/C++ for several years or have demonstrated good behavior here, it is ok to not fulfill every item to the letter. Those are guidelines and experienced users or members of the community will know which information is useful in a given context.\n\n## How to open a Pull Request\n\n- **Please understand that by submitting a PR you are also submitting a request for the maintainer to review your code and then take over its maintenance.** PR should be crafted both in the interest of the end-users and also to ease the maintainer into understanding and accepting it.\n- Many PRs are useful to demonstrate a need and a possible solution but aren't adequate for merging (causing other issues, not seeing other aspects of the big picture, etc.). In doubt, don't hesitate to push a PR because that is always the first step toward pointing toward a problem, and finding the mergeable solution! Even if a PR stays unmerged for a long time, its presence can be useful for other users and helps toward finding a general solution.\n- **When adding a feature,** please describe the usage context (how you intend to use it, why you need it, etc.). Be mindful of [The XY Problem](http://xyproblem.info/).\n- **When fixing a warning or compilation problem,** please post the compiler log and specify the compiler version and platform you are using.\n- **Attach screenshots (or GIF/video) to clarify the context and demonstrate the feature at a glance.** You can drag pictures/files in the message edit box. Prefer the long-term longevity of GitHub attachments over 3rd party hosting (you can drag pictures into your post).\n- **Make sure your code follows the coding style already used in the codebase:** 4 spaces indentations (no tabs), `local_variable`, `FunctionName()`, `MemberName`, `// Text Comment`, `//CodeComment();`, C-style casts, etc.. We don't use modern C++ idioms and tend to use only a minimum of C++11 features. The applications under examples/ are generally less consistent because they sometimes try to mimic the coding style often adopted by a certain ecosystem (e.g. DirectX-related code tend to use the style of their sample).\n- **Make sure you create a branch dedicated to the pull request**. In Git, 1 PR is associated to 1 branch. If you keep pushing to the same branch after you submitted the PR, your new commits will appear in the PR (we can still cherry-pick individual commits).\n\n## Copyright / Contributor License Agreement\n\nAny code you submit will become part of the repository and be distributed under the [Dear ImGui license](https://github.com/ocornut/imgui/blob/master/LICENSE.txt). By submitting code to the project you agree that the code is your work and that you can give it to the project.\n\nYou also agree by submitting your code that you grant all transferable rights to the code to the project maintainer, including for example re-licensing the code, modifying the code, and distributing it in source or binary forms. Specifically, this includes a requirement that you assign copyright to the project maintainer. For this reason, do not modify any copyright statements in files in any PRs.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/imgui/docs/CONTRIBUTING.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "\ud83e\udd70 Contributing",
        "parent_header": [
          "OpenSim Creator <img src=\"resources/OpenSimCreator/textures/logo.svg\" align=\"right\" alt=\"OpenSim Creator Logo\" width=\"128\" height=\"128\" />"
        ],
        "type": "Text_excerpt",
        "value": "If you would like to contribute to OpenSim Creator then thank you \ud83e\udd70: it's people like you\nthat make open-source awesome! Please consult the [contribution section](https://docs.opensimcreator.com/manual/en/latest/contributing.html)\nin the official documentation. The development section of the documentation also outlines how\nto build the project from source!\n"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "contributors": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributions to the OpenBLAS project\n\n## Creator & Maintainer\n\n* Zhang Xianyi <traits.zhang@gmail.com>\n\n## Active Developers\n\n* Wang Qian <traz0824@gmail.com>\n  * Optimize BLAS3 on ICT Loongson 3A.\n  * Optimize BLAS3 on Intel Sandy Bridge.\n\n* Werner Saar <wernsaar@googlemail.com>\n  * [2013-03-04] Optimize AVX and FMA4 DGEMM on AMD Bulldozer\n  * [2013-04-27] Optimize AVX and FMA4 TRSM on AMD Bulldozer\n  * [2013-06-09] Optimize AVX and FMA4 SGEMM on AMD Bulldozer\n  * [2013-06-11] Optimize AVX and FMA4 ZGEMM on AMD Bulldozer\n  * [2013-06-12] Optimize AVX and FMA4 CGEMM on AMD Bulldozer\n  * [2013-06-16] Optimize dgemv_n kernel on AMD Bulldozer\n  * [2013-06-20] Optimize ddot, daxpy kernel on AMD Bulldozer\n  * [2013-06-21] Optimize dcopy kernel on AMD Bulldozer\n  * Porting and Optimization on ARM Cortex-A9\n  * Optimization on AMD Piledriver\n  * Optimization on Intel Haswell\n\n* Chris Sidebottom <chris.sidebottom@arm.com>\n  * Optimizations and other improvements targeting AArch64\n\n## Previous Developers\n\n* Zaheer Chothia <zaheer.chothia@gmail.com>\n  * Improve the compatibility about complex number\n  * Build LAPACKE: C interface to LAPACK\n  * Improve the windows build.\n\n* Chen Shaohu <huhumartinwar@gmail.com>\n  * Optimize GEMV on the Loongson 3A processor.\n\n* Luo Wen\n  * Intern. Test Level-2 BLAS.\n\n## Contributors\n\nIn chronological order:\n\n* pipping <http://page.mi.fu-berlin.de/pipping>\n  * [2011-06-11] Make USE_OPENMP=0 disable openmp.\n\n* Stefan Karpinski <stefan@karpinski.org>\n  * [2011-12-28] Fix a bug about SystemStubs on Mac OS X.\n\n* Alexander Ebersp\u00e4cher <https://github.com/aeberspaecher>\n  * [2012-05-02] Add note on patch for segfaults on Linux kernel 2.6.32.\n\n* Mike Nolta <mike@nolta.net>\n  * [2012-05-19] Fix building bug on FreeBSD and NetBSD.\n\n* Sylvestre Ledru <https://github.com/sylvestre>\n  * [2012-07-01] Improve the detection of sparc. Fix building bug under\n    Hurd and kfreebsd.\n\n* Jameson Nash <https://github.com/vtjnash>\n  * [2012-08-20] Provide support for passing CFLAGS, FFLAGS, PFLAGS, FPFLAGS to\n    make on the command line.\n\n* Alexander Nasonov <alnsn@yandex.ru>\n  * [2012-11-10] Fix NetBSD build.\n\n* S\u00e9bastien Villemot <sebastien@debian.org>\n  * [2012-11-14] Fix compilation with TARGET=GENERIC. Patch applied to Debian package.\n  * [2013-08-28] Avoid failure on qemu guests declaring an Athlon CPU without 3dnow!\n\n* Kang-Che Sung <Explorer09@gmail.com>\n  * [2013-05-17] Fix typo in the document. Re-order the architecture list in getarch.c.\n\n* Kenneth Hoste <kenneth.hoste@gmail.com>\n  * [2013-05-22] Adjust Makefile about downloading LAPACK source files.\n\n* Lei WANG <https://github.com/wlbksy>\n  * [2013-05-22] Fix a bug about wget.\n\n* Dan Luu <http://www.linkedin.com/in/danluu>\n  * [2013-06-30] Add Intel Haswell support (using sandybridge optimizations).\n\n* grisuthedragon <https://github.com/grisuthedragon>\n  * [2013-07-11] create openblas_get_parallel to retrieve information which parallelization\n    model is used by OpenBLAS.\n\n* Elliot Saba <staticfloat@gmail.com>\n  * [2013-07-22] Add in return value for `interface/trtri.c`\n\n* S\u00e9bastien Fabbro <bicatali@gentoo.org>\n  * [2013-07-24] Modify makefile to respect user's LDFLAGS\n  * [2013-07-24] Add stack markings for GNU as arch-independent for assembler files\n\n* Viral B. Shah <viral@mayin.org>\n  * [2013-08-21] Patch LAPACK XLASD4.f as discussed in JuliaLang/julia#2340\n\n* Lars Buitinck <https://github.com/larsmans>\n  * [2013-08-28] get rid of the generated cblas_noconst.h file\n  * [2013-08-28] Missing threshold in gemm.c\n  * [2013-08-28] fix default prefix handling in makefiles\n\n* yieldthought <https://github.com/yieldthought>\n  * [2013-10-08] Remove -Wl,--retain-symbols-file from dynamic link line to fix tool support\n\n* Keno Fischer <https://github.com/loladiro>\n  * [2013-10-23] Use FC instead of CC to link the dynamic library on OS X\n\n* Christopher Meng <cickumqt@gmail.com>\n  * [2013-12-09] Add DESTDIR support for easier building on RPM based distros.\n                 Use install command instead of cp to install files with permissions control.\n\n* Lucas Beyer <lucasb.eyer.be@gmail.com>\n  * [2013-12-10] Added support for NO_SHARED in make install.\n\n* carlkl <https://github.com/carlkl>\n  * [2013-12-13] Fixed LAPACKE building bug on Windows\n\n* Isaac Dunham <https://github.com/idunham>\n  * [2014-08-03] Fixed link error on Linux/musl\n\n* Dave Nuechterlein\n  * [2014-10-10] trmm and sgemm kernels (optimized for APM's X-Gene 1).\n                 ARMv8 support.\n\n* Jerome Robert <jeromerobert@gmx.com>\n  * [2015-01-01] Speed-up small `ger` and `gemv` using stack allocation (bug #478)\n  * [2015-12-23] `stack_check` in `gemv.c` (bug #722)\n  * [2015-12-28] Allow to force the number of parallel make job\n  * [2015-12-28] Fix detection of AMD E2-3200 detection\n  * [2015-12-31] Let `make MAX_STACK_ALLOC=0` do what expected\n  * [2016-01-19] Disable multi-threading in `ger` and `swap` for small matrices (bug #731)\n  * [2016-01-24] Use `GEMM_MULTITHREAD_THRESHOLD` as a number of ops (bug #742)\n  * [2016-01-26] Let `openblas_get_num_threads` return the number of active threads (bug #760)\n  * [2016-01-30] Speed-up small `zger`, `zgemv`, `ztrmv` using stack allocation (bug #727)\n\n* Dan Kortschak\n  * [2015-01-07] Added test for drotmg bug #484.\n\n* Ton van den Heuvel <https://github.com/ton>\n  * [2015-03-18] Fix race condition during shutdown causing a crash in gotoblas_set_affinity().\n\n* Martin Koehler <https://github.com/grisuthedragon/>\n  * [2015-09-07] Improved imatcopy\n\n* Ashwin Sekhar T K <https://github.com/ashwinyes/>\n  * [2015-11-09] Assembly kernels for Cortex-A57 (ARMv8)\n  * [2015-11-20] lapack-test fixes for Cortex-A57\n  * [2016-03-14] Additional functional Assembly Kernels for Cortex-A57\n  * [2016-03-14] Optimize Dgemm 4x4 for Cortex-A57\n\n* theoractice <https://github.com/theoractice/>\n  * [2016-03-20] Fix compiler error in VisualStudio with CMake\n  * [2016-03-22] Fix access violation on Windows while static linking\n\n* Paul Musti\u00e8re <https://github.com/buffer51/>\n  * [2016-02-04] Fix Android build on ARMV7\n  * [2016-04-26] Android build with LAPACK for ARMV7 & ARMV8\n\n* Shivraj Patil <https://github.com/sva-img/>\n  * [2016-05-03] DGEMM optimization for MIPS P5600 and I6400 using MSA\n\n* Kaustubh Raste <https://github.com/ksraste/>\n  * [2016-05-09] DTRSM optimization for MIPS P5600 and I6400 using MSA\n  * [2016-05-20] STRSM optimization for MIPS P5600 and I6400 using MSA\n\n* Abdelrauf  <https://github.com/quickwritereader>\n  * [2017-01-01] dgemm and dtrmm kernels for IBM z13\n  * [2017-02-26] ztrmm kernel for IBM z13\n  * [2017-03-13] strmm and ctrmm kernel for IBM z13\n  * [2017-09-01] initial Blas Level-1,2 (double precision) for IBM z13\n  * [2018-03-07] added missing Blas Level 1-2  (double precision) simd codes\n  * [2019-02-01] added missing Blas Level-1,2 (single precision)  simd codes\n  * [2019-03-14] power9 dgemm/dtrmm kernel\n  * [2019-04-29] power9 sgemm/strmm kernel \n\n* Jiachen Wang <https://github.com/wjc404>\n  * [2019-07-29] optimize AVX2 DGEMM\n  * [2019-10-20] AVX512 DGEMM kernel (4x8)\n  * [2019-11-06] optimize AVX512 SGEMM\n  * [2019-11-12] AVX512 CGEMM & ZGEMM kernels\n  * [2019-12-23] optimize AVX2 CGEMM and ZGEMM\n  * [2019-12-30] AVX2 CGEMM3M & ZGEMM3M kernels\n  * [2020-01-07] optimize AVX2 SGEMM and STRMM\n\n* Rajalakshmi Srinivasaraghavan <https://github.com/RajalakshmiSR>\n  * [2020-04-15] Half-precision GEMM for bfloat16\n\n* Marius Hillenbrand <https://github.com/mhillenibm>\n  * [2020-05-12] Revise dynamic architecture detection for IBM z\n  * [2020-05-12] Add new sgemm and strmm kernel for IBM z14\n  * [2020-09-07] Fix builds with clang on IBM z, including dynamic architecture support\n\n* Danfeng Zhang <https://github.com/craft-zhang>\n  * [2020-05-20] Improve performance of SGEMM and STRMM on Arm Cortex-A53\n\n* PingTouGe Semiconductor Co., Ltd.\n  * [2020-10] Add RISC-V Vector (0.7.1) support. Optimize BLAS kernels for Xuantie C910\n\n* Jake Arkinstall <https://github.com/jake-arkinstall>\n  * [2021-02-10] Remove in-source configure_file to enable builds in read-only contexts (issue #3100, PR #3101)\n\n* River Dillon <oss@outerpassage.net>\n  * [2021-07-10] fix compilation with musl libc\n\n* Bine Brank <https://github.com/binebrank>\n  * [2021-10-27] Add vector-length-agnostic DGEMM kernels for Arm SVE\n  * [2021-11-20] Vector-length-agnostic Arm SVE copy routines for DGEMM, DTRMM, DSYMM\n  * [2021-11-12] SVE kernels for SGEMM, STRMM and corresponding SVE copy functions\n  * [2022-01-06] SVE kernels for CGEMM, ZGEMM, CTRMM, ZTRMM and corresponding SVE copy functions\n  * [2022-01-18] SVE kernels and copy functions for TRSM\n\n* Ilya Kurdyukov <https://github.com/ilyakurdyukov>\n  * [2021-02-21] Add basic support for the Elbrus E2000 architecture\n\n* PLCT Lab, Institute of Software Chinese Academy of Sciences\n  * [2022-03] Support RISC-V Vector Intrinisc 1.0 version.\n  \n* Pablo Romero <https://github.com/pablorcum>\n  * [2022-08] Fix building from sources for QNX\n\n* Mark Seminatore <https://github.com/mseminatore>\n  * [2023-11-09] Improve Windows threading performance scaling\n  * [2024-02-09] Introduce MT_TRACE facility and improve code consistency\n\n* Dirreke <https://github.com/mseminatore>\n  * [2024-01-16] Add basic support for the CSKY architecture\n\n* Christopher Daley <https://github.com/cdaley>\n  * [2024-01-24] Optimize GEMV forwarding on ARM64 systems\n\n* Aniket P. Garade <https://github.com/garadeaniket>   Sushil Pratap Singh <https://github.com/SushilPratap04>  Juliya James <https://github.com/Juliya32> \n  *  [2024-12-13] Optimized swap and rot  Level-1 BLAS routines with ARM SVE  \n"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/OpenBLAS/CONTRIBUTORS.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-04-29T07:02:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_published": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2025-09-09"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2025-09-12T05:31:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A UI for building OpenSim models"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A desktop GUI for editing+simulating OpenSim models."
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OpenSim Simulation Framework"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/Bindings/Python/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 0.9689737418423431,
      "result": {
        "original_header": "\ud83d\udc53 Overview",
        "type": "Text_excerpt",
        "value": "`osc` started development in 2021 in the [Biomechanical Engineering](https://www.tudelft.nl/3me/over/afdelingen/biomechanical-engineering)\ndepartment at [TU Delft](https://www.tudelft.nl/). Architecturally, `osc` is a C++ codebase\nthat is directly integrated against the [OpenSim core C++ API](https://github.com/opensim-org/opensim-core). It\notherwise only uses lightweight open-source libraries that can easily be built from source\n(e.g. [SDL](https://www.libsdl.org/)) to implement the UI on all target platforms. This makes `osc`\nfairly easy to build, integrate, and package. \n"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9726665509840252,
      "result": {
        "original_header": "\ud83c\udf32Sustainability, Archiving, and Mirrors",
        "type": "Text_excerpt",
        "value": "- OSC's central repository is public access and hosted at https://github.com/ComputationalBiomechanicsLab/opensim-creator\n- During a release, we:\n  - Mirror the central repository to https://gitlab.tudelft.nl/computationalbiomechanicslab/opensim-creator\n  - Upload a snapshot of the release's source code to Zenodo (see citing section, above).\n  - Upload a snapshot of the release's source code and binaries to https://files.opensimcreator.com/releases/\n- Each release of OSC's source code is permissively licensed, verified to be compile-able via\n  `gcc`, `clang`, and MSVC with many warnings/lints enabled to ensure the source code has a\n  strong chance of being compile-able far in the future as architectures, operating systems, and\n  compilers evolve.\n- The project includes all of its library dependencies in-tree. It doesn't use git submodules, internet\n  downloads, or package managers. This means that everything that's needed to build OpenSimCreator\n  (apart from widely-available compiler toolchains) is available in this repository and not dependent\n  on external services that might change over time.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/tree/main/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/tree/main/third_party/stb/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/tree/main/third_party/OpenBLAS/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/tree/main/third_party/OpenBLAS/lapack-netlib/DOCS"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/tree/main/third_party/SDL/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/tree/main/third_party/imgui/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 24
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ComputationalBiomechanicsLab/opensim-creator"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OpenSim Creator "
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "requirements.txt",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/docs/requirements.txt"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/docs/requirements.txt",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "setup.py",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/Bindings/Python/setup.py"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/Bindings/Python/setup.py",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/scripts/docker/ubuntu18.04/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/scripts/docker/ubuntu18.04/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/.github/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/.github/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "docker_compose",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/.github/remote-ubuntu-dev/docker-compose.yml"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/.github/remote-ubuntu-dev/docker-compose.yml",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/.github/remote-ubuntu-dev/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/.github/remote-ubuntu-dev/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "requirements.txt",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/tomlplusplus/tools/requirements.txt"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/tomlplusplus/tools/requirements.txt",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/osc/Debian/osc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/Applications/opensim-install-command-line.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/scripts/build/opensim-core-macos-build-script.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/scripts/build/opensim-core-linux-build-script.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/.github/mac_sign_and_notarize.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/.github/build_on_sherlock.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/spdlog/scripts/format.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/spdlog/scripts/clang_tidy.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/OpenBLAS/benchmark/Make_exe.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/OpenBLAS/benchmark/plot-filter.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/OpenBLAS/exports/check_objs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/SDL/build-scripts/showrev.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/SDL/build-scripts/test-versioning.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/SDL/build-scripts/update-version.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/SDL/build-scripts/strip_fPIC.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/SDL/build-scripts/androidbuildlibs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/SDL/build-scripts/codechecker-buildbot.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/SDL/build-scripts/clang-format-src.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/SDL/build-scripts/updaterev.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/SDL/build-scripts/update-copyright.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/SDL/VisualC-GDK/clean.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/SDL/VisualC/clean.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/SDL/src/joystick/check_8bitdo.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/SDL/src/render/metal/build-metal-shaders.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/SDL/src/render/gpu/shaders/build-shaders.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/SDL/src/gpu/metal/compile_shaders.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/unordered_dense/scripts/fuzz_run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/unordered_dense/scripts/fuzz_merge.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/imgui/backends/vulkan/generate_spv.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/scripts/build_ubuntu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/scripts/env_ubuntu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/scripts/ci_build_mac-amd64.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/scripts/env_libasan.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/scripts/ci_build_ubuntu22.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/scripts/ci_build_mac.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/scripts/setup_ubuntu_debugging.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/scripts/setup_ubuntu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/scripts/env_wsl2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/scripts/build_linux_valgrind.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/scripts/create-video-thumbnails.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/scripts/build_mac.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/scripts/ci_setup_ubuntu22.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/scripts/ci_build_mac-arm64.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/scripts/build_linux_debugging.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/scripts/cellar/setup_emscripten.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/scripts/cellar/wayland_build-sdl3-with-wayland-support.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/scripts/cellar/build_emscripten.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "https://doi.org/10.5281/zenodo.17084236"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.5281/zenodo.7703588"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/docs/source/_static/screenshot.jpg"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Install OpenBLAS\n\nOpenBLAS can be installed through package managers or from source. If you only\nwant to use OpenBLAS rather than make changes to it, we recommend installing a\npre-built binary package with your package manager of choice.\n\nThis page contains an overview of installing with package managers as well as\nfrom source. For the latter, see [further down on this page](#building-from-source).\n\n\n## Installing with a package manager\n\n!!! note\n    Almost every package manager provides OpenBLAS packages; the list on this\n    page is not comprehensive. If your package manager of choice isn't shown\n    here, please search its package database for `openblas` or `libopenblas`.\n\n\n### Linux\n\nOn Linux, OpenBLAS can be installed with the system package manager, or with a\npackage manager like [Conda](https://docs.conda.io/en/latest/)\n(or alternative package managers for the conda-forge ecosystem, like\n[Mamba](https://mamba.readthedocs.io/en/latest/),\n[Micromamba](https://mamba.readthedocs.io/en/latest/user_guide/micromamba.html),\nor [Pixi](https://pixi.sh/latest/#windows-installer)),\n[Spack](https://spack.io/), or [Nix](https://nixos.org/). For the latter set of\ntools, the package name in all cases is `openblas`. Since package management in\nquite a few of these tools is declarative (i.e., managed by adding `openblas`\nto a metadata file describing the dependencies for your project or\nenvironment), we won't attempt to give detailed instructions for these tools here.\n\nLinux distributions typically split OpenBLAS up in two packages: one containing\nthe library itself (typically named `openblas` or `libopenblas`), and one containing headers,\npkg-config and CMake files (typically named the same as the package for the\nlibrary with `-dev` or `-devel` appended; e.g., `openblas-devel`). Please keep\nin mind that if you want to install OpenBLAS in order to use it directly in\nyour own project, you will need to install both of those packages.\n\nDistro-specific installation commands:\n\n=== \"Debian/Ubuntu/Mint/Kali\"\n\n    ```bash\n    $ sudo apt update\n    $ sudo apt install libopenblas-dev\n    ```\n    OpenBLAS can be configured as the default BLAS through the `update-alternatives` mechanism:\n\n    ```bash\n    $ sudo update-alternatives --config libblas.so.3\n    ```\n\n=== \"openSUSE/SLE\"\n\n    ```bash\n    $ sudo zypper refresh\n    $ sudo zypper install openblas-devel\n    ```\n\n    OpenBLAS can be configured as the default BLAS through the `update-alternatives` mechanism:\n    ```bash\n    $ sudo update-alternatives --config libblas.so.3\n    ```\n\n=== \"Fedora/CentOS/RHEL\"\n\n    ```bash\n    $ dnf check-update\n    $ dnf install openblas-devel\n    ```\n\n    !!! warning\n\n        Fedora does not ship the pkg-config files for OpenBLAS. Instead, it wants you to\n        link against [FlexiBLAS](https://www.mpi-magdeburg.mpg.de/projects/flexiblas) (which\n        uses OpenBLAS by default as its backend on Fedora), which you can install with:\n\n        ```bash\n        $ dnf install flexiblas-devel\n        ```\n\n    For CentOS and RHEL, OpenBLAS packages are provided via the [Fedora EPEL repository](https://fedoraproject.org/wiki/EPEL).\n    After adding that repository and its repository keys, you can install\n    `openblas-devel` with either `dnf` or `yum`.\n\n=== \"Arch/Manjaro/Antergos\"\n\n    ```bash\n    $ sudo pacman -S openblas\n    ```\n\n\n### Windows\n\n=== \"Conda-forge\"\n\n    OpenBLAS can be installed with `conda` (or `mamba`, `micromamba`, or\n    `pixi`) from conda-forge:\n    ```\n    conda install openblas\n    ```\n\n    Conda-forge provides a method for switching the default BLAS implementation\n    used by all packages. To use that for OpenBLAS, install `libblas=*=*openblas`\n    (see [the docs on this mechanism](https://conda-forge.org/docs/maintainer/knowledge_base/#switching-blas-implementation)\n    for more details).\n\n=== \"vcpkg\"\n\n    OpenBLAS can be installed with vcpkg:\n    ```cmd\n    # In classic mode:\n    vcpkg install openblas\n\n    # Or in manifest mode:\n    vcpkg add port openblas\n    ```\n\n=== \"OpenBLAS releases\"\n\n    Windows is the only platform for which binaries are made available by the\n    OpenBLAS project itself. They can be downloaded from the GitHub\n    Releases](https://github.com/OpenMathLib/OpenBLAS/releases) page. These\n    binaries are built with MinGW, using the following build options:\n    ```\n    NUM_THREADS=64 TARGET=GENERIC DYNAMIC_ARCH=1 DYNAMIC_OLDER=1 CONSISTENT_FPCSR=1 INTERFACE=0\n    ```\n    There are separate packages for x86-64 and x86. The zip archive contains\n    the include files, static and shared libraries, as well as configuration\n    files for getting them found via CMake or pkg-config. To use these\n    binaries, create a suitable folder for your OpenBLAS installation and unzip\n    the `.zip` bundle there (note that you will need to edit the provided\n    `openblas.pc` and `OpenBLASConfig.cmake` to reflect the installation path\n    on your computer, as distributed they have \"win\" or \"win64\" reflecting the\n    local paths on the system they were built on).\n\n    Note that the same binaries can be downloaded\n    [from SourceForge](http://sourceforge.net/projects/openblas/files); this is\n    mostly of historical interest.\n\n\n### macOS\n\nTo install OpenBLAS with a package manager on macOS, run:\n\n=== \"Homebrew\"\n\n    ```zsh\n    % brew install openblas\n    ```\n\n=== \"MacPorts\"\n\n    ```zsh\n    % sudo port install OpenBLAS-devel\n    ```\n\n=== \"Conda-forge\"\n\n    ```zsh\n    % conda install openblas\n    ```\n\n    Conda-forge provides a method for switching the default BLAS implementation\n    used by all packages. To use that for OpenBLAS, install `libblas=*=*openblas`\n    (see [the docs on this mechanism](https://conda-forge.org/docs/maintainer/knowledge_base/#switching-blas-implementation)\n    for more details).\n\n\n### FreeBSD\n\nYou can install OpenBLAS from the FreeBSD [Ports collection](https://www.freebsd.org/ports/index.html):\n```\npkg install openblas\n```\n\n\n## Building from source\n\nWe recommend download the latest [stable version](https://github.com/OpenMathLib/OpenBLAS/releases)\nfrom the GitHub Releases page, or checking it out from a git tag, rather than a\ndev version from the `develop` branch.\n\n!!! tip\n\n    The User manual contains [a section with detailed information on compiling OpenBLAS](user_manual.md#compiling-openblas),\n    including how to customize builds and how to cross-compile. Please read\n    that documentation first. This page contains only platform-specific build\n    information, and assumes you already understand the general build system\n    invocations to build OpenBLAS, with the specific build options you want to\n    control multi-threading and other non-platform-specific behavior).\n\n\n### Linux and macOS\n\nEnsure you have C and Fortran compilers installed, then simply type `make` to compile the library.\nThere are no other build dependencies, nor unusual platform-specific\nenvironment variables to set or other system setup to do.\n\n!!! note\n\n    When building in an emulator (KVM, QEMU, etc.), please make sure that the combination of CPU features exposed to\n    the virtual environment matches that of an existing CPU to allow detection of the CPU model to succeed.\n    (With `qemu`, this can be done by passing `-cpu host` or a supported model name at invocation).\n\n\n### Windows\n\nWe support building OpenBLAS with either MinGW or Visual Studio on Windows.\nUsing MSVC will yield an OpenBLAS build with the Windows platform-native ABI.\nUsing MinGW will yield a different ABI. We'll describe both methods in detail\nin this section, since the process for each is quite different.\n\n#### Visual Studio & native Windows ABI\n\nFor Visual Studio, you can use CMake to generate Visual Studio solution files;\nnote that you will need at least CMake 3.11 for linking to work correctly).\n\nNote that you need a Fortran compiler if you plan to build and use the LAPACK\nfunctions included with OpenBLAS. The sections below describe using either\n`flang` as an add-on to clang/LLVM or `gfortran` as part of MinGW for this\npurpose. If you want to use the Intel Fortran compiler (`ifort` or `ifx`) for\nthis, be sure to also use the Intel C compiler (`icc` or `icx`) for building\nthe C parts, as the ABI imposed by `ifort` is incompatible with MSVC\n\nA fully-optimized OpenBLAS that can be statically or dynamically linked to your\napplication can currently be built for the 64-bit architecture with the LLVM\ncompiler infrastructure. We're going to use [Miniconda3](https://docs.anaconda.com/miniconda/)\nto grab all of the tools we need, since some of them are in an experimental\nstatus. Before you begin, you'll need to have Microsoft Visual Studio 2015 or\nnewer installed.\n\n1. Install Miniconda3 for 64-bit Windows using `winget install --id Anaconda.Miniconda3`,\n   or easily download from [conda.io](https://docs.conda.io/en/latest/miniconda.html).\n2. Open the \"Anaconda Command Prompt\" now available in the Start Menu, or at `%USERPROFILE%\\miniconda3\\shell\\condabin\\conda-hook.ps1`.\n3. In that command prompt window, use `cd` to change to the directory where you want to build OpenBLAS.\n4. Now install all of the tools we need:\n   ```\n   conda update -n base conda\n   conda config --add channels conda-forge\n   conda install -y cmake flang clangdev perl libflang ninja\n   ```\n5.  Still in the Anaconda Command Prompt window, activate the 64-bit MSVC environment with `vcvarsall x64`.\n    On Windows 11 with Visual Studio 2022, this would be done by invoking:\n    \n    ```shell\n    \"c:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\vc\\Auxiliary\\Build\\vcvars64.bat\"\n    ```\n   \n    With VS2019, the command should be the same (except for the year number of course).\n    For other versions of MSVC, please check the Visual Studio documentation for\n    exactly how to invoke the `vcvars64.bat` script.\n   \n    Confirm that the environment is active by typing `link`. This should return\n    a long list of possible options for the `link` command. If it just returns\n    _\"command not found\"_ or similar, review and retype the call to `vcvars64.bat`.\n\n    !!! note\n\n        if you are working from a Visual Studio command prompt window instead\n        (so that you do not have to do the `vcvars` call), you need to invoke\n        `conda activate` so that `CONDA_PREFIX` etc. get set up correctly before\n        proceeding to step 6. Failing to do so will lead to link errors like\n        `libflangmain.lib` not getting found later in the build.\n\n6.  Now configure the project with CMake. Starting in the project directory, execute the following:\n    ```\n    set \"LIB=%CONDA_PREFIX%\\Library\\lib;%LIB%\"\n    set \"CPATH=%CONDA_PREFIX%\\Library\\include;%CPATH%\"\n    mkdir build\n    cd build\n    cmake .. -G \"Ninja\" -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_C_COMPILER=clang-cl -DCMAKE_Fortran_COMPILER=flang -DCMAKE_MT=mt -DBUILD_WITHOUT_LAPACK=no -DNOFORTRAN=0 -DDYNAMIC_ARCH=ON -DCMAKE_BUILD_TYPE=Release\n    ```\n\n    You may want to add further options in the `cmake` command here. For\n    instance, the default only produces a static `.lib` version of the library.\n    If you would rather have a DLL, add `-DBUILD_SHARED_LIBS=ON` above. Note that\n    this step only creates some command files and directories, the actual build\n    happens next.\n\n7.  Build the project:\n\n    ```\n    cmake --build . --config Release\n    ```\n    This step will create the OpenBLAS library in the `lib` directory, and\n    various build-time tests in the `test`, `ctest` and `openblas_utest`\n    directories. However it will not separate the header files you might need\n    for building your own programs from those used internally. To put all\n    relevant files in a more convenient arrangement, run the next step.\n\n8.  Install all relevant files created by the build:\n\n    ```\n    cmake --install . --prefix c:\\opt -v\n    ```\n    This will copy all files that are needed for building and running your own\n    programs with OpenBLAS to the given location, creating appropriate\n    subdirectories for the individual kinds of files. In the case of `C:\\opt` as\n    given above, this would be:\n\n    - `C:\\opt\\include\\openblas` for the header files, \n    - `C:\\opt\\bin` for the `libopenblas.dll` shared library,\n    - `C:\\opt\\lib` for the static library, and\n    - `C:\\opt\\share` holds various support files that enable other cmake-based\n      build scripts to find OpenBLAS automatically.\n\n\n!!! tip \"Change in complex types for Visual Studio 2017 and up\"\n\n    In newer Visual Studio versions, Microsoft has changed\n    [how it handles complex types](https://docs.microsoft.com/en-us/cpp/c-runtime-library/complex-math-support?view=msvc-170#types-used-in-complex-math).\n    Even when using a precompiled version of OpenBLAS, you might need to define\n    `LAPACK_COMPLEX_CUSTOM` in order to define complex types properly for MSVC.\n    For example, some variant of the following might help:\n\n    ```c\n    #if defined(_MSC_VER)\n        #include <complex.h>\n        #define LAPACK_COMPLEX_CUSTOM\n        #define lapack_complex_float _Fcomplex\n        #define lapack_complex_double _Dcomplex\n    #endif\n    ```\n\n    For reference, see\n    [openblas#3661](https://github.com/OpenMathLib/OpenBLAS/issues/3661),\n    [lapack#683](https://github.com/Reference-LAPACK/lapack/issues/683), and\n    [this Stack Overflow question](https://stackoverflow.com/questions/47520244/using-openblas-lapacke-in-visual-studio).\n\n\n!!! warning \"Building 32-bit binaries with MSVC\"\n\n    This method may produce binaries which demonstrate significantly lower\n    performance than those built with the other methods. The Visual Studio\n    compiler does not support the dialect of assembly used in the cpu-specific\n    optimized files, so only the \"generic\" `TARGET` which is written in pure C\n    will get built. For the same reason it is not possible (and not necessary)\n    to use `-DDYNAMIC_ARCH=ON` in a Visual Studio build. You may consider\n    building for the 32-bit architecture using the GNU (MinGW) ABI instead.\n\n##### CMake & Visual Studio integration\n\nTo generate Visual Studio solution files, ensure CMake is installed and then run:\n```\n# Do this from Powershell so cmake can find visual studio\ncmake -G \"Visual Studio 14 Win64\" -DCMAKE_BUILD_TYPE=Release .\n```\n\nTo then build OpenBLAS using those solution files from within Visual Studio, we\nalso need Perl. Please install it and ensure it's on the `PATH` (see, e.g.,\n[this Stack Overflow question for how](http://stackoverflow.com/questions/3051049/active-perl-installation-on-windows-operating-system)).\n\nIf you build from within Visual Studio, the dependencies may not be\nautomatically configured: if you try to build `libopenblas` directly, it may\nfail with a message saying that some `.obj` files aren't found. If this\nhappens, you can work around the problem by building the projects that\n`libopenblas` depends on before building `libopenblas` itself.\n\n###### Build OpenBLAS for Universal Windows Platform\n\nOpenBLAS can be built targeting [Universal Windows Platform](https://en.wikipedia.org/wiki/Universal_Windows_Platform)\n(UWP) like this:\n\n1.  Follow the steps above to build the Visual Studio solution files for\n    Windows. This builds the helper executables which are required when building\n    the OpenBLAS Visual Studio solution files for UWP in step 2.\n2.  Remove the generated `CMakeCache.txt` and the `CMakeFiles` directory from\n    the OpenBLAS source directory, then re-run CMake with the following options:\n\n    ```\n    # do this to build UWP compatible solution files\n    cmake -G \"Visual Studio 14 Win64\" -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=\"10.0\" -DCMAKE_SYSTEM_PROCESSOR=AMD64 -DVS_WINRT_COMPONENT=TRUE -DCMAKE_BUILD_TYPE=Release .\n    ```\n3.  Now build the solution with Visual Studio.\n\n\n#### MinGW & GNU ABI\n\n!!! note\n\n    The resulting library from building with MinGW as described below can be\n    used in Visual Studio, but it can only be linked dynamically. This\n    configuration has not been thoroughly tested and should be considered\n    experimental.\n\n\nTo build OpenBLAS on Windows with MinGW:\n\n1.  Install the MinGW (GCC) compiler suite, either the 32-bit\n    [MinGW]((http://www.mingw.org/) or the 64-bit\n    [MinGW-w64](http://mingw-w64.sourceforge.net/) toolchain. Be sure to install\n    its `gfortran` package as well (unless you really want to build the BLAS part\n    of OpenBLAS only) and check that `gcc` and `gfortran` are the same version.\n    In addition, please install MSYS2 with MinGW.\n2.  Build OpenBLAS in the MSYS2 shell. Usually, you can just type `make`.\n    OpenBLAS will detect the compiler and CPU automatically. \n3.  After the build is complete, OpenBLAS will generate the static library\n    `libopenblas.a` and the shared library `libopenblas.dll` in the folder. You\n    can type `make PREFIX=/your/installation/path install` to install the\n    library to a certain location.\n\nNote that OpenBLAS will generate the import library `libopenblas.dll.a` for\n`libopenblas.dll` by default.\n\nIf you want to generate Windows-native PDB files from a MinGW build, you can\nuse the [cv2pdb](https://github.com/rainers/cv2pdb) tool to do so.\n\nTo then use the built OpenBLAS shared library in Visual Studio:\n\n1.  Copy the import library (`OPENBLAS_TOP_DIR/libopenblas.dll.a`) and the\n    shared library (`libopenblas.dll`) into the same folder (this must be the\n    folder of your project that is going to use the BLAS library. You may need\n    to add `libopenblas.dll.a` to the linker input list: `properties->Linker->Input`).\n2.  Please follow the Visual Studio documentation about using third-party .dll\n    libraries, and make sure to link against a library for the correct\n    architecture.[^1]\n3.  If you need CBLAS, you should include `cblas.h` in\n    `/your/installation/path/include` in Visual Studio. Please see\n    [openblas#95](http://github.com/OpenMathLib/OpenBLAS/issues/95) for more details.\n\n[^1]:\n   If the OpenBLAS DLLs are not linked correctly, you may see an error like\n   _\"The application was unable to start correctly (0xc000007b)\"_, which typically\n   indicates a mismatch between 32-bit and 64-bit libraries.\n\n!!! info \"Limitations of using the MinGW build within Visual Studio\"\n\n    - Both static and dynamic linking are supported with MinGW.  With Visual\n      Studio, however, only dynamic linking is supported and so you should use\n      the import library.\n    - Debugging from Visual Studio does not work because MinGW and Visual\n      Studio have incompatible formats for debug information (PDB vs.\n      DWARF/STABS).  You should either debug with GDB on the command line or\n      with a visual frontend, for instance [Eclipse](http://www.eclipse.org/cdt/) or\n      [Qt Creator](http://qt.nokia.com/products/developer-tools/).\n\n\n### Windows on Arm\n\nA fully functional native OpenBLAS for WoA that can be built as both a static and dynamic library using LLVM toolchain and Visual Studio 2022. Before starting to build, make sure that you have installed Visual Studio 2022 on your ARM device, including the \"Desktop Development with C++\" component (that contains the cmake tool).\n(Note that you can use the free \"Visual Studio 2022 Community Edition\" for this task. In principle it would be possible to build with VisualStudio alone, but using\nthe LLVM toolchain enables native compilation of the Fortran sources of LAPACK and of all the optimized assembly files, which VisualStudio cannot handle on its own)\n\n1. Clone OpenBLAS to your local machine and checkout to latest release of\n   OpenBLAS (unless you want to build the latest development snapshot - here we\n   are using  the 0.3.28 release as the example, of course this exact version\n   may be outdated by the time you read this)\n  \n       ```cmd\n       git clone https://github.com/OpenMathLib/OpenBLAS.git\n       cd OpenBLAS\n       git checkout v0.3.28\n       ```\n  \n2. Install Latest LLVM toolchain for WoA:\n\n       Download the Latest LLVM toolchain for WoA from [the Release\n       page](https://github.com/llvm/llvm-project/releases/tag/llvmorg-19.1.5). At\n       the time of writing, this is version 19.1.5 - be sure to select the\n       latest release for which you can find a precompiled package whose name ends\n       in \"-woa64.exe\" (precompiled packages usually lag a week or two behind their\n       corresponding source release).  Make sure to enable the option\n       *\u201cAdd LLVM to the system PATH for all the users\u201d*.\n\n       Note: Make sure that the path of LLVM toolchain is at the top of Environment\n       Variables section to avoid conflicts between the set of compilers available\n       in the system path\n\n3. Launch the Native Command Prompt for Windows ARM64:\n\n       From the start menu search for *\"ARM64 Native Tools Command Prompt for Visual\n       Studio 2022\"*. Alternatively open command prompt, run the following command to\n       activate the environment:\n\n       ```cmd\n       C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvarsarm64.bat\n       ```\n\n4. Navigate to the OpenBLAS source code directory and start building OpenBLAS\n   by invoking Ninja:\n   \n       ```cmd\n       cd OpenBLAS\n       mkdir build\n       cd build\n       \n       cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DTARGET=ARMV8 -DBINARY=64 -DCMAKE_C_COMPILER=clang-cl -DCMAKE_C_COMPILER=arm64-pc-windows-msvc -DCMAKE_ASM_COMPILER=arm64-pc-windows-msvc -DCMAKE_Fortran_COMPILER=flang-new\n\n       ninja -j16\n       ```\n       \n       Note: You might want to include additional options in the cmake command\n       here. For example, the default configuration only generates a\n       `static.lib` version of the library. If you prefer a DLL, you can add\n       `-DBUILD_SHARED_LIBS=ON`.\n\n       Note that it is also possible to use the same setup to build OpenBLAS\n       with Make, if you prefer Makefiles over the CMake build for some\n       reason:\n\n       ```cmd\n       $ make CC=clang-cl FC=flang-new AR=\"llvm-ar\" TARGET=ARMV8 ARCH=arm64 RANLIB=\"llvm-ranlib\" MAKE=make\n       ```\n\n\n#### Generating an import library\n\nMicrosoft Windows has this thing called \"import libraries\". You need it for\nMSVC; you don't need it for MinGW because the `ld` linker is smart enough -\nhowever, you may still want it for some reason, so we'll describe the process\nfor both MSVC and MinGW.\n\nImport libraries are compiled from a list of what symbols to use, which are\ncontained in a `.def` file. A `.def` file should be already be present in the\n`exports` directory under the top-level OpenBLAS directory after you've run a build.\nIn your shell, move to this directory: `cd exports`.\n\n=== \"MSVC\"\n\n    Unlike MinGW, MSVC absolutely requires an import library. Now the C ABI of\n    MSVC and MinGW are actually identical, so linking is actually okay (any\n    incompatibility in the C ABI would be a bug).\n\n    The import libraries of MSVC have the suffix `.lib`. They are generated\n    from a `.def` file using MSVC's `lib.exe`.\n\n=== \"MinGW\"\n\n    MinGW import libraries have the suffix `.a`, just like static libraries.\n    Our goal is to produce the file `libopenblas.dll.a`.\n\n    You need to first insert a line `LIBRARY libopenblas.dll` in `libopenblas.def`:\n    ```\n    cat <(echo \"LIBRARY libopenblas.dll\") libopenblas.def > libopenblas.def.1\n    mv libopenblas.def.1 libopenblas.def\n    ```\n\n    Now the `.def` file probably looks like:\n    ```\n    LIBRARY libopenblas.dll\n    EXPORTS\n\t   caxpy=caxpy_  @1\n\t   caxpy_=caxpy_  @2\n           ...\n    ```\n    Then, generate the import library: `dlltool -d libopenblas.def -l libopenblas.dll.a`\n\n    _Again, there is basically **no point** in making an import library for use in MinGW. It actually slows down linking._\n\n\n### Android\n\nTo build OpenBLAS for Android, you will need the following tools installed on your machine:\n\n- [The Android NDK](https://developer.android.com/ndk/)\n- Clang compiler on the build machine\n\nThe next two sections below describe how to build with Clang for ARMV7 and\nARMV8 targets, respectively. The same basic principles as described below for\nARMV8 should also apply to building an x86 or x86-64 version (substitute\nsomething like `NEHALEM` for the target instead of `ARMV8`, and replace all the\n`aarch64` in the toolchain paths with `x86` or `x96_64` as appropriate).\n\n!!! info \"Historic note\"\n\n    Since NDK version 19, the default toolchain is provided as a standalone\n    toolchain, so building one yourself following\n    [building a standalone toolchain](http://developer.android.com/ndk/guides/standalone_toolchain.html)\n    should no longer be necessary.\n\n\n#### Building for ARMV7\n\n```bash\n# Set path to ndk-bundle\nexport NDK_BUNDLE_DIR=/path/to/ndk-bundle\n\n# Set the PATH to contain paths to clang and arm-linux-androideabi-* utilities\nexport PATH=${NDK_BUNDLE_DIR}/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin:${NDK_BUNDLE_DIR}/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH\n\n# Set LDFLAGS so that the linker finds the appropriate libgcc\nexport LDFLAGS=\"-L${NDK_BUNDLE_DIR}/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/lib/gcc/arm-linux-androideabi/4.9.x\"\n\n# Set the clang cross compile flags\nexport CLANG_FLAGS=\"-target arm-linux-androideabi -marm -mfpu=vfp -mfloat-abi=softfp --sysroot ${NDK_BUNDLE_DIR}/platforms/android-23/arch-arm -gcc-toolchain ${NDK_BUNDLE_DIR}/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/\"\n\n#OpenBLAS Compile\nmake TARGET=ARMV7 ONLY_CBLAS=1 AR=ar CC=\"clang ${CLANG_FLAGS}\" HOSTCC=gcc ARM_SOFTFP_ABI=1 -j4\n```\n\nOn macOS, it may also be necessary to give the complete path to the `ar`\nutility in the make command above, like so:\n```bash\nAR=${NDK_BUNDLE_DIR}/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-gcc-ar\n```\notherwise you may get a linker error complaining like `malformed archive header\nname at 8` when the native macOS `ar` command was invoked instead. Note that\nwith recent NDK versions, the AR tool may be named `llvm-ar` rather than what\nis assumed above.\n\n \n#### Building for ARMV8\n\n```bash\n# Set path to ndk-bundle\nexport NDK_BUNDLE_DIR=/path/to/ndk-bundle/\n\n# Export PATH to contain directories of clang and aarch64-linux-android-* utilities\nexport PATH=${NDK_BUNDLE_DIR}/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/bin/:${NDK_BUNDLE_DIR}/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH\n\n# Setup LDFLAGS so that loader can find libgcc and pass -lm for sqrt\nexport LDFLAGS=\"-L${NDK_BUNDLE_DIR}/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/lib/gcc/aarch64-linux-android/4.9.x -lm\"\n\n# Setup the clang cross compile options\nexport CLANG_FLAGS=\"-target aarch64-linux-android --sysroot ${NDK_BUNDLE_DIR}/platforms/android-23/arch-arm64 -gcc-toolchain ${NDK_BUNDLE_DIR}/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/\"\n\n# Compile\nmake TARGET=ARMV8 ONLY_CBLAS=1 AR=ar CC=\"clang ${CLANG_FLAGS}\" HOSTCC=gcc -j4\n```\nNote: using `TARGET=CORTEXA57` in place of `ARMV8` will pick up better\noptimized routines. Implementations for the `CORTEXA57` target are compatible\nwith all other `ARMV8` targets.\n\nNote: for NDK 23b, something as simple as:\n```bash\nexport PATH=/opt/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/bin/:$PATH\nmake HOSTCC=gcc CC=/opt/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android31-clang ONLY_CBLAS=1 TARGET=ARMV8\n```\nappears to be sufficient on Linux. On OSX, setting AR to the ar provided in the\n\"bin\" path of the NDK (probably `llvm-ar`) is also necessary.\n\n\n??? note \"Alternative build script for 3 architectures\"\n\n    This script will build OpenBLAS for 3 architecture (`ARMV7`, `ARMV8`,\n    `X86`) and install them to `/opt/OpenBLAS/lib`. Of course you can also copy\n    only the section that is of interest to you - also notice that the `AR=`\n    line may need adapting to the name of the ar tool provided in your\n    `$TOOLCHAIN/bin` - for example `llvm-ar` in some recent NDK versions.\n    It was tested on macOS with NDK version 21.3.6528147.\n\n    ```bash\n    export NDK=YOUR_PATH_TO_SDK/Android/sdk/ndk/21.3.6528147\n    export TOOLCHAIN=$NDK/toolchains/llvm/prebuilt/darwin-x86_64\n\n    make clean\n    make \\\n        TARGET=ARMV7 \\\n        ONLY_CBLAS=1 \\\n        CC=\"$TOOLCHAIN\"/bin/armv7a-linux-androideabi21-clang \\\n        AR=\"$TOOLCHAIN\"/bin/arm-linux-androideabi-ar \\\n        HOSTCC=gcc \\\n        ARM_SOFTFP_ABI=1 \\\n        -j4\n    sudo make install\n\n    make clean\n    make \\\n        TARGET=CORTEXA57 \\\n        ONLY_CBLAS=1 \\\n        CC=$TOOLCHAIN/bin/aarch64-linux-android21-clang \\\n        AR=$TOOLCHAIN/bin/aarch64-linux-android-ar \\\n        HOSTCC=gcc \\\n    -j4\n    sudo make install\n\n    make clean\n    make \\\n        TARGET=ATOM \\\n        ONLY_CBLAS=1 \\\n    CC=\"$TOOLCHAIN\"/bin/i686-linux-android21-clang \\\n    AR=\"$TOOLCHAIN\"/bin/i686-linux-android-ar \\\n    HOSTCC=gcc \\\n    ARM_SOFTFP_ABI=1 \\\n    -j4\n    sudo make install\n\n    ## This will build for x86_64 \n    make clean\n    make \\\n        TARGET=ATOM BINARY=64\\\n    ONLY_CBLAS=1 \\\n    CC=\"$TOOLCHAIN\"/bin/x86_64-linux-android21-clang \\\n    AR=\"$TOOLCHAIN\"/bin/x86_64-linux-android-ar \\\n    HOSTCC=gcc \\\n    ARM_SOFTFP_ABI=1 \\\n    -j4\n    sudo make install\n    ```\n    You can find full list of target architectures in [TargetList.txt](https://github.com/OpenMathLib/OpenBLAS/blob/develop/TargetList.txt)\n\n\n### iPhone/iOS\n\nAs none of the current developers uses iOS, the following instructions are what\nwas found to work in our Azure CI setup, but as far as we know this builds a\nfully working OpenBLAS for this platform.\n\nGo to the directory where you unpacked OpenBLAS,and enter the following commands:\n```bash\nCC=/Applications/Xcode_12.4.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang\n\nCFLAGS= -O2 -Wno-macro-redefined -isysroot /Applications/Xcode_12.4.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS14.4.sdk -arch arm64 -miphoneos-version-min=10.0\n\nmake TARGET=ARMV8 DYNAMIC_ARCH=1 NUM_THREADS=32 HOSTCC=clang NOFORTRAN=1\n```\nAdjust `MIN_IOS_VERSION` as necessary for your installation. E.g., change the version number\nto the minimum iOS version you want to target and execute this file to build the library.\n\n### HarmonyOS\n\nFor this target you will need the cross-compiler toolchain package by Huawei,\nwhich contains solutions for both Windows and Linux. Only the Linux-based\ntoolchain has been tested so far, but the following instructions may apply\nsimilarly to Windows:\n\nDownload [this HarmonyOS 4.1.1 SDK](https://repo.huaweicloud.com/harmonyos/os/4.1.1-Release/ohos-sdk-windows_linux-public.tar.gz),\nor whatever newer version may be available in the future). Use `tar -xvf\nohos-sdk-windows_linux_public.tar.gz` to unpack it somewhere on your system.\nThis will create a folder named \"ohos-sdk\" with subfolders \"linux\" and\n\"windows\". In the linux one you will find a ZIP archive named\n`native-linux-x64-4.1.7.8-Release.zip` - you need to unzip this where you want\nto install the cross-compiler, for example in `/opt/ohos-sdk`.\n\nIn the directory where you unpacked OpenBLAS, create a build directory for cmake, and change into it :\n```bash\nmkdir build\ncd build\n```\nUse the version of `cmake` that came with the SDK, and specify the location of\nits toolchain file as a cmake option. Also set the build target for OpenBLAS to\n`ARMV8` and specify `NOFORTRAN=1` (at least as of version 4.1.1, the SDK\ncontains no Fortran compiler):\n```bash\n/opt/ohos-sdk/linux/native/build-tools/cmake/bin/cmake \\\n      -DCMAKE_TOOLCHAIN_FILE=/opt/ohos-sdk/linux/native/build/cmake/ohos.toolchain.cmake \\\n      -DOHOS_ARCH=\"arm64-v8a\" -DTARGET=ARMV8 -DNOFORTRAN=1 ..\n```\nAdditional other OpenBLAS build options like `USE_OPENMP=1` or `DYNAMIC_ARCH=1`\nwill probably work too. Finally do the build:\n```bash\n/opt/ohos-sdk/linux/native/build-tools/cmake/bin/cmake --build .\n```\n\n### MIPS\n\nFor MIPS targets you will need latest toolchains:\n\n- P5600 - MTI GNU/Linux Toolchain\n- I6400, P6600 - IMG GNU/Linux Toolchain\n\nYou can use following commandlines for builds:\n\n```bash\nIMG_TOOLCHAIN_DIR={full IMG GNU/Linux Toolchain path including \"bin\" directory -- for example, /opt/linux_toolchain/bin}\nIMG_GCC_PREFIX=mips-img-linux-gnu\nIMG_TOOLCHAIN=${IMG_TOOLCHAIN_DIR}/${IMG_GCC_PREFIX}\n\n# I6400 Build (n32):\nmake BINARY=32 BINARY32=1 CC=$IMG_TOOLCHAIN-gcc AR=$IMG_TOOLCHAIN-ar FC=\"$IMG_TOOLCHAIN-gfortran -EL -mabi=n32\" RANLIB=$IMG_TOOLCHAIN-ranlib HOSTCC=gcc CFLAGS=\"-EL\" FFLAGS=$CFLAGS LDFLAGS=$CFLAGS TARGET=I6400\n\n# I6400 Build (n64):\nmake BINARY=64 BINARY64=1 CC=$IMG_TOOLCHAIN-gcc AR=$IMG_TOOLCHAIN-ar FC=\"$IMG_TOOLCHAIN-gfortran -EL\" RANLIB=$IMG_TOOLCHAIN-ranlib HOSTCC=gcc CFLAGS=\"-EL\" FFLAGS=$CFLAGS LDFLAGS=$CFLAGS TARGET=I6400\n\n# P6600 Build (n32):\nmake BINARY=32 BINARY32=1 CC=$IMG_TOOLCHAIN-gcc AR=$IMG_TOOLCHAIN-ar FC=\"$IMG_TOOLCHAIN-gfortran -EL -mabi=n32\" RANLIB=$IMG_TOOLCHAIN-ranlib HOSTCC=gcc CFLAGS=\"-EL\" FFLAGS=$CFLAGS LDFLAGS=$CFLAGS TARGET=P6600\n\n# P6600 Build (n64):\nmake BINARY=64 BINARY64=1 CC=$IMG_TOOLCHAIN-gcc AR=$IMG_TOOLCHAIN-ar FC=\"$IMG_TOOLCHAIN-gfortran -EL\" RANLIB=$IMG_TOOLCHAIN-ranlib HOSTCC=gcc CFLAGS=\"-EL\" FFLAGS=\"$CFLAGS\" LDFLAGS=\"$CFLAGS\" TARGET=P6600\n\nMTI_TOOLCHAIN_DIR={full MTI GNU/Linux Toolchain path including \"bin\" directory -- for example, /opt/linux_toolchain/bin}\nMTI_GCC_PREFIX=mips-mti-linux-gnu\nMTI_TOOLCHAIN=${IMG_TOOLCHAIN_DIR}/${IMG_GCC_PREFIX}\n\n# P5600 Build:\n\nmake BINARY=32 BINARY32=1 CC=$MTI_TOOLCHAIN-gcc AR=$MTI_TOOLCHAIN-ar FC=\"$MTI_TOOLCHAIN-gfortran -EL\"    RANLIB=$MTI_TOOLCHAIN-ranlib HOSTCC=gcc CFLAGS=\"-EL\" FFLAGS=$CFLAGS LDFLAGS=$CFLAGS TARGET=P5600\n```\n\n\n### FreeBSD\n\nYou will need to install the following tools from the FreeBSD ports tree:\n\n* lang/gcc\n* lang/perl5.12\n* ftp/curl\n* devel/gmake\n* devel/patch\n\nTo compile run the command:\n```bash\n$ gmake CC=gcc FC=gfortran\n```\n\n\n### Cortex-M\n\nCortex-M is a widely used microcontroller that is present in a variety of\nindustrial and consumer electronics. A common variant of the Cortex-M is the\n`STM32F4xx` series. Here, we will give instructions for building for that\nseries.\n\nFirst, install the embedded Arm GCC compiler from the Arm website. Then, create\nthe following `toolchain.cmake` file:\n\n```cmake\nset(CMAKE_SYSTEM_NAME Generic)\nset(CMAKE_SYSTEM_PROCESSOR arm)\n\nset(CMAKE_C_COMPILER \"arm-none-eabi-gcc.exe\")\nset(CMAKE_CXX_COMPILER \"arm-none-eabi-g++.exe\")\n\nset(CMAKE_EXE_LINKER_FLAGS \"--specs=nosys.specs\" CACHE INTERNAL \"\")\n\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n```\n\nThen build OpenBLAS with:\n```bash\n$ cmake .. -G Ninja -DCMAKE_C_COMPILER=arm-none-eabi-gcc -DCMAKE_TOOLCHAIN_FILE:PATH=\"toolchain.cmake\" -DNOFORTRAN=1 -DTARGET=ARMV5 -DEMBEDDED=1\n```\n\nIn your embedded application, the following functions need to be provided for OpenBLAS to work correctly:\n```C\nvoid free(void* ptr);\nvoid* malloc(size_t size);\n```\n\n!!! note\n\n    If you are developing for an embedded platform, it is your responsibility\n    to make sure that the device has sufficient memory for `malloc` calls.\n    [Libmemory](https://github.com/embeddedartistry/libmemory)\n    provides one implementation of `malloc` for embedded platforms.\n"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/OpenBLAS/docs/install.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# To build and use SDL:\n\nSDL supports a number of development environments:\n- [CMake](docs/INTRO-cmake.md)\n- [Visual Studio on Windows](docs/INTRO-visualstudio.md)\n- [gcc on Windows](docs/INTRO-mingw.md)\n- [Xcode on Apple platforms](docs/INTRO-xcode.md)\n- [Android Studio](docs/INTRO-androidstudio.md)\n- [Emscripten for web](docs/INTRO-emscripten.md)\n\nSDL is also usable in other environments. The basic steps are to use CMake to build the library and then use the headers and library that you built in your project. You can search online to see if anyone has specific steps for your setup.\n\n# Documentation\n\nAn API reference, tutorials, and additional documentation is available at:\n\nhttps://wiki.libsdl.org/SDL3\n\n# Example code\n\nThere are simple example programs in the examples directory, and you can view them online at:\n\nhttps://examples.libsdl.org/SDL3\n\nMore in-depth test programs are available in the tests directory and can be built by adding `-DSDL_TESTS=ON` to the CMake command line when building SDL.\n\n# Discussions\n\n## Discord\n\nYou can join the official Discord server at:\n\nhttps://discord.com/invite/BwpFGBWsv8\n\n## Forums/mailing lists\n\nYou can join SDL development discussions at:\n\nhttps://discourse.libsdl.org/\n\nOnce you sign up, you can use the forum through the website or as a mailing list from your email client.\n\n## Announcement list\n\nYou can sign up for the low traffic announcement list at:\n\nhttps://www.libsdl.org/mailing-list.php\n\n"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/SDL/INSTALL.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\n# Using this package\n\nThis package contains SDL built for Xcode, and includes support for macOS, iOS and tvOS.\n\nTo use this package in Xcode, drag `SDL3.xcframework` into your project.\n\nTo use this package in a CMake project, copy both `SDL3.xcframework` and `share` to `~/Library/Frameworks`.\n\n# Documentation\n\nAn API reference, tutorials, and additional documentation is available at:\n\nhttps://wiki.libsdl.org/SDL3\n\n# Example code\n\nThere are simple example programs available at:\n\nhttps://examples.libsdl.org/SDL3\n\n# Discussions\n\n## Discord\n\nYou can join the official Discord server at:\n\nhttps://discord.com/invite/BwpFGBWsv8\n\n## Forums/mailing lists\n\nYou can join SDL development discussions at:\n\nhttps://discourse.libsdl.org/\n\nOnce you sign up, you can use the forum through the website or as a mailing list from your email client.\n\n## Announcement list\n\nYou can sign up for the low traffic announcement list at:\n\nhttps://www.libsdl.org/mailing-list.php\n\n"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/SDL/Xcode/SDL/pkg-support/resources/INSTALL.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\n# Using this package\n\nThis package contains SDL built for Xcode.\n\nTo use this package in Xcode, drag `SDL3.framework` into your project.\n\n# Documentation\n\nAn API reference, tutorials, and additional documentation is available at:\n\nhttps://wiki.libsdl.org/SDL3\n\n# Example code\n\nThere are simple example programs available at:\n\nhttps://examples.libsdl.org/SDL3\n\n# Discussions\n\n## Discord\n\nYou can join the official Discord server at:\n\nhttps://discord.com/invite/BwpFGBWsv8\n\n## Forums/mailing lists\n\nYou can join SDL development discussions at:\n\nhttps://discourse.libsdl.org/\n\nOnce you sign up, you can use the forum through the website or as a mailing list from your email client.\n\n## Announcement list\n\nYou can sign up for the low traffic announcement list at:\n\nhttps://www.libsdl.org/mailing-list.php\n\n"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/SDL/Xcode/SDL/pkg-support/resources/framework/INSTALL.md",
      "technique": "file_exploration"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "biomechanics, opensim, physics-simulation"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": [
          "OpenSim",
          "Biomechanics",
          "Musculoskeletal Modelling",
          "Simbody",
          "Mechanical Modelling",
          "Simulation Software"
        ]
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [2025] [Adam Kewley]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\nTU DELFT DISCLAIMER:\n\nTechnische Universiteit Delft hereby disclaims all copyright interest in the\nprogram \"OpenSim Creator\" (a desktop graphical editor for OpenSim Models) written\nby Adam Kewley.\n\n    Prof. Dr. Ir. Fred van Keulen, Dean of 3mE (TU Delft)\n\nThe above is a standard disclaimer from \"TU Delft Guidelines on Research Software (2021)\",\nDOI: http://doi.org/10.5281/zenodo.4629635\n"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/https://opensource.org/licenses/Apache-2.0",
        "spdx_id": "https://opensource.org/licenses/Apache-2.0",
        "type": "License",
        "value": "https://opensource.org/licenses/Apache-2.0"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "License",
        "value": "Apache 2.0"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/Bindings/Python/setup.py",
      "technique": "code_parser"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/resources/OpenSimCreator/textures/chanzuckerberg_logo.svg"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "opensim-creator"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OpenSim Creator"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ComputationalBiomechanicsLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "package_id": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "opensim"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/Bindings/Python/setup.py",
      "technique": "code_parser"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 4889607,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "GLSL",
        "size": 114692,
        "type": "Programming_language",
        "value": "GLSL"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 38003,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 26061,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 23795,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 19801,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 6741,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 1018,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "PowerShell",
        "size": 1012,
        "type": "Programming_language",
        "value": "PowerShell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Python"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/Bindings/Python/setup.py",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Python"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/libosim/opensim-core/Bindings/Python/setup.py",
      "technique": "code_parser"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2025-09-08T13:47:29Z",
        "date_published": "2025-09-09T08:43:50Z",
        "description": "0.6.0 is a larger release that focuses on making the workflow around mesh and model warping easier. This is to support two new end-to-end tutorials that we have added to the documentation: \"Make a Lower Leg\" and \"The Model Warper\". Those tutorials outline an OpenSim Creator workflow to create an OpenSim model from scratch and warp it non-linearly.\r\n\r\nSee CHANGELOG.md for a full list of changes in 0.6.0 (23 changes).",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.6.0",
        "name": "0.6.0: Model Warping (Beta), and many related improvements!",
        "release_id": 245758055,
        "tag": "0.6.0",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.6.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/245758055",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/245758055",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.6.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2025-07-14T10:58:00Z",
        "date_published": "2025-07-14T17:48:45Z",
        "description": "0.5.25 is a hotfix release that fixes some keybind regressions that 0.5.24 introduced (sorry about that!). It also includes a few other improvements/fixes:\r\n\r\n- Mouse wheel scrolling was improved on MacOS (again) and should now feel much closer to the other OSes.\r\n- Fixed MacOS keybindings incorrectly using CTRL in places where COMMAND should've been used (#1069).\r\n- Fixed keybindings not working in the mesh importer workflow (#1072). Unfortunately, this reverses the \"keyboard navigation between elements in the UI is now easier\" feature that was introduced in 0.5.24.\r\n- Models that contain muscles that cannot be equilibrated can now be loaded. Instead of halting with an error message, the system will log a warning message mentioning the issue and continue as normal (thanks @modenaxe, #1070).\r\n- The 'Add' context menu for an OpenSim::GeometryPath now contains an \"Add Path Point\" option, which operates the same way as the same option on OpenSim::PathActuators (#1061).\r\n- The \"Preview Experimental Data\" workflow now filters out data series with names that are incompatible with OpenSim::Component's naming conventions (thanks @alexbeattie42, #1068).\r\n- Fixed \"Preview Experimental Data\" crashing when it loads invalid data. Instead, it now emits an error message to the log (thanks @alexbeattie42,#1068).",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.25",
        "name": "0.5.25: Hotfix broken mesh importer and MacOS keybinds",
        "release_id": 232299763,
        "tag": "0.5.25",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.25",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/232299763",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/232299763",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.25"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2025-06-23T07:55:05Z",
        "date_published": "2025-06-23T11:27:21Z",
        "description": "0.5.24 is a regular monthly release that improves the model editor's context menu, makes it easier to click muscle path points, adds a few extra contextual actions, and mostly finishes the first alpha version of the model warper documentation.\r\n\r\nKey points:\r\n\r\n- The component context menu was redesigned for consistency, and is able to add any component as a child of any other component, which can be useful when building complex models hierarchically.\r\n- Mouse hittesting in the 3D viewport now uses an algorithm that prioritizes subcomponents over parent components in the case where the mouse ray intersects multiple components, which makes it easier to (e.g.) select muscle points that are surrounded by fibers (#592).\r\n- The `osc.toml` configuration file now supports a `model_editor/monitor_osim_changes` boolean option, which can be used to explicitly tell the OpenSim model editor whether or not to auto-reload the file when it changes on disk (defaults to `true`; thanks @mrrezaie, #1000).\r\n- Attempting to import an incorrect `.osim` file into the mesh importer now results in a log error message rather than a crashing exception (thanks @davidpagnon, #1050).\r\n\r\nSee CHANGELOG.md for a full list of changes.",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.24",
        "name": "0.5.24: Improved context menu, better mouse hit-testing",
        "release_id": 227025278,
        "tag": "0.5.24",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.24",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/227025278",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/227025278",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.24"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2025-05-26T11:53:55Z",
        "date_published": "2025-05-27T09:06:01Z",
        "description": "0.5.23 is a regular monthly release that includes a variety of little UI cleanups, improvements to the mesh warper, and documentation for adding `StationDefinedFrame`s to models. \r\n\r\nTop-level summary:\r\n\r\n- Parts of the model editing UI were cleaned up and a few nice-to-haves were added. Namely, the `Add` menu now has a search bar for searching through all available OpenSim components and the `Add Component` popup has a cleaner layout with nicer search functionality for sockets. The property editors and associated icons were also cleaned up and more clearly labelled.\r\n- Features from the (currently, experimental) model warper were backported to the existing mesh warper workflow. E.g. you can now separately toggle scale/rotation/translation/warp and prescaling via the mesh warping UI.\r\n- A documentation page for `StationDefinedFrame`s were added to OSC's documentation. They are a prerequisite for creating models that can be scaled non-uniformly (documentation for the model warper is next on our list).\r\n\r\nThe release contains a variety of (other) changes (19 in total), which you can  read in CHANGELOG.md.",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.23",
        "name": "0.5.23: UI Cleanups/Improvements, Customizable Mesh Warping",
        "release_id": 221183729,
        "tag": "0.5.23",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.23",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/221183729",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/221183729",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.23"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2025-04-25T06:06:55Z",
        "date_published": "2025-04-25T12:48:13Z",
        "description": "0.5.22 is primarily a bugfix release, the biggest changes are:\r\n\r\n- **It drops support for Ubuntu 20.04**: Ubuntu 20.04 LTS ended 23rd April 2025, which means that other systems (e.g. GitHub actions, which OSC uses to build releases) no longer support it.\r\n- It internally handles file dialogs differently (it now uses SDL3, which decouples it from GTK on Linux). This means that the file dialogs will behave a little bit differently, please report any issues.\r\n- `OpenSim::Force`s now expose their records (e.g. `OpenSim::Force::getRecordLabels`) as plottable/watchable outputs, which makes (e.g.) debugging forces easier.\r\n\r\nThe most important bugfixes are:\r\n\r\n- The `is_visible` flags on `Appearance` editors now work again (#1028).\r\n- Plotting two 1D outputs in a 2D plot was fixed (previously, it was always plotting the first against itself, #1025)\r\n\r\nSee CHANGELOG.md for more details",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.22",
        "name": "0.5.22: Bugfixes, Ubuntu 20.04 dropped",
        "release_id": 214745118,
        "tag": "0.5.22",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.22",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/214745118",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/214745118",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.22"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2025-02-28T14:36:23Z",
        "date_published": "2025-03-01T16:06:20Z",
        "description": "0.5.21 is a minor release that drops the demo tabs from the installer, making it ~5 MB smaller. It also adds support for HighDPI 3D rendering, which can be customized via the new `graphics.render_scale` option. The mesh importer also now has a `reload meshes` button, which can be handy for editing meshes in Blender while also importing them into a new OpenSim model.\r\n\r\nApart from that, there's a few bugfixes, and the production/development pipeline has been generally updated to accomodate new features, release methods, and so on.\r\n\r\nAs always, all changes are listed in the CHANGELOG.md file!",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.21",
        "name": "0.5.21: 3D HighDPI, better error handling, smaller installer",
        "release_id": 203173775,
        "tag": "0.5.21",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.21",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/203173775",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/203173775",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.21"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2025-01-28T12:42:43Z",
        "date_published": "2025-01-28T15:02:17Z",
        "description": "Another week, another hotfix :wink: . 0.5.20 fixes a segfault that occurs when opening a file dialog in Ubuntu (#993).\r\n\r\nThe segfault was due to a symbol collision between two unrelated libraries that OpenSim Creator uses. That type of bug should happen less frequently when OSC is refactored to exclusively talk to the operating system via SDL3.\r\n",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.20",
        "name": "0.5.20: Hotfix file dialog opening on Ubuntu",
        "release_id": 197166677,
        "tag": "0.5.20",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.20",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/197166677",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/197166677",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.20"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2025-01-24T12:05:59Z",
        "date_published": "2025-01-24T15:52:17Z",
        "description": "0.5.19 is a hotfix release that's coming so soon after 0.5.18 because it patches a bug in the STL parser that causes models using STL meshes to consume a very very large amount of memory.\r\n\r\nAdditionally, it adds a MacOS-specific bootup icon, adds support for negative scale factors (a handy trick for mirroring meshes), makes it possible to toggle a single `ContactGeoemtry` component through its `is_visible` toggle, replaces the custom `ExpressionBasedBushingForce`\r\nframe visualization with OSC's in-built frame visualization (which is toggle-able), and filters out any NaNed geometry coming from OpenSim (which can sometimes break OSC's hittest). See the CHANGELIST.md file for a full overview of the changes.",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.19",
        "name": "0.5.19: Hotfix for STL mesh loader memory usage",
        "release_id": 196668656,
        "tag": "0.5.19",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.19",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/196668656",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/196668656",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.19"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2025-01-16T12:21:33Z",
        "date_published": "2025-01-16T15:01:32Z",
        "description": "Happy new year!\r\n\r\nSanta brought me a shiny new M4 mac mini, so 0.5.18 adds native Apple silicon (Mx processor) support and tries to fix the aggressive zooming behavior (work in progress). Additionally, custom icons are now used throughout the UI, the 3D viewers try to provide some written feedback when manipulating frames, and the model-level display toggles are now also in the `Display` menu, in order to make them harder to overlook (they operate separately from toggling things as hidden/shown). There's also a some nice bugfixes, such as a fix to the annoying muscle plot flickering issue (sorry about that).\r\n\r\nRead the CHANGELOG.md file in the repository for a comprehensive overview of what has changed.",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.18",
        "name": "0.5.18: Apple Silicon support, icons, feedback when manipulating frames",
        "release_id": 195130999,
        "tag": "0.5.18",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.18",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/195130999",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/195130999",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.18"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2024-12-11T14:01:15Z",
        "date_published": "2024-12-12T05:59:03Z",
        "description": "0.5.17 is a minor release that focuses on integrating HighDPI support into OSC's various subsystems. Various engine assets and model meshes were also removed, compressed, or decimated, roughly halving the size of OSC's installers. Additionally, there's now an easier way to zero coordinates in the coordinates panel (#959), the socket reassignment popup has had a makeover (#957), and various little bugs/regressions were fixed (#958, #952).\r\n\r\nChange **highlights** (see [CHANGELOG.md](https://github.com/ComputationalBiomechanicsLab/opensim-creator/blob/0.5.17/CHANGELOG.md) for a full list):\r\n\r\n- The 2D backend was updated to support HighDPI scaling (3D is WIP). This means that the `[experimental_feature] high_dpi_mode` in the configuration is now always `true`.\r\n- Several (potentially, but unlikely, breaking) changes to the shared geometry/ directory and example models were made. This is to accomodate minimizing the shared geometry directory. Looking forward, model designers should prefer a model-local Geometry/ directory. See [CHANGELOG.md](https://github.com/ComputationalBiomechanicsLab/opensim-creator/blob/0.5.17/CHANGELOG.md) for specific changes.\r\n- The Coordinates panel now contains a `Pose` dropdown that exposes the ability to zero all joint coordinates in the model (thanks @tgeijten, #959).\r\n- The socket reassignment popup was given a makeover, and tries to draw more attention to the `Re-Express $COMPONENT in new frame` option (thanks @tgeijten, #957).\r\n- The \"Frame Definition\" workflow is now labelled as deprecated, because we anticipate that it isn't used very much. If you think otherwise, then post a comment on issue #951.\r\n- Fixed a regression where the `Display` context menu would always be greyed out in the model editor (thanks @tgeijten, #958).\r\n- Fixed 'Wireframe' appearance causing the component's decoration to disappear, rather than showing as a wireframe (#952).",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.17",
        "name": "0.5.17: High DPI support, smaller installer, and various other fixes",
        "release_id": 190352287,
        "tag": "0.5.17",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.17",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/190352287",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/190352287",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.17"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2024-11-04T12:50:53Z",
        "date_published": "2024-11-05T11:52:03Z",
        "description": "0.5.16 is a patch release that focuses on improving how the software is packaged and its documentation, with a few nice-to-haves thrown in for good measure. Read the CHANGELOG.md for a full list of changes, here are some featured ones:\r\n\r\n- There is now a Color Scaling option in the muscle coloring/styling panel, which enables auto-scaling the min/max (e.g. blue-to-red) color range based on the model-wide min/max of the chosen Color Source. This is useful for visualizing differences between muscles that are all within a tight numeric range (#933).\r\n- The installation, building, development environment setup, and contribution guides have been moved into the documentation pages (https://docs.opensimcreator.com/), so that there's a centralized location for all documentation.\r\n- Finished off tutorials 5 and 7 in the documentation.\r\n- After dragging a file into OSC, the next file dialog that opens should now default to the same directory that the files were dragged from (thanks @mrrezaie, #918).",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.16",
        "name": "0.5.16: Muscle color scaling, smaller installer, and more documentation",
        "release_id": 183569895,
        "tag": "0.5.16",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.16",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/183569895",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/183569895",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.16"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2024-10-07T14:21:07Z",
        "date_published": "2024-10-08T07:25:05Z",
        "description": "0.5.15 adds (\ud83e\ude84 experimental) support for visualizing/linking experimental data, which lets users combine OpenSim models, trajectories, raw experimental data, and OpenSim tool files (e.g. `ExternalLoads`) in one place. 0.5.15 also improves the UI in a variety of ways, mainly with the aim of eventually unifying previewing experimental data, model editing, and viewing simulations in one workflow.\r\n\r\nKey features:\r\n\r\n- A `Preview Experimental Data` workflow has been added. This is **work in progress**, but ultimately has a similar intent to the official OpenSim GUI's `Preview Experimental Data...`. The documentation has been updated (also work-in-progress), more details available in the CHANGELOG.\r\n- The simulator tab now has much more similar behavior to the model editor tab, in terms of supported panels. E.g. you can now view the coordinates panel while viewing a simulation.\r\n- Viewing function curves has been improved. The function curve viewer now spawns a separate panel that can be docked in the UI, enabling plotting multiple curves and viewing them while performing other model edits.\r\n\r\nSee CHANGELOG.md for all changes.\r\n\r\n",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.15",
        "name": "0.5.15: Preview experimental data, other UI improvements",
        "release_id": 178832793,
        "tag": "0.5.15",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.15",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/178832793",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/178832793",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.15"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2024-09-03T13:46:46Z",
        "date_published": "2024-09-04T07:37:56Z",
        "description": "0.5.14 is a minor release with some nice-to-have improvements:\r\n\r\n- The Navigator panel in the model editor now automatically scrolls to the selected component when selecting the component via some other panel (e.g. a 3D viewer, reported by @mrrezaie, #908)\r\n- Added Point Forces and Point Torques visualization options, which enables drawing force vectors in their point-force form (as opposed to their reduced body-force form). This feature currently only works for ExternalForces in the model (#904) and GeometryPaths (#907).\r\n- The Show Forces' Linear/Rotation Component option was reworded to Forces on Bodies and Torques on Bodies to reflect what's actually being shown.\r\n- The rim highlights now more-clearly distinguish between hovered, selected, hovered+selected elements in the scene when they are overlapping (#24).\r\n- The documentation now contains work-in-progress tutorials for the mesh warper and model warper UIs.\r\n- The (experimental) model warping UI is now available from the splash screen. Note: it's still in development, and things may break!",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.14",
        "name": "0.5.14: `navigator` autoscroll, better rim highlighting, better force visualization",
        "release_id": 173360239,
        "tag": "0.5.14",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.14",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/173360239",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/173360239",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.14"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2024-07-30T11:01:29Z",
        "date_published": "2024-07-30T12:11:29Z",
        "description": "0.5.13 adds support for visualizing force vectors in the model editor, the ability to visualize `OpenSim::Function` properties (e.g. the `ActiveForceLengthCurve` of a `MillardEquilibriumMuscle2018`), and easier visual joint parent/child/center placement in the model editor - along with a bunch of other smaller changes/fixes!\r\n\r\n- The model editor's/simulator's 3D visualizers now have an experimental `Show > Forces' Linear/Rotational Component` visualization option, which adds arrows indicating how each `OpenSim::Force` in the model applies its linear/angular force component to each body in the model. This can be useful for debugging model creation or `ExternalForce`s\r\n- The model editor UI now has experimental support for viewing `OpenSim::Function` curves. This is currently exposed as an eye icon in the property editor panel (#695)\r\n- Selecting an `OpenSim::Joint` that has `OpenSim::PhysicalOffsetFrame`s for both its parent and child frames now shows a 3D manipulation gizmo that lets you move the joint center without moving anything else in the model (#159)\r\n- ... and much more! (see CHANELOG.md in the main repository for more information)",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.13",
        "name": "0.5.13: `Force` and `Function` visualization, easier joint center placement",
        "release_id": 167835445,
        "tag": "0.5.13",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.13",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/167835445",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/167835445",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.13"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2024-04-29T10:04:26Z",
        "date_published": "2024-04-29T15:37:48Z",
        "description": "0.5.12 adds support for adding a templated CustomJoint (i.e. a PinJoint-like joint), cleans up some of the UI buttons/menus, and fixes various little issues, such as not being able to delete outputs from the simulation screen.\r\n\r\n- MacOS is now built using the macos-13 (Ventura) GitHub Action runner, which means that OSC will only work on Ventura or newer\r\n- Right-clicking a 2D output plot in the simulator tab now shows a context menu with the option to export the plot to a CSV or stop watching the output (#841)\r\n- Fixed the Save All button only showing in the output plots tab if any of the plots happens to be 1D floating-point data (it should now show when 2D data is being plotted, too, #840)\r\n- Fixed using Save All > as CSV in the simulation tab when plotting 2D outputs (e.g. phase diagrams) wasn't exporting the 2nd dimension as a column in the CSV (#840)\r\n- CustomJoints can now be added via the UI. They default to having a single rotational degree of freedom along the Z axis (i.e. a PinJoint-like CustomJoint). Editing a CustomJoint still requires manually editing the .osim file, though\r\n- The simulation tab now has an Actions menu, which includes the ability to extend the end time of a simulation by some multiplication factor (2x, 4x, etc. #839)\r\n- The chequered floor texture is now rendered with Nearest sampling, which makes it appear sharper in the foreground\r\n- Memory usage was reduced by optimizing font loading and log message storage\r\n- The loading bar on the loading tab is now more centered and scales with the overall window size\r\n- Fixed \"Plot Against other Output\" feature not working with non-model-sourced outputs, such as the integrator's \"Step Wall Time\"\r\n- The \"empty\" state of some panels (e.g. \"nothing selected\", \"nothing watched\") was tidied up and now shows a centered message with, where applicable, a tip for showing information in the panel\r\n- Each plot in the Output Plots panel of the simulator tab now shows a little trash icon, to match the deletion button that's shown in the model editor tab\r\n- The right-click menu of an output plot in the simulator tab will now show a little trash icon and the button text Stop Watching (previously, Watch Output with a tick box) to match the deletion button that's shown in the model editor tab\r\n- The Selection Details panel that's shown in the simulator tab was cleaned up to prioritize showing property values (similar to the editor tab), followed by a toggleable outputs section (#838)\r\n- Fixed a bug in the Selection Details panel where drawing too many output plots would cause drawing to fail\r\n- README.md now explicitly mentions that a C++20 compiler is required to build the project\r\n",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.12",
        "name": "0.5.12: `CustomJoint` support, better output handling in simulation tab",
        "release_id": 153282966,
        "tag": "0.5.12",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.12",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/153282966",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/153282966",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.12"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2024-04-04T11:27:56Z",
        "date_published": "2024-04-05T07:20:25Z",
        "description": "0.5.11 adds support for adding wrap objects to a model in the model editor, along with associating the wrap object with a `GeometryPath`. It also adds support for creating 2D plots, which is handy for creating phase diagrams during simulation.\r\n\r\n- Right-clicking a 1D plot in the simulator tab now shows a `Plot Against Other Output` option, which lets you create a 2D output by combining two existing model outputs (handy for phase diagrams, etc.)\r\n- Right-clicking on a `PhysicalFrame`/`Body` in the model editor now shows an `Add` menu that includes the ability to add geometry, offset frames, and wrap objects. Previously: was `Add Geometry` and `Add Offset Frame` were shown, but now there's also the ability to add wrap objects. (#7)\r\n- Right-clicking a `GeometryPath` in the model now shows an `Add` menu that includes the ability to add a `PathWrap` to the `GeometryPath`, which is handy in conjunction with the above.\r\n- Added `Export > Non-Participating Landmarks to CSV` as an export option to the mesh warper\r\n- The mesh warper can now has the option to export source/destination/result meshes in OBJ format with/without surface normals (note: Simbody/OpenSim ignore this information, but it's useful if you plan on using the OBJ file in other software, e.g. Blender)\r\n- Pressing `Ctrl/Super` and `PageUp`/`PageDown` now toggles between each tab. Alternatively, you can press (WindowsKey or Command) + (Alt or Option) + (Left or Right) for the same behavior (matches how MacOS apps tend to handle tab navigation)\r\n- Pressing `Space` while in the simulator screen now (un)pauses the simulation\r\n- There is now a `loop` checkbox in the simulator screen, which will cause playback to loop back from the start when playback hits the end of a simulation\r\n- Internal: more of the UI code was ported from ImGui:: to ui:: to hide an implementation detail\r\n- Internal: Added `MeshPhongMaterial`, which is handy for graphics development\r\n- Internal: The `OutputExtractor` APIs were redesigned to support use-cases such as synthesizing outputs at runtime by combining other outputs (`ConcatenatingOutputExtractor`)\r\n- Internal: The `OutputExtractor` APIs were redesigned to support emitting `string`, `float`, and `Vec2` outputs (previously: only string/float) to facilitate 2D plotting",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.11",
        "name": "0.5.11: Wrap Objects and 2D output plots",
        "release_id": 149898105,
        "tag": "0.5.11",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.11",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/149898105",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/149898105",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.11"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2024-03-05T14:15:20Z",
        "date_published": "2024-03-06T09:09:42Z",
        "description": "0.5.10 adds provisional support for `OpenSim::StationDefinedFrame`, which has now been added to OpenSim and should become widely available with the release of OpenSim 4.6. It also adds more options to the `Calculate` - primarily so that the `Fit Analytic Geometry to This` can be used to extract similar values to external scripts (e.g. the shape fitters from 10.1017/pab.2020.46).\r\n\r\nIt also fixes a scrolling bug in the mesh importer that slipped into 0.5.9 - sorry about that\r\n\r\nNotes:\r\n\r\n- Updated `opensim-core` to a version which includes `StationDefinedFrame` support:\r\n  - Upstream feature: https://github.com/opensim-org/opensim-core/pull/3694\r\n  - They let you define an `OpenSim::PhysicalFrame` from stations/landmarks/markers. This more closely matches ISB standards and the way in which people tend to build anatomical models.\r\n  - Because they are an `OpenSim::PhysicalFrame`, they can be used a joint frames, offset frames, etc.\r\n  - **BEWARE: EXPERIMENTAL FEATURE**:\r\n    - Upstream OpenSim (+GUI) have not yet released this feature, so models that use it cannot be opened outside of OpenSim Creator (yet), which is why it's only shown in the \"Custom OSC components\" section. It will become widely available in the next OpenSim release (v4.6)\r\n    - OpenSim Creator's tooling support for the feature (visualization, documentation, etc.) is currently limited, but we plan to improve it over time\r\n- The `Calculate` menu for `Ellipsoid`s and `Frame`s now contain additional options, such as being able to ask for the axis directions, so that users can get similar information out of shape-fitted geometry as they would from external scripts\r\n- The warping algorithm used by the mesh warper and model warper (TPS) now `lerp`s between \"not warped\" and \"fully warped\", rather than recomputing the warp kernel based on blended input data:\r\n  - Practically, this means that setting the blending factor to zero guarantees that the warped mesh is exactly the same as the input mesh (previously, it would try to solve for the input positions and sometimes produce a non-identity solution when given a small number of input landmarks)\r\n- Fixed mesh importer scrolling calculation for the new camera manipulator widget causing unnecessary (+annoying) scrolling\r\n- Fixed muscles not casting shadows after the surface rendering change\r\n- There is now a minor delay when mousing over entries in the `Add` menus in the model editor\r\n- Internal: `google/benchmark`, `ocornut/imgui`, `sammycage/lunasvg`, `nothings/stb`, `marzer/tomlplusplus`, and `martinus/unordered_dense` were all updated to their latest releases",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.10",
        "name": "0.5.10: Add StationDefinedFrame, fix scrolling bug in mesh importer",
        "release_id": 145014057,
        "tag": "0.5.10",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.10",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/145014057",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/145014057",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.10"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2024-02-27T10:20:05Z",
        "date_published": "2024-02-28T06:01:50Z",
        "description": "0.5.9 is a minor release that:\r\n\r\n- Makes rendering more consistent with OpenSim GUI (wireframe support, etc.)\r\n- Adds support for smooth-shaded normals, giving model builders some control over shading\r\n- Puts the camera axes top-left and makes them clickable, which is similar to Blender/Godot\r\n- Adds better socket documentation when adding a component to the model\r\n\r\nIt also includes a Graphviz (`.dot`) exporter for the model's socket/ownership graph, which is handy for inducing anxiety. You definitely shouldn't use it to export a complicated model to https://dreampuf.github.io/GraphvizOnline/ . If you do that (you shouldn't), don't delete lines to get over the memory limits, and *definitely* don't zoom in :wink:\r\n\r\nSee CHANGELOG.md for a more comprehensive list of changes.",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.9",
        "name": "0.5.9: improved rendering, camera manipulation, and socket assignment",
        "release_id": 143937998,
        "tag": "0.5.9",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.9",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/143937998",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/143937998",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2024-02-14T08:11:41Z",
        "date_published": "2024-02-14T16:50:54Z",
        "description": "0.5.8 makes moving `PhysicalOffsetFrame`s a little bit easier when they're the child of a `Joint`, and adds user-facing support for OSC-specific `OpenSim::Component`s (explained below). It also contains a few minor bugfixes, plus a variety of internal engine changes.\r\n\r\n- Editing the position of a `PhysicalOffsetFrame` that's a child of a Joint now behaves more intuitively (rotation still sucks, though)\r\n- OSC-specific experimental OpenSim components are now exposed to the user via the model editor. So, as a user, you can now (e.g.) manually add a `PointToPointEdge` to your model in order to measure the distance between two points (previously: `PointToPointEdge` was only available through the `Frame Definition` UI)\r\n\r\n> **Beware**: OSC's custom/experimental components are incompatible with OpenSim. The intention\r\n>             of this feature is to provide users with a way to test rapidly-developed OSC components\r\n>             that may, with enough interest, be upstreamed to `opensim-core`.\r\n\r\n- The available socket options when adding a new component to the model should now show all valid options, rather than just showing frames in the model (#820)\r\n- The camera's location/fov is now editable in degrees\r\n- The camera's panning behavior is better when viewing a 3D scene via a viewport with a very skewed aspect ratio (e.g. when the model visualizer is tall and narrow, or short and wide)\r\n- Updated Sphinx to version 7.2.6, and the associated sphinx-book-theme to 1.1.0, which makes the documentation look a little nicer\r\n- Internal: the engine now uses strongly-typed angles (`osc::Radians` and `osc::Degrees`) to reduce unit mismatches in the source code\r\n- Internal: the test suite now automatically exercises all available UI tabs (mesh warper, model editor, etc.) tabs to ensure they are always working\r\n- Internal: all header files are now suffixed with `.h` to match most libraries etc. (previously: `.hpp`)",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.8",
        "name": "0.5.8:  Custom components, easier PoF translation, and other fixes",
        "release_id": 142016693,
        "tag": "0.5.8",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.8",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/142016693",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/142016693",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2024-01-11T13:44:51Z",
        "date_published": "2024-01-11T15:39:09Z",
        "description": "0.5.7 is purely a bugfix release. The main fix is that the GeometryPath editor popup has now returned. It dissapeared because `opensim-core` now supports function-based muscle paths.\r\n\r\n- Fixed `PathSpring` components ignoring the scene scale factor (#816)\r\n- Fixed a bug where the property editor for a muscle's geometry path was not rendering the customized muscle path point editor popup (#815)\r\n- Fixed `PathSpring` not using it's `GeometryPath`'s color correctly in OpenSim (#818, upstream: opensim-core/#3668)\r\n- Internal: ImGui now renders its content via the oscar graphics API, rather than via its own internal OpenGL backend\r\n- Internal: oscar pure-virtual interface classes are now prefixed with `I` (e.g. `ITab`, `IPanel`, etc.)\r\n- Internal: OpenSimCreator pure-virtual interface classes are now prefixed with `I` (e.g. `IOutputExtractor`, `ISimulation`, etc.)",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.7",
        "name": "0.5.7: Fix disabled geometry pathpoint editor popup",
        "release_id": 136688072,
        "tag": "0.5.7",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.7",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/136688072",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/136688072",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2023-12-22T10:27:48Z",
        "date_published": "2023-12-23T09:34:32Z",
        "description": "Happy holidays!\r\n\r\n0.5.6 tries to make it easier to get 3D datapoints in/out of various workflows. This improves interop between mesh-based workflows (e.g. the mesh warper) and model-/scene-based workflows (osim editor, mesh importer). Alongside those changes, the mesh warping workflow was improved with better UX and more data import/export options.\r\n\r\n0.5.6 also includes QoL changes that (e.g.) make `.osim`s load faster, tooltips less annoying, and filepaths easier to copy+paste.\r\n\r\n## Highlights\r\n\r\n- Added `Tools -> Import Points` to the `osim` editor workflow\r\n- The `Import Stations from CSV` popup in the mesh importer is now more permissive in what it accepts\r\n- Fixed a bug where muscle points could not be selected via a 3D viewport if the user is rendering muscles with tendons+fibers (#706)\r\n- Fixed meshes being double-loaded, which should cause `.osim` files should load faster\r\n- Many QoL changes to the mesh warping workflow\r\n\r\nSee CHANGELOG.md for a detailed list (approx. 22 items)",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.6",
        "name": "0.5.6: CSV point import/export and mesh warper improvements",
        "release_id": 134970871,
        "tag": "0.5.6",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.6",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/134970871",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/134970871",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2023-11-21T14:00:50Z",
        "date_published": "2023-11-21T19:55:39Z",
        "description": "0.5.5 is purely a bugfix release that fixes a crash that can happen when booting OSC on MacOS (see #811, thanks @SAI-sentinal-ai for reporting it):\r\n\r\n- Fixed a crash on MacOS where a std::sort algorithm usage did not strictly comply with Compare (thanks @SAI-sentinal-ai, #811)\r\n- `osc::App` now writes the osc executable's directory and user directory to the log (handy for debugging, #811)\r\n",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.5",
        "name": "0.5.5: MacOS crash hotfix",
        "release_id": 130749512,
        "tag": "0.5.5",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.5",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/130749512",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/130749512",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2023-11-03T08:15:23Z",
        "date_published": "2023-11-03T11:20:38Z",
        "description": "0.5.4 adds support for basic shape fitting into the model editor, some nice-to-have orientation/translation actions in the mesh importer, and some bugfixes.\r\n\r\n- Stations are now selectable when using the Translate > To (select something) and Reorient > $axis > To (select something) actions in the mesh importer (thanks @emmccain-uva, #796)\r\n- The mesh importer now has an option to Reorient > $axis > Along line between (select two elements), which is sometimes useful (esp. in conjunction with importing stations, #149) for defining joint/body frames (thanks @emmccain-uva, #797)\r\n- Right-clicking a mesh in the model editor now shows an Export menu, enabling re-exporting of the mesh w.r.t. a different coordinate system (#799)\r\n- Right-clicking a mesh in the model editor now shows a Fit Analytic Geometry to This option, which will fit the chosen analytic geometry to the mesh's vertices (#798).\r\n- If a popup in the editor window throws an exception then the editor window will now try to close the popup, rather than fully erroring out to an error tab (thanks @AdrianHendrik, #800)\r\n- Fixed a bug where trying to add a ConditionalPathPoint, Marker, PathPoint, PhysicalOffsetFrame, or Station component via the Add menu would crash the tab with a frame-related error message (thanks @AdrianHendrik, #800)\r\n- Internal: the codebase now contains shape-fitting algorithms for fitting a sphere, plane, or ellipsoid analytic geometry to mesh data. The algorithms were written to closely match the shape-fitting codebase that came with \"P.Bishop et. al, How to Build a Dinosaur, doi:10.1017/pab.2020.46\" (#798)\r\n",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.4",
        "name": "0.5.4: Shape fitting and mesh importer utils",
        "release_id": 127853728,
        "tag": "0.5.4",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.4",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/127853728",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/127853728",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2023-10-06T11:16:27Z",
        "date_published": "2023-10-09T08:16:49Z",
        "description": "0.5.3 adds support for persisting 3D viewport options between boots of OSC, which is handy if you have preferred visualization options that you typically always toggle on/off. It also adds support for importing stations into the mesh importer from a CSV (`File > Import Stations from CSV` in the mesh importer workflow), which is useful for importing (parts of) a muscle path into a mesh importer scene.\r\n\r\n## Change highlights:\r\n\r\n- 3D viewport settings (e.g. muscle styling, show/hide the floor, background color) are now persisted between boots of OSC via a per-user configuration file (thanks @tgeijten, #782)\r\n- The right-click step size menu for scalar property editors now includes suggestions for masses (it assumes the property is expressed in kilograms)\r\n- Added `Import Stations from CSV` to the mesh importer's file menu, which provides a way of importing stations into the mesh importer scene from a CSV file (thanks @emmccain-uva, #149)\r\n- Hovering over a recent or example osim file in the home screen now displays the full name of the file in a tooltip (thanks @AdrianHendrik, #784)\r\n- Editors for component `double` properties (almost all scalar properties) now have `-` and `+` stepping buttons (previously: the steppers were only available for `Vec3` properties; thanks @tgeijten, #781)\r\n- The `Show`, `Show Only This`, and `Hide` buttons in the component context menu are now disabled if the clicked component, and all its children, have no `Appearance` property (#738)\r\n\r\nSee CHANGELOG.md for a full list of all changes.",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.3",
        "name": "0.5.3: Persistent viewport settings and import stations from CSV (+other changes)",
        "release_id": 124224741,
        "tag": "0.5.3",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.3",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/124224741",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/124224741",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2023-09-12T11:09:18Z",
        "date_published": "2023-09-12T15:05:26Z",
        "description": "0.5.2 adds a few nice-to-haves when editing components' positions w.r.t. other frames, or when re-expressing components in a new frame. It also addresses a few crashing bugs that were introduced during 0.5.1's quite aggressive refactor (sorry about those).\r\n\r\n# Highlights\r\n\r\n- The Reassign Socket popup now has a `Re-express $COMPONENT in chosen frame` checkbox, which users can tick to prompt OSC to automatically recalculate what the location/position/orientation properties of the component should be in the new frame, in the current scene state, such that it does not move or rotate. This is handy for (e.g.) re-socketing muscle path points onto different bodies, changing joint topologies, etc. (#326)\r\n- Property editors for Stations, PathPoints, and PhysicalOffsetFrames now also display a user-editable (parent frame) dropdown, which lets users select which frame the location/translation properties of those components are edited in (#723)\r\nSliders in the coordinate editor now look much more like \"typical\" sliders, and are now entirely disabled when locked (#36)\r\n\r\nAnd 35 other changes! See the CHANGELOG for the full list.",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.2",
        "name": "0.5.2: Easier positional editing and bugfixes",
        "release_id": 120813351,
        "tag": "0.5.2",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.2",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/120813351",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/120813351",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2023-07-27T14:28:53Z",
        "date_published": "2023-07-28T07:16:31Z",
        "description": "0.5.1 adds an \"Export Points\" tool to the osim editor and support for non-participating landmarks in the warping UI.\r\n\r\nThe exporter enables users to export any point-like quantity in an OpenSim model (e.g. muscle points, stations, markers, and frame origins) with respect to a user-chosen frame as a CSV file.\r\n\r\nThe non-participating landmark feature enables users to import point data from a CSV file as landmarks that hitch a ride through the warping kernel without participating in how the warping kernel is computed. The resulting warped points can then be re-exported as a CSV file.\r\n\r\n- Added \"Export Points\" tool, which lets users export points in a model w.r.t. some frame as a CSV (#742)\r\n- Added support for non-participating landmarks in the mesh warper (#741)\r\n- Fixed Undo/Redo hotkeys not working in the warping workflow tab (#744)\r\n- The upper input size limit on many text inputs was removed",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.1",
        "name": "0.5.1: Export Points and Non-Participating Warping Landmarks",
        "release_id": 113943701,
        "tag": "0.5.1",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.1",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/113943701",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/113943701",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2023-07-11T13:15:54Z",
        "date_published": "2023-07-11T18:07:17Z",
        "description": "0.5.0 adds support for \"workflows\", and implements two of them: frame definition and mesh warping.\r\n\r\n## Overview\r\n\r\nThe frame definition workflow makes it easier to define locations/rotations/frames on meshes according to ISB-style relationships. For example, it has support for defining landmarks, midpoints, edges between points, cross product edges, and frames that are defined w.r.t. those points/edges. This enables users to visually place frames on bone scans according to ISB rules with visual feedback and on-the-fly calculations, which should be useful to model builders.\r\n\r\nThe mesh warping workflow introduces a UI for the Thin Plate Spline (TPS) algorithm. The UI asks users to pair landmarks from two separate meshes in order to create a TPS warping kernel. The warping kernel can be then be used to warp any point in 3D space. We anticipate that this will be a useful tool for performing morphology-driven model scaling and creating blended models.\r\n\r\nThe \"workflows\" feature, including the frame definition and mesh warping workflows, are work in progress. If you think something is missing, or broken, report it on the issues page. We anticipate that interesting features from each specific workflow (e.g. the calculate feature in the frame definition UI) will gradually be ported to existing UIs (e.g. the model editor).\r\n\r\n## Other Highlights\r\n\r\n- 3D renderers are now correctly gamma-corrected, which makes the visualizations look nicer (#600)\r\n- Added support for editing int property values, which is handy for some component types (e.g. PrescribedController, #704)\r\n- Selected elements (e.g. when selecting a frame in an add component dialog) are now easier to differentiate from not-selected elements in the UI (thanks @aseth, #677)\r\n- Various internal changes were made to OSC to support generalized workflow UIs and splitting the OSC engine from OpenSimCreator (e.g. for creating other tooling UIs)\r\n\r\nSee CHANGELOG.md for a full list of changes.",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.5.0",
        "name": "0.5.0: Workflows, frame definition, and mesh warping",
        "release_id": 111835637,
        "tag": "0.5.0",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.5.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/111835637",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/111835637",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.5.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2023-04-13T10:33:15Z",
        "date_published": "2023-04-13T12:20:54Z",
        "description": "0.4.1 is a patch release that fixes some bugs that were found in 0.4.0. The only noteworthy user-facing feature is that `GeometryPath`s can now be edited, giving users a new way to define muscles and other path-based geometry (e.g. `PathSpring`).\r\n\r\nHighlights:\r\n\r\n- Added basic support for editing `GeometryPath` properties (i.e. moving/deleting/adding/editing points in paths), so that the GUI supports adding `Ligament`s and `PathSpring`s (#645, #522, #518, #30)\r\n- Fixed a segfault that would occur when adding a body with an invalid name. It now throws an exception and prints an error to the log instead (thanks @AdrianHendrik, #642)\r\n- Fixed the manipulation gizmo rotation operation being broken when rotating scene elements (mostly, when rotating PhysicalOffsetFrames - thanks @AdrianHendrik, #642\r\n- Fixed deleting a backing `osim` file while editing it via the model editor no longer causes the editor tab to close with a \"file not found\" error message (thanks @JuliaVanBeesel, #495)\r\n- ... plus 25 other changes, many of which are minor, or are internal and primarily serve the purpose of making OSC developers feel fuzzy inside (see the CHANGELOG for a full list)",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.4.1",
        "name": "0.4.1: Geometry path editing, minor bugfixes, and build improvements",
        "release_id": 99383750,
        "tag": "0.4.1",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/99383750",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/99383750",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.4.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2023-03-06T13:16:41Z",
        "date_published": "2023-03-07T05:47:31Z",
        "description": "0.4.0 focuses on improving the 3D visualizer in the model editor tab by adding things like custom visualization options, 3D manipulation gizmos, and graphical improvements. Overall, 0.4.0 contains ~50 changes over ~200 commits. See the CHANGELOG for more details.\r\n\r\nHighlights:\r\n\r\n- Added 'Lines of Action (effective)' and 'Lines of Action (anatomical)' rendering options to the model viewer\r\n  (#562). They can be seperately toggled for muscle insertion/origin (#577). Clicking a line of action selects\r\n  the associated muscle (#571). Thanks to @modenaxe for open-sourcing https://github.com/modenaxe/MuscleForceDirection\r\n- `Station`s (#85), `PathPoint`s (#85), `PhysicalOffsetFrame`s (#583), `WrapObject`s (#588), and\r\n  `ContactGeometry` (#596) can now be translated (or rotated, #584) in a model editor viewport with a\r\n  clickable gizmo\r\n- The editor and simulator screens now have toolbars at the top containing common actions (e.g. undo/redo,\r\n  save, load, scrub the simulation, etc.)\r\n- OSC's logo was updated to make it visually distinct from OpenSim, and new icons have been added for toggling\r\n  frames, markers, contact geometry, and wrap surfaces\r\n- Shadow rendering is now default-enabled (#489). The scene light's slope/height no longer tracks along with the camera, which makes the shadow angle look a little bit better (thanks @tgeijten, #549)\r\n- The \"Reload [Model]\" button now forces OSC to also reload any associated mesh files, which is handy when seperately editing mesh files in something like Maya/Blender (thanks @JuliaVanBeesel, #594)\r\n- Hotfixed a bug from OpenSim where inertia edits were not applied to the model (#597, related: opensim-core/#3395, thanks to @jesse-gilmer for spotting this :))\r\n- ... and many other changes (see the CHANGELOG)",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.4.0",
        "name": "0.4.0: More visualization options, 3D manipulators, and icons",
        "release_id": 94723184,
        "tag": "0.4.0",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/94723184",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/94723184",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamkewley",
          "type": "User"
        },
        "date_created": "2023-01-09T08:39:09Z",
        "date_published": "2023-01-09T13:06:44Z",
        "description": "0.3.2 is a patch release that contains a bunch of bug fixes, along with some minor quality-of-life improvements.\r\n\r\n0.3.1 is missing because a crash was spotted last-minute (#418). 0.3.2 fixes that bug, along with fixing other things, and includes some minor quality-of-life improvements. See the CHANGELOG for gory details.\r\n\r\nHighlights:\r\n\r\n- The add component dialogs now print addition errors inside them, rather than relegating the error message to the log\r\n- Clicking path actuators or frames in the 3D visualizer selects the actuator/frame, rather than the related geometry component\r\n- You should be able to add any type of `OpenSim` component without a crash (fingers crossed: previously, some components contained edge cases that could cause a crash)\r\n- Rendering performance has been improved by 10-30 % on typical machines\r\n- The socket assignment UI is more consistent in its behavior during erroneous assignments\r\n- Vec3 editors are color-coded\r\n- The 3D visualizer in the editor now also supports rendering shadows, which you can enable via the `options` menu. That option will be default-enabled in later releases - give it a try!\r\n- .... and a bunch of other little changes (see the CHANGELOG)",
        "html_url": "https://github.com/ComputationalBiomechanicsLab/opensim-creator/releases/tag/0.3.2",
        "name": "0.3.2: Minor updates and bugfixes",
        "release_id": 88304650,
        "tag": "0.3.2",
        "tarball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/tarball/0.3.2",
        "type": "Release",
        "url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/88304650",
        "value": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/releases/88304650",
        "zipball_url": "https://api.github.com/repos/ComputationalBiomechanicsLab/opensim-creator/zipball/0.3.2"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "name": "Sphinx",
        "type": "Software_application",
        "value": "Sphinx==6.2.1",
        "version": "==6.2.1"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/docs/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "sphinx-book-theme",
        "type": "Software_application",
        "value": "sphinx-book-theme==1.0.1",
        "version": "==1.0.1"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/docs/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jinja2",
        "type": "Software_application",
        "value": "Jinja2==3.1.3",
        "version": "==3.1.3"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/docs/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "misk",
        "type": "Software_application",
        "value": "misk>=0.7.0",
        "version": ">=0.7.0"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/tomlplusplus/tools/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "poxy",
        "type": "Software_application",
        "value": "poxy>=0.7.0",
        "version": ">=0.7.0"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/tomlplusplus/tools/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "pyyaml",
        "type": "Software_application",
        "value": "pyyaml",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/tomlplusplus/tools/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "python-dateutil",
        "type": "Software_application",
        "value": "python-dateutil",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/third_party/tomlplusplus/tools/requirements.txt",
      "technique": "code_parser"
    }
  ],
  "somef_missing_categories": [
    "run",
    "download",
    "contact",
    "usage",
    "faq",
    "support",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2025-09-19 00:42:17",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 191
      },
      "technique": "GitHub_API"
    }
  ],
  "version": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "0.6.0"
      },
      "source": "https://raw.githubusercontent.com/ComputationalBiomechanicsLab/opensim-creator/main/codemeta.json",
      "technique": "code_parser"
    }
  ]
}