{
  "application_domain": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Battery modelling"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "authors": [
    {
      "confidence": 1,
      "result": {
        "email": "Ferran.Brosa-Planella@warwick.ac.uk",
        "name": "Ferran Brosa Planella",
        "type": "Agent",
        "value": "Ferran Brosa Planella"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": null,
        "name": "Muhammed Sogut",
        "type": "Agent",
        "value": "Muhammed Sogut"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": null,
        "name": "W. Dhammika Widanage",
        "type": "Agent",
        "value": "W. Dhammika Widanage"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": null,
        "name": "Philip Grylls",
        "type": "Agent",
        "value": "Philip Grylls"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "Mathematics Institute, University of Warwick",
        "email": "Ferran.Brosa-Planella@warwick.ac.uk",
        "type": "String",
        "value": "Ferran Brosa Planella "
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "Reseach Technology Platforms (SC), University of Warwick",
        "email": "pip.grylls@warwick.ac.uk",
        "type": "String",
        "value": "Philip Grylls"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "WMG, University of Warwick",
        "email": "Dhammika.Widanalage@warwick.ac.uk",
        "type": "String",
        "value": "W Dhammika Widanage"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "WMG, University of Warwick",
        "email": "m.sogut@warwick.ac.uk",
        "type": "String",
        "value": "Muhammed Sogut"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "affiliation": "WMG, University of Warwick",
        "email": "alexandru.pascu@warwick.ac.uk",
        "type": "String",
        "value": "Alexandru Pascu"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "author": [
          {
            "family_name": "Brosa Planella",
            "given_name": "Ferran",
            "name": "Ferran Brosa Planella",
            "type": "Agent",
            "url": "https://orcid.org/0000-0001-6363-2812"
          },
          {
            "family_name": "Grylls",
            "given_name": "Philip",
            "name": "Philip Grylls",
            "type": "Agent",
            "url": "https://orcid.org/0000-0001-9677-5852"
          },
          {
            "family_name": "Widanage",
            "given_name": "W Dhammika",
            "name": "W Dhammika Widanage",
            "type": "Agent",
            "url": "https://orcid.org/0000-0003-0428-2554"
          },
          {
            "family_name": "Sogut",
            "given_name": "Muhammed",
            "name": "Muhammed Sogut",
            "type": "Agent",
            "url": "https://orcid.org/0000-0001-6934-8855"
          },
          {
            "family_name": "Pascu",
            "given_name": "Alexandru",
            "name": "Alexandru Pascu",
            "type": "Agent"
          }
        ],
        "datePublished": "2024",
        "format": "cff",
        "title": "PyBaMM Param",
        "type": "File_dump",
        "url": "https://doi.org/10.5281/zenodo.11282638",
        "value": "cff-version: 0.0.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n  - family-names: Brosa Planella\n    given-names: Ferran\n    orcid: \"https://orcid.org/0000-0001-6363-2812\"\n  - family-names: Grylls\n    given-names: Philip\n    orcid: \"https://orcid.org/0000-0001-9677-5852\"\n  - family-names: Widanage\n    given-names: W Dhammika\n    orcid: \"https://orcid.org/0000-0003-0428-2554\"\n  - family-names: Sogut\n    given-names: Muhammed\n    orcid: \"https://orcid.org/0000-0001-6934-8855\"\n  - family-names: Pascu\n    given-names: Alexandru\ntitle: \"PyBaMM Param\"\nversion: \"v0.1.1\"\nidentifiers:\n  - type: doi\n    value: 10.5281/zenodo.11282638\ndate-released: 2024-05-24"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/CITATION.cff",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/paramm-team/pybamm-param"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/paramm-team/pybamm-param"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "continuous_integration": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/.github/workflows/test_on_push.yml"
      },
      "technique": "file_exploration"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing to pybamm-param\n\nIf you'd like to contribute to pybamm-param (thanks!), please have a look at the [guidelines below](#workflow).\n\nIf you're already familiar with our workflow, maybe have a quick look at the [pre-commit checks](#pre-commit-checks) directly below.\n\n## Pre-commit checks\n\nBefore you commit any code, please perform the following checks:\n\n- [No style issues](#coding-style-guidelines): `$ flake8`\n- [All tests pass](#testing): `$ tox -e unit` (GNU/Linux and MacOS), `$ python -m tox -e windows-unit` (Windows)\n- [The documentation builds](#building-the-documentation): `$ python -m tox -e docs`\n\n## Workflow\n\nWe use [GIT](https://en.wikipedia.org/wiki/Git) and [GitHub](https://en.wikipedia.org/wiki/GitHub) to coordinate our work. When making any kind of update, we try to follow the procedure below.\n\n### A. Before you begin\n\n1. Create an [issue](https://guides.github.com/features/issues/) where new proposals can be discussed before any coding is done.\n2. Create a [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/) of this repo (ideally on your own [fork](https://help.github.com/articles/fork-a-repo/)), where all changes will be made\n3. Download the source code onto your local system, by [cloning](https://help.github.com/articles/cloning-a-repository/) the repository (or your fork of the repository).\n4. [Install](README.md/#how-to-install) pybamm-param with the developer options.\n5. [Test](#testing) if your installation worked, using the test script: `$ python run-tests.py --unit`.\n\nYou now have everything you need to start making changes!\n\n### B. Writing your code\n\n6. pybamm-param is developed in [Python](https://en.wikipedia.org/wiki/Python_(programming_language)), and makes heavy use of [NumPy](https://en.wikipedia.org/wiki/NumPy) (see also [NumPy for MatLab users](https://numpy.org/doc/stable/user/numpy-for-matlab-users.html) and [Python for R users](http://blog.hackerearth.com/how-can-r-users-learn-python-for-data-science)).\n7. Make sure to follow our [coding style guidelines](#coding-style-guidelines).\n8. Commit your changes to your branch with [useful, descriptive commit messages](https://chris.beams.io/posts/git-commit/): Remember these are publicly visible and should still make sense a few months ahead in time. While developing, you can keep using the GitHub issue you're working on as a place for discussion. [Refer to your commits](https://stackoverflow.com/questions/8910271/how-can-i-reference-a-commit-in-an-issue-comment-on-github) when discussing specific lines of code.\n9. If you want to add a dependency on another library, or re-use code you found somewhere else, have a look at [these guidelines](#dependencies-and-reusing-code).\n\n### C. Merging your changes with pybamm-param\n\n10. [Test your code!](#testing)\n11. pybamm-param will have online documentation in ReadTheDocs. To make sure any new methods or classes you added show up there, please read the [documentation](#documentation) section.\n12. If you added a major new feature, perhaps it should be showcased in an [example notebook](#example-notebooks).\n13. When you feel your code is finished, or at least warrants serious discussion, run the [pre-commit checks](#pre-commit-checks) and then create a [pull request](https://help.github.com/articles/about-pull-requests/) (PR) on [pybamm-param's GitHub page](https://github.com/paramm-team/pybamm-param).\n14. Once a PR has been created, it will be reviewed by any member of the community. Changes might be suggested which you can make by simply adding new commits to the branch. When everything's finished, someone with the right GitHub permissions will merge your changes into pybamm-param main repository.\n\nFinally, if you really, really, _really_ love developing pybamm-param, have a look at the current [project infrastructure](#infrastructure).\n\n\n## Coding style guidelines\n\npybamm-param follows the [PEP8 recommendations](https://www.python.org/dev/peps/pep-0008/) for coding style. These are very common guidelines, and community tools have been developed to check how well projects implement them.\n\n### Flake8\n\nWe use [flake8](http://flake8.pycqa.org/en/latest/) to check our PEP8 adherence. To try this on your system, navigate to the pybamm-param directory in a console and type\n\n```bash\nflake8\n```\nFlake8 is configured inside the file `tox.ini`, under the section `[flake8]`, allowing us to ignore some errors. If you think this should be added or removed, please submit an [issue](#issues)\n\nWhen you commit your changes they will be checked against flake8 automatically (see [infrastructure](#infrastructure)).\n\n\n### Black\n\nWe use [black](https://black.readthedocs.io/en/stable/) to automatically configure our code to adhere to PEP8. Black can be used in two ways:\n\n1. Command line: navigate to the pybamm-param directory in a console and type\n\n```bash\nblack {source_file_or_directory}\n```\n\n2. Editor: black can be [configured](https://test-black.readthedocs.io/en/latest/editor_integration.html) to automatically reformat a python script each time the script is saved in an editor.\n\nIf you want to use black in your editor, you may need to change the max line length in your editor settings.\n\nEven when code has been formatted by black, you should still make sure that it adheres to the PEP8 standard set by [Flake8](#flake8).\n\n### Naming\n\nNaming is hard. In general, we aim for descriptive class, method, and argument names. Avoid abbreviations when possible without making names overly long, so `mean` is better than `mu`, but a class name like `MyClass` is fine.\n\nClass names are CamelCase, and start with an upper case letter, for example `MyOtherClass`. Method and variable names are lower case, and use underscores for word separation, for example `x` or `iteration_count`.\n\n\n## Dependencies and reusing code\n\nWhile it's a bad idea for developers to \"reinvent the wheel\", it's important for users to get a _reasonably sized download and an easy install_. In addition, external libraries can sometimes cease to be supported, and when they contain bugs it might take a while before fixes become available as automatic downloads to pybamm-param users.\nFor these reasons, all dependencies in pybamm-param should be thought about carefully, and discussed on GitHub.\n\nDirect inclusion of code from other packages is possible, as long as their license permits it and is compatible with ours, but again should be considered carefully and discussed in the group. Snippets from blogs and [stackoverflow](https://stackoverflow.com/) can often be included without attribution, but if they solve a particularly nasty problem (or are very hard to read) it's often a good idea to attribute (and document) them, by making a comment with a link in the source code.\n\n### Matplotlib\n\nWe use Matplotlib in pybamm-param, but with two caveats:\n\nFirst, Matplotlib should only be used in plotting methods, and these should _never_ be called by other pybamm-param methods. So users who don't like Matplotlib will not be forced to use it in any way. Use in notebooks is OK and encouraged.\n\nSecond, Matplotlib should never be imported at the module level, but always inside methods. For example:\n\n```\ndef plot_great_things(self, x, y, z):\n    import matplotlib.pyplot as plt\n    ...\n```\n\nThis allows people to (1) use pybamm-param without ever importing Matplotlib and (2) configure Matplotlib's back-end in their scripts, which _must_ be done before e.g. `pyplot` is first imported.\n\n\n## Testing\n\nAll code requires testing. We use the [unittest](https://docs.python.org/3.3/library/unittest.html) package for our tests. (These tests typically just check that the code runs without error, and so, are more _debugging_ than _testing_ in a strict sense. Nevertheless, they are very useful to have!)\n\nIf you have tox installed, to run unit tests, type\n\n```bash\ntox -e unit\n```\nelse, type\n```bash\npython run-tests.py --unit\n```\n\n### Writing tests\n\nEvery new feature should have its own test. To create ones, have a look at the `test` directory and see if there's a test for a similar method. Copy-pasting this is a good way to start.\n\nNext, add some simple (and speedy!) tests of your main features. If these run without exceptions that's a good start! Next, check the output of your methods using any of these [assert methods](https://docs.python.org/3.3/library/unittest.html#assert-methods).\n\n### Running more tests\n\nThe tests are divided into `unit` tests, whose aim is to check individual bits of code (e.g. discretising a gradient operator, or solving a simple ODE), and `integration` tests, which check how parts of the program interact as a whole (e.g. solving a full model).\nIf you want to check integration tests as well as unit tests, type\n\n```bash\ntox -e tests\n```\n\nWhen you commit anything to pybamm-param, these checks will also be run automatically (see [infrastructure](#infrastructure)).\n\n### Testing notebooks\n\nTo test all example scripts and notebooks, type\n\n```bash\ntox -e examples # (GNU/Linux and MacOS)\n#\npython -m tox -e windows-examples # (Windows)\n```\n\nIf notebooks fail because of changes to pybamm-param, it can be a bit of a hassle to debug. In these cases, you can create a temporary export of a notebook's Python content using\n\n```bash\npython run-tests.py --debook examples/notebooks/notebook-name.ipynb script.py\n```\n\n### Debugging\n\nOften, the code you write won't pass the tests straight away, at which stage it will become necessary to debug.\nThe key to successful debugging is to isolate the problem by finding the smallest possible example that causes the bug.\nIn practice, there are a few tricks to help you to do this, which we give below.\nOnce you've isolated the issue, it's a good idea to add a unit test that replicates this issue, so that you can easily check whether it's been fixed, and make sure that it's easily picked up if it crops up again.\nThis also means that, if you can't fix the bug yourself, it will be much easier to ask for help (by opening a [bug-report issue](https://github.com/paramm-team/pybamm-param/issues/new)).\n\n1. Run individual test scripts instead of the whole test suite:\n```bash\npython tests/unit/path/to/test\n```\nYou can also run an individual test from a particular script, e.g.\n```bash\npython tests/unit/test_quick_plot.py TestQuickPlot.test_failure\n```\nIf you want to run several, but not all, the tests from a script, you can restrict which tests are run from a particular script by using the skipping decorator:\n```python\n@unittest.skip(\"\")\ndef test_bit_of_code(self):\n    ...\n```\nor by just commenting out all the tests you don't want to run\n2. Set break points, either in your IDE or using the python debugging module. To use the latter, add the following line where you want to set the break point\n```python\nimport ipdb; ipdb.set_trace()\n```\nThis will start the [Python interactive debugger](https://gist.github.com/mono0926/6326015). If you want to be able to use magic commands from `ipython`, such as `%timeit`, then set\n```python\nfrom IPython import embed; embed(); import ipdb; ipdb.set_trace()\n```\nat the break point instead.\nFiguring out where to start the debugger is the real challenge. Some good ways to set debugging break points are:\n  a. Try-except blocks. Suppose the line `do_something_complicated()` is raising a `ValueError`. Then you can put a try-except block around that line as:\n  ```python\n  try:\n      do_something_complicated()\n  except ValueError:\n      import ipdb; ipdb.set_trace()\n  ```\n  This will start the debugger at the point where the `ValueError` was raised, and allow you to investigate further. Sometimes, it is more informative to put the try-except block further up the call stack than exactly where the error is raised.\n  b. Warnings. If functions are raising warnings instead of errors, it can be hard to pinpoint where this is coming from. Here, you can use the `warnings` module to convert warnings to errors:\n  ```python\n  import warnings\n  warnings.simplefilter(\"error\")\n  ```\n  Then you can use a try-except block, as in a., but with, for example, `RuntimeWarning` instead of `ValueError`.\n4. To get more information about what is going on under the hood, and hence understand what is causing the bug, you can set the [logging](https://realpython.com/python-logging/) level to `DEBUG` by adding the following line to your test or script:\n```python3\npybamm.set_logging_level(\"DEBUG\")\n```\n\n### Profiling\n\nSometimes, a bit of code will take much longer than you expect to run. In this case, you can set\n```python\nfrom IPython import embed; embed(); import ipdb; ipdb.set_trace()\n```\nas above, and then use some of the profiling tools. In order of increasing detail:\n1. Simple timer. In ipython, the command\n```\n%time command_to_time()\n```\ntells you how long the line `command_to_time()` takes. You can use `%timeit` instead to run the command several times and obtain more accurate timings.\n2. Simple profiler. Using `%prun` instead of `%time` will give a brief profiling report\n3. Detailed profiler. You can install the detailed profiler `snakeviz` through pip:\n```bash\npip install snakeviz\n```\nand then, in ipython, run\n```\n%load_ext snakeviz\n%snakeviz command_to_time()\n```\nThis will open a window in your browser with detailed profiling information.\n\n## Documentation\n\npybamm-param is documented in several ways.\n\nFirst and foremost, every method and every class should have a [docstring](https://www.python.org/dev/peps/pep-0257/) that describes in plain terms what it does, and what the expected input and output is.\n\nThese docstrings can be fairly simple, but can also make use of [reStructuredText](http://docutils.sourceforge.net/docs/user/rst/quickref.html), a markup language designed specifically for writing [technical documentation](https://en.wikipedia.org/wiki/ReStructuredText). For example, you can link to other classes and methods by writing ```:class:`pbparam.OptimisationProblem` ``` and  ```:meth:`run()` ```.\n\nIn addition, we write a (very) small bit of documentation in separate reStructuredText files in the `docs` directory. Most of what these files do is simply import docstrings from the source code. But they also do things like add tables and indexes. If you've added a new class to a module, search the `docs` directory for that module's `.rst` file and add your class (in alphabetical order) to its index. If you've added a whole new module, copy-paste another module's file and add a link to your new file in the appropriate `index.rst` file.\n\nUsing [Sphinx](http://www.sphinx-doc.org/en/stable/) the documentation in `docs` can be converted to HTML, PDF, and other formats. In particular, we use it to generate the documentation on http://pybamm-param.readthedocs.io/\n\n### Building the documentation\n\nTo test and debug the documentation, it's best to build it locally. To do this, navigate to your pybamm-param directory in a console, and then type:\n\n```\npython -m tox -e docs\n```\nAnd then visit the webpage served at http://127.0.0.1:8000. Each time a change to the documentation source is detected, the HTML is rebuilt and the browser automatically reloaded.\n\n### Example notebooks\n\nMajor pybamm-param features are showcased in [Jupyter notebooks](https://jupyter.org/) stored in the [examples directory](examples/notebooks). Which features are \"major\" is of course wholly subjective, so please discuss on GitHub first!\n\nAll example notebooks should be listed in [examples/README.md](https://github.com/paramm-team/pybamm-param/blob/main/examples/notebooks/README.md). Please follow the (naming and writing) style of existing notebooks where possible.\n\nAll the notebooks are tested daily.\n\n## Infrastructure\n\n### Setuptools\n\nInstallation of pybamm-param _and dependencies_ is handled via [setuptools](http://setuptools.readthedocs.io/)\n\nConfiguration files:\n\n```\nsetup.py\n```\n\n### Continuous Integration using GitHub actions\n\nEach change pushed to the pybamm-param GitHub repository will trigger the test and benchmark suites to be run, using [GitHub actions](https://github.com/features/actions).\n\nTests are run for different operating systems, and for all python versions officially supported by pybamm-param. If you opened a Pull Request, feedback is directly available on the corresponding page. If all tests pass, a green tick will be displayed next to the corresponding test run. If one or more test(s) fail, a red cross will be displayed instead.\n\nIn all cases, more details can be obtained by clicking on a specific run.\n\nConfiguration files for various GitHub actions workflow can be found in `.github/worklfows`.\n\n### Codecov\n\nCode coverage (how much of our code is actually seen by the (linux) unit tests) is tested using [Codecov](https://docs.codecov.io/), a report is visible on https://codecov.io/gh/paramm-team/pybamm-param.\n\nConfiguration files:\n\n```\ntox.ini\n```\n\n### Read the Docs\n\nDocumentation is built using https://readthedocs.org/ and published on http://pybamm-param.readthedocs.io/.\n\n### Google Colab\n\nEditable notebooks are made available using [Google Colab](https://colab.research.google.com/notebooks/intro.ipynb) following [this link](https://colab.research.google.com/github/paramm-team/pybamm-param/blob/main/).\n\n### GitHub\n\nGitHub does some magic with particular filenames. In particular:\n\n- The first page people see when they go to [our GitHub page](https://github.com/paramm-team/pybamm-param) displays the contents of [README.md](README.md), which is written in the [Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) format. Some guidelines can be found [here](https://help.github.com/articles/about-readmes/).\n- The license for using pybamm-param is stored in [LICENSE](LICENSE), and [automatically](https://help.github.com/articles/adding-a-license-to-a-repository/) linked to by GitHub.\n- This file, [CONTRIBUTING.md](CONTRIBUTING.md) is recognised as the contribution guidelines and a link is [automatically](https://github.com/blog/1184-contributing-guidelines) displayed when new issues or pull requests are created.\n\n## Acknowledgements\n\nThis CONTRIBUTING.md file, along with large sections of the code infrastructure,\nwas copied from the excellent [PyBaMM GitHub repo](https://github.com/pybamm-team/PyBaMM), which in turn was copied from the excellent [Pints GitHub repo](https://github.com/pints-team/pints)\n"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/CONTRIBUTING.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "\ud83d\udee0\ufe0f Contributing to pybamm-param",
        "parent_header": [
          "pybamm-param: PyBaMM Parameter Optimization Tool"
        ],
        "type": "Text_excerpt",
        "value": "If you'd like to help us develop pybamm-param by adding new methods, writing documentation, or fixing embarrassing bugs, please have a look at these [guidelines](https://github.com/paramm-team/pybamm-param/blob/main/CONTRIBUTING.md) first.\n"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/README.md",
      "technique": "header_analysis"
    }
  ],
  "contributors": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Active",
        "parent_header": [
          "pybamm-param: PyBaMM Parameter Optimization Tool",
          "FAIRS",
          "Contributors"
        ],
        "type": "Text_excerpt",
        "value": "- [Ferran Brosa Planella](https://github.com/brosaplanella)\n- [Philip John Grylls](https://github.com/pipgrylls)\n"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Inactive or past",
        "parent_header": [
          "pybamm-param: PyBaMM Parameter Optimization Tool",
          "FAIRS",
          "Contributors"
        ],
        "type": "Text_excerpt",
        "value": "- [Dhammika Widanalage](https://github.com/WDWidanage)\n- [Muhammed Nedim Sogut](https://github.com/muhammedsogut)\n- [Alexandru Pascu](https://github.com/AlexandruPascu)\n"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-01-24T11:54:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2025-09-17T12:57:24Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2024-03-01"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Parameter optimisation for PyBaMM."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A package for optimising parameters in PyBaMM. Under development."
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pybamm-param is a tool to fit PyBaMM models to experimental data in order to determine the model parameter values. pybamm-param provides helper classes to handle the most common parameterisation problems, and allows the users to easily mix combine cost functions and optimisers to suit their needs."
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 0.9348767200714379,
      "result": {
        "original_header": "pybamm-param: PyBaMM Parameter Optimization Tool",
        "type": "Text_excerpt",
        "value": "> [!WARNING]  \n> This package is still under development and significant API changes might take please in the upcoming releases. \npybamm-param is a tool to fit [PyBaMM](https://www.pybamm.org) models to experimental data in order to determine the model parameter values. pybamm-param provides helper classes to handle the most common parameterisation problems, and allows the users to easily mix combine cost functions and optimisers to suit their needs. Examples on how to run this package can be found in the [examples folder](./examples)\n \n"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9441903474848943,
      "result": {
        "original_header": "requirements.txt",
        "type": "Text_excerpt",
        "value": "This is not intended for modification or use installing dependencies, it is a result of a git runner to ensure full package information is included on all pushes. Strict requirements are found in pyproject.toml\n \n"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8096586771694894,
      "result": {
        "original_header": "FAIRS",
        "type": "Text_excerpt",
        "value": "We are working towards conformity with the FAIRS software standards for research software.\nThe following items should help detail contributions to and ways to work with this software:\n \n"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/README.md",
      "technique": "supervised_classification"
    }
  ],
  "development_status": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "wip"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://pybamm-param.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/paramm-team/pybamm-param/releases"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/paramm-team/pybamm-param/archive/refs/tags/v0.1.tar.gz"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/examples/notebooks/SPM_GITT.ipynb"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/examples/notebooks/SPM_GITT.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/examples/notebooks/datafit_single_variable.ipynb"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/examples/notebooks/datafit_single_variable.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/examples/notebooks/GITT_loop.ipynb"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/examples/notebooks/GITT_loop.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/examples/notebooks/datafit_multivariable.ipynb"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/examples/notebooks/datafit_multivariable.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/examples/notebooks/using_class_templates.ipynb"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/examples/notebooks/using_class_templates.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/examples/notebooks/gitt.ipynb"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/examples/notebooks/gitt.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/examples/notebooks/ocp_balance.ipynb"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/examples/notebooks/ocp_balance.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/paramm-team/pybamm-param/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "paramm-team/pybamm-param"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pybamm-param: PyBaMM Parameter Optimization Tool"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "pyproject.toml",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/pyproject.toml"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/pyproject.toml",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "requirements.txt",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "file_exploration"
    }
  ],
  "has_package_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "pyproject.toml"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/pyproject.toml",
      "technique": "code_parser"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": " DOI: 10.5281/zenodo.11282637"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Using pip",
        "parent_header": [
          "pybamm-param: PyBaMM Parameter Optimization Tool",
          "\ud83d\ude80 Installing pybamm-param"
        ],
        "type": "Text_excerpt",
        "value": "The recommended way to install pybamm-param is by installing the latest release from PyPI. This can be done running\n\n```bash\npip install pbparam\n```\n\nWe strongly recommend using virtual environments, see more detailed instructions below (steps 1 and 2).\n"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install from source",
        "parent_header": [
          "pybamm-param: PyBaMM Parameter Optimization Tool",
          "\ud83d\ude80 Installing pybamm-param"
        ],
        "type": "Text_excerpt",
        "value": "Another option is to install from source. This is not recommended, unless you want to make edits to the code.\n\nThe first step is to install `virtualenv` in order to create virtual environments\n\n```bash\npip install virtualenv\n```\n\nThe module dependencies are listed in `pyproject.toml`, the dependancies which are non optional which are installed with the package.\n\nThe optional dependancies are split into `dev` and `docs`. `dev` are used for testing and linting, `docs` are used for building the sphinx documentation.\n"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Linux &amp; MacOS",
        "parent_header": [
          "pybamm-param: PyBaMM Parameter Optimization Tool",
          "\ud83d\ude80 Installing pybamm-param",
          "Install from source"
        ],
        "type": "Text_excerpt",
        "value": "1. Create a virtual environment (this is strongly recommended to avoid clashes with the dependencies)\n\n    ```bash\n    virtualenv --python=\"<path to python 3.11>\" env\n    ```\n\n2. Activate the virtual environment\n\n    ```bash\n    source env/bin/activate\n    ```\n\n    The virtual environment can later be deactivated (if needed) by running\n\n    ```bash\n    deactivate\n    ```\n\n3. Install packages into the virtual envronment\n\n    ```bash\n    pip install -e ./[dev,docs]\n    ```\n"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Windows",
        "parent_header": [
          "pybamm-param: PyBaMM Parameter Optimization Tool",
          "\ud83d\ude80 Installing pybamm-param",
          "Install from source"
        ],
        "type": "Text_excerpt",
        "value": "1. Create a virtual environment (this is strongly recommended to avoid clashes with the dependencies)\n\n    ```bash\n    python -m virtualenv env\n    ```\n\n2. Activate the virtual environment\n\n    ```bash\n    env\\Scripts\\activate.bat\n    ```\n\n    The virtual environment can later be deactivated (if needed) by running\n\n    ```bash\n    deactivate\n    ```\n\n3. Install package from Github\n\n    ```bash\n    pip install -e .\\\\[dev,docs]\n    ```\n"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/paramm-team/pybamm-param/issues"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/paramm-team/pybamm-param/issues"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": [
          "parameter estimation",
          "battery modelling",
          "continuum models",
          "Doyle-Fuller-Newman model",
          "Single Particle Model",
          "lithium-ion batteries"
        ]
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "BSD 2-Clause",
        "spdx_id": "BSD-2-Clause",
        "type": "File_dump",
        "value": "Copyright (c) 2022, the XXXXXX team.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "License",
        "value": "BSD-3-Clause"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/https://spdx.org/licenses/BSD-3-Clause",
        "spdx_id": "https://spdx.org/licenses/BSD-3-Clause",
        "type": "License",
        "value": "https://spdx.org/licenses/BSD-3-Clause"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pybamm-param"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PyBaMM Param"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "paramm-team"
      },
      "technique": "GitHub_API"
    }
  ],
  "package_id": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pbparam"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/pyproject.toml",
      "technique": "code_parser"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 88478,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 2811,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python3",
        "type": "Programming_language",
        "value": "Python3",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "PipGrylls",
          "type": "User"
        },
        "date_created": "2024-05-24T13:12:23Z",
        "date_published": "2024-05-24T14:21:21Z",
        "description": "No updates fixes yanked scipy version",
        "html_url": "https://github.com/paramm-team/pybamm-param/releases/tag/v0.1.1",
        "name": "v0.1.1",
        "release_id": 157360941,
        "tag": "v0.1.1",
        "tarball_url": "https://api.github.com/repos/paramm-team/pybamm-param/tarball/v0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/paramm-team/pybamm-param/releases/157360941",
        "value": "https://api.github.com/repos/paramm-team/pybamm-param/releases/157360941",
        "zipball_url": "https://api.github.com/repos/paramm-team/pybamm-param/zipball/v0.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brosaplanella",
          "type": "User"
        },
        "date_created": "2024-03-01T08:51:15Z",
        "date_published": "2024-03-01T08:53:58Z",
        "description": "First release of pybamm-param, containing the following features:\r\n\r\n## Optimisation problems\r\n- Fit PyBaMM simulation to data (DataFit)\r\n- Balance OCP for half cells (OCPBalance)\r\n- Galvanostatic Intermittent Titration Technique (GITT)\r\n\r\n## Optimisers\r\n- SciPy Minimize (ScipyMinimize)\r\n- SciPy Differential Evolution (ScipyDifferentialEvolution)\r\n\r\n## Cost Functions\r\n- Root Mean Square Error (RMSE)\r\n- Maximum Likelihood Estimation (MLE)",
        "html_url": "https://github.com/paramm-team/pybamm-param/releases/tag/v0.1",
        "name": "v0.1",
        "release_id": 144331119,
        "tag": "v0.1",
        "tarball_url": "https://api.github.com/repos/paramm-team/pybamm-param/tarball/v0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/paramm-team/pybamm-param/releases/144331119",
        "value": "https://api.github.com/repos/paramm-team/pybamm-param/releases/144331119",
        "zipball_url": "https://api.github.com/repos/paramm-team/pybamm-param/zipball/v0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "PipGrylls",
          "type": "User"
        },
        "date_created": "2024-02-19T14:48:57Z",
        "date_published": "2024-02-19T15:37:35Z",
        "description": "0th release to add a tag for the action to use",
        "html_url": "https://github.com/paramm-team/pybamm-param/releases/tag/v0.0",
        "name": "pre-release",
        "release_id": 142617127,
        "tag": "v0.0",
        "tarball_url": "https://api.github.com/repos/paramm-team/pybamm-param/tarball/v0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/paramm-team/pybamm-param/releases/142617127",
        "value": "https://api.github.com/repos/paramm-team/pybamm-param/releases/142617127",
        "zipball_url": "https://api.github.com/repos/paramm-team/pybamm-param/zipball/v0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "name": "matplotlib",
        "type": "Software_application",
        "value": "matplotlib>=3.7",
        "version": ">=3.7"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "scipy",
        "type": "Software_application",
        "value": "scipy>=1.10.1",
        "version": ">=1.10.1"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "pybamm",
        "type": "Software_application",
        "value": "pybamm>=23.1",
        "version": ">=23.1"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "hatchling",
        "type": "Software_application",
        "value": "hatchling>=1.9.0",
        "version": ">=1.9.0"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "anytree",
        "type": "Software_application",
        "value": "anytree==2.12.1",
        "version": "==2.12.1"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "argcomplete",
        "type": "Software_application",
        "value": "argcomplete==3.4.0",
        "version": "==3.4.0"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "casadi",
        "type": "Software_application",
        "value": "casadi==3.6.5",
        "version": "==3.6.5"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "colorlog",
        "type": "Software_application",
        "value": "colorlog==6.8.2",
        "version": "==6.8.2"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "contourpy",
        "type": "Software_application",
        "value": "contourpy==1.2.1",
        "version": "==1.2.1"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "cycler",
        "type": "Software_application",
        "value": "cycler==0.12.1",
        "version": "==0.12.1"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "distlib",
        "type": "Software_application",
        "value": "distlib==0.3.8",
        "version": "==0.3.8"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "filelock",
        "type": "Software_application",
        "value": "filelock==3.15.4",
        "version": "==3.15.4"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "fonttools",
        "type": "Software_application",
        "value": "fonttools==4.53.0",
        "version": "==4.53.0"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "kiwisolver",
        "type": "Software_application",
        "value": "kiwisolver==1.4.5",
        "version": "==1.4.5"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "matplotlib",
        "type": "Software_application",
        "value": "matplotlib==3.9.1",
        "version": "==3.9.1"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "nox",
        "type": "Software_application",
        "value": "nox==2024.4.15",
        "version": "==2024.4.15"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "numpy",
        "type": "Software_application",
        "value": "numpy==2.0.0",
        "version": "==2.0.0"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "packaging",
        "type": "Software_application",
        "value": "packaging==24.1",
        "version": "==24.1"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "pandas",
        "type": "Software_application",
        "value": "pandas==2.2.2",
        "version": "==2.2.2"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "pbparam @ file:///home/runner/work/pybamm-param/pybamm-param",
        "type": "Software_application",
        "value": "pbparam @ file:///home/runner/work/pybamm-param/pybamm-param",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "pillow",
        "type": "Software_application",
        "value": "pillow==10.4.0",
        "version": "==10.4.0"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "platformdirs",
        "type": "Software_application",
        "value": "platformdirs==4.2.2",
        "version": "==4.2.2"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "pybamm",
        "type": "Software_application",
        "value": "pybamm==24.1",
        "version": "==24.1"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "pyparsing",
        "type": "Software_application",
        "value": "pyparsing==3.1.2",
        "version": "==3.1.2"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "python-dateutil",
        "type": "Software_application",
        "value": "python-dateutil==2.9.0.post0",
        "version": "==2.9.0.post0"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "pytz",
        "type": "Software_application",
        "value": "pytz==2024.1",
        "version": "==2024.1"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "scipy",
        "type": "Software_application",
        "value": "scipy==1.14.0",
        "version": "==1.14.0"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "six",
        "type": "Software_application",
        "value": "six==1.16.0",
        "version": "==1.16.0"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "tzdata",
        "type": "Software_application",
        "value": "tzdata==2024.1",
        "version": "==2024.1"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "virtualenv",
        "type": "Software_application",
        "value": "virtualenv==20.26.3",
        "version": "==20.26.3"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "xarray",
        "type": "Software_application",
        "value": "xarray==2024.6.0",
        "version": "==2024.6.0"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/requirements.txt",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "PyBaMM",
        "type": "Software_application",
        "value": "PyBaMM",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "usage",
    "faq",
    "support"
  ],
  "somef_provenance": {
    "date": "2025-09-19 00:48:24",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 44
      },
      "technique": "GitHub_API"
    }
  ],
  "version": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "v0.1"
      },
      "source": "https://raw.githubusercontent.com/paramm-team/pybamm-param/develop/codemeta.json",
      "technique": "code_parser"
    }
  ]
}