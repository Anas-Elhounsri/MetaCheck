{
  "application_domain": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Neuroscience"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "authors": [
    {
      "confidence": 1,
      "result": {
        "email": "alexandre.gramfort@inria.fr",
        "name": "Alexandre Gramfort",
        "type": "Agent",
        "value": "Alexandre Gramfort"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "larson.eric.d@gmail.com",
        "type": "String",
        "value": "Eric Larson"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "alexandre.gramfort@inria.fr",
        "type": "String",
        "value": "Alexandre Gramfort"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "denis.engemann@gmail.com",
        "type": "String",
        "value": "Denis A Engemann"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "jaeilepp@gmail.com",
        "type": "String",
        "value": "Jaakko Leppakangas"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "christianmbrodbeck@gmail.com",
        "type": "String",
        "value": "Christian Brodbeck"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "mainakjas@gmail.com",
        "type": "String",
        "value": "Mainak Jas"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "teon.brooks@gmail.com",
        "type": "String",
        "value": "Teon L Brooks"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "jona.sassenhagen@gmail.com",
        "type": "String",
        "value": "Jona Sassenhagen"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "dan@mccloy.info",
        "type": "String",
        "value": "Daniel McCloy"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "mluessi@nmr.mgh.harvard.edu",
        "type": "String",
        "value": "Martin Luessi"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "jeanremi.king+github@gmail.com",
        "type": "String",
        "value": "Jean-Remi King"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "richard.hoechenberger@gmail.com",
        "type": "String",
        "value": "Richard H\u00f6chenberger"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "roman.goj@gmail.com",
        "type": "String",
        "value": "Roman Goj"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "guillaume.favelier@gmail.com",
        "type": "String",
        "value": "Guillaume Favelier"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "clemens.brunner@gmail.com",
        "type": "String",
        "value": "Clemens Brunner"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "w.m.vanvliet@gmail.com",
        "type": "String",
        "value": "Marijn van Vliet"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "wronk.mark@gmail.com",
        "type": "String",
        "value": "Mark Wronkiewicz"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "aprockhill206@gmail.com",
        "type": "String",
        "value": "Alex Rockhill"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "choldgraf@gmail.com",
        "type": "String",
        "value": "Chris Holdgraf"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "mailsik@gmail.com",
        "type": "String",
        "value": "Joan Massich"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "yousra.bekhti@gmail.com",
        "type": "String",
        "value": "Yousra Bekhti"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "mathieu.scheltienne@gmail.com",
        "type": "String",
        "value": "Mathieu Scheltienne"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "stefan.appelhoff@mailbox.org",
        "type": "String",
        "value": "Stefan Appelhoff"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "leggitta3@gmail.com",
        "type": "String",
        "value": "Alan Leggitt"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "andrew.r.dykstra@gmail.com",
        "type": "String",
        "value": "Andrew Dykstra"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "code@robertluke.net",
        "type": "String",
        "value": "Rob Luke"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "romain.trachel@inria.fr",
        "type": "String",
        "value": "Romain Trachel"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "desantis.lnz@gmail.com",
        "type": "String",
        "value": "Lorenzo De Santis"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "asishrocks95@gmail.com",
        "type": "String",
        "value": "Asish Panda"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "mmagnuski@swps.edu.pl",
        "type": "String",
        "value": "Miko\u0142aj Magnuski"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "britta.wstnr@gmail.com",
        "type": "String",
        "value": "Britta Westner"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "dgwakeman@gmail.com",
        "type": "String",
        "value": "Dan G Wakeman"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "daniel.strohmeier@googlemail.com",
        "type": "String",
        "value": "Daniel Strohmeier"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "hari@nmr.mgh.harvard.edu",
        "type": "String",
        "value": "Hari Bharadwaj"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "tal.linzen@gmail.com",
        "type": "String",
        "value": "Tal Linzen"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "alexandre.barachant@gmail.com",
        "type": "String",
        "value": "Alexandre Barachant"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "emilyr@nmr.mgh.harvard.edu",
        "type": "String",
        "value": "Emily Ruzich"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "bailey.cj@gmail.com",
        "type": "String",
        "value": "Christopher J Bailey"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "adam2392@gmail.com",
        "type": "String",
        "value": "Adam Li"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "clement.moutard@gmail.com",
        "type": "String",
        "value": "Cl\u00e9ment Moutard"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "luke.bloy@gmail.com",
        "type": "String",
        "value": "Luke Bloy"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "federaimondo@gmail.com",
        "type": "String",
        "value": "Fede Raimondo"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "jnu@iki.fi",
        "type": "String",
        "value": "Jussi Nurminen"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "flKazemakase@gmail.com",
        "type": "String",
        "value": "Martin Billinger"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "montoya.jair.m@gmail.com",
        "type": "String",
        "value": "Jair Montoya"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "mmwoodman@gmail.com",
        "type": "String",
        "value": "Marmaduke Woodman"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "dlsrnsladlek@naver.com",
        "type": "String",
        "value": "Ingoo Lee"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "dev@mgschulz.de",
        "type": "String",
        "value": "Martin Schulz"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Scott Huberty"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "nfoti01@gmail.com",
        "type": "String",
        "value": "Nick Foti"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "cnangini@gmail.com",
        "type": "String",
        "value": "Cathy Nangini"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "joialanisson@gmail.com",
        "type": "String",
        "value": "Jos\u00e9 C Garc\u00eda Alanis"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Dimitri Papadopoulos Orfanos"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "olaf.hauk@mrc-cbu.cam.ac.uk",
        "type": "String",
        "value": "Olaf Hauk"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "ross.maddox@rochester.edu",
        "type": "String",
        "value": "Ross Maddox"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "aestrivex@gmail.com",
        "type": "String",
        "value": "Roan LaPlante"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "ashdrew@uw.edu",
        "type": "String",
        "value": "Ashley Drew"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "chdinh@nmr.mgh.harvard.edu",
        "type": "String",
        "value": "Christoph Dinh"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "deep@introspection.eu",
        "type": "String",
        "value": "Guillaume Dumas"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "martin.billinger@tugraz.at",
        "type": "String",
        "value": " Martin"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "johann.benerradi@gmail.com",
        "type": "String",
        "value": "Johann Benerradi"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "thomas.hartmann@th-ht.de",
        "type": "String",
        "value": "Thomas Hartmann"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "eduardxort@gmail.com",
        "type": "String",
        "value": "Eduard Ort"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "flkazemakase@gmail.com",
        "type": "String",
        "value": "Martin Billinger"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "paul@ppasler.de",
        "type": "String",
        "value": "Paul Pasler"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "stefan.repplinger@posteo.net",
        "type": "String",
        "value": "Stefan Repplinger"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "alxanderr@gmail.com",
        "type": "String",
        "value": "Alexander Rudiuk"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "anaradanovica@gmail.com",
        "type": "String",
        "value": "Ana Radanovic"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "bburan@galenea.com",
        "type": "String",
        "value": "Brad Buran"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "mathurin.massias@gmail.com",
        "type": "String",
        "value": "Mathurin Massias"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "msh@nmr.mgh.harvard.edu",
        "type": "String",
        "value": "Matti H\u00e4m\u00e4l\u00e4inen"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "pravsripad@gmail.com",
        "type": "String",
        "value": "Praveen Sripad"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "vagechirkov@gmail.com",
        "type": "String",
        "value": "Valerii Chirkov"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "christopherrmullins@gmail.com",
        "type": "String",
        "value": "Christopher Mullins"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "gamaz3ps@gmail.com",
        "type": "String",
        "value": "F\u00e9lix Raimundo"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "Woessner.jacob@gmail.com",
        "type": "String",
        "value": "Jacob Woessner"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "rcmdnk@gmail.com",
        "type": "String",
        "value": "Michiru Kaneda"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "phillip.alday@mpi.nl",
        "type": "String",
        "value": "Phillip Alday"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "ramsbam@gmail.com",
        "type": "String",
        "value": "Ram Pari"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "simon@simonster.com",
        "type": "String",
        "value": "Simon Kornblith"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "debian@onerussian.com",
        "type": "String",
        "value": "Yaroslav Halchenko"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "yuhanluo1994@gmail.com",
        "type": "String",
        "value": "Yu-Han Luo"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "agramfort@fb.com",
        "type": "String",
        "value": "Alexandre Gramfort"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "jeythekey@tutanota.com",
        "type": "String",
        "value": "Johannes Kasper"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "kd889@nyu.edu",
        "type": "String",
        "value": "Keith Doelling"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "mje.mads@gmail.com",
        "type": "String",
        "value": "Mads Jensen"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "tanaygahlot@gmail.com",
        "type": "String",
        "value": "Tanay Gahlot"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "adonay.s.nunes@gmail.com",
        "type": "String",
        "value": "Adonay Nunes"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Dirk G\u00fctlin"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "erkkahe@gmail.com",
        "type": "String",
        "value": "Erkka Heinila"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "kristijan.armeni@gmail.com",
        "type": "String",
        "value": "Kristijan Armeni"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "kjs@llama",
        "type": "String",
        "value": " kjs"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "alejandro.weinstein@gmail.com",
        "type": "String",
        "value": "Alejandro Weinstein"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "camilo@neurostat.mit.edu",
        "type": "String",
        "value": "Camilo Lamus"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Catalina Mar\u00eda Galv\u00e1n"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "cmmoenne@gmail.com",
        "type": "String",
        "value": "Crist\u00f3bal Mo\u00ebnne-Loccoz"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "dm.altukhov@ya.ru",
        "type": "String",
        "value": "Dmitrii Altukhov"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "nordme@uw.edu",
        "type": "String",
        "value": "Erica Peterson"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "jevri.hanna@gmail.com",
        "type": "String",
        "value": "Jevri Hanna"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "jon.houck@gmail.com",
        "type": "String",
        "value": "Jon Houck"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "neklein@andrew.cmu.edu",
        "type": "String",
        "value": "Natalie Klein"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "paul@roujansky.eu",
        "type": "String",
        "value": "Paul Roujansky"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "simon.kern@online.de",
        "type": "String",
        "value": "Simon Kern"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "antti.rantala90@gmail.com",
        "type": "String",
        "value": "Antti Rantala"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "burkhard.maess@arcor.de",
        "type": "String",
        "value": "Burkhard Maess"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "carinaforster0611@gmail.com",
        "type": "String",
        "value": "Carina Forster"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "christian.oreilly@gmail.com",
        "type": "String",
        "value": "Christian O'Reilly"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "dominik.welke@ae.mpg.de",
        "type": "String",
        "value": "Dominik Welke"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Henrich Kolkhorst"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "hubert.jbanville@gmail.com",
        "type": "String",
        "value": "Hubert Banville"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "zhangmengyu10@gmail.com",
        "type": "String",
        "value": "Jack Zhang"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "makkostya@ukr.net",
        "type": "String",
        "value": "Kostiantyn Maksymenko"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "mdclarke@uw.edu",
        "type": "String",
        "value": "Maggie Clarke"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "matteo.anelli@aalto.fi",
        "type": "String",
        "value": "Matteo Anelli"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Nikolai Chapochnikov"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "pierreantoine.bannier@gmail.com",
        "type": "String",
        "value": "Pierre-Antoine Bannier"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "saketkc@gmail.com",
        "type": "String",
        "value": "Saket Choudhary"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "kimjico@gmail.com",
        "type": "String",
        "value": "Cora Kim"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "klotzsche@cbs.mpg.de",
        "type": "String",
        "value": "Felix Klotzsche"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "zuxfoucault@gmail.com",
        "type": "String",
        "value": "Fu-Te Wong"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Ivana Kojcic"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "jdue@dtu.dk",
        "type": "String",
        "value": "Jesper Duemose Nielsen"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Kaisu Lankinen"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "ktavabi@gmail.com",
        "type": "String",
        "value": "Kambiz Tabavi"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "louist87@gmail.com",
        "type": "String",
        "value": "Louis Thibault"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Moritz Gerster"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Nabil Alibou"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "nathalie.gayraud@inria.fr",
        "type": "String",
        "value": "Nathalie Gayraud"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "ward.nickjames@gmail.com",
        "type": "String",
        "value": "Nick Ward"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "santeri.ruuskanen@aalto.fi",
        "type": "String",
        "value": "Santeri Ruuskanen"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "ksherbst@gmail.com",
        "type": "String",
        "value": "Sophie Herbst"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Ana Radanovic"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Andrew Quinn"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "antoine.gauthier@ensta.fr",
        "type": "String",
        "value": "Antoine Gauthier"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "basile.pinsard@umontreal.ca",
        "type": "String",
        "value": "Basile Pinsard"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "dominik.welke@web.de",
        "type": "String",
        "value": "Dominik Welke"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "emilyps14@gmail.com",
        "type": "String",
        "value": "Emily Stephen"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "erik.hornberger@shi-g.com",
        "type": "String",
        "value": "Erik Hornberger"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Evan Hathaway"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "e.kalenkovich@gmail.com",
        "type": "String",
        "value": "Evgenii Kalenkovich"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Fahimeh Mamashli"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "g.o'neill@ucl.ac.uk",
        "type": "String",
        "value": "George O'Neill"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "giorgio.marinato@unitn.it",
        "type": "String",
        "value": "Giorgio Marinato"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "hafiza.taj@gmail.com",
        "type": "String",
        "value": "Hafeza Anevar"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "hamza.abdelhedii@gmail.com",
        "type": "String",
        "value": "Hamza Abdelhedi"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "mail@jan-sosulski.de",
        "type": "String",
        "value": "Jan Sosulski"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "stoutjd@nih.gov",
        "type": "String",
        "value": "Jeff Stout"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Joshua Calder-Travis"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Judy D Zhu"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "leisenman@wustl.edu",
        "type": "String",
        "value": "Larry Eisenman"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "Lorenz.Esch@tu-ilmenau.de",
        "type": "String",
        "value": "Lorenz Esch"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "marian.dowgialo@gmail.com",
        "type": "String",
        "value": "Marian Dovgialo"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Nicolas Barascud"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "legrand@cyceron.fr",
        "type": "String",
        "value": "Nicolas Legrand"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "4dvlup@gmail.com",
        "type": "String",
        "value": "Nikolai Kapralov"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "falachrotem@gmail.com",
        "type": "String",
        "value": "Rotem Falach"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "sam.deslauriers@gmail.com",
        "type": "String",
        "value": "Samuel Deslauriers-Gauthier"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Silvia Cotroneo"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "stevematindi@gmail.com",
        "type": "String",
        "value": "Steve Matindi"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "neurolaunch@gmail.copm",
        "type": "String",
        "value": "Steven Bierer"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "t.s.binns@outlook.com",
        "type": "String",
        "value": "Thomas S Binns"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "t.s.binns@outlook.com",
        "type": "String",
        "value": "Thomas Samuel Binns"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "ttstenner@gmail.com",
        "type": "String",
        "value": "Tristan Stenner"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "victor.ferat@live.Fr",
        "type": "String",
        "value": "Victor F\u00e9rat"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "victoriapeterson09@gmail.com",
        "type": "String",
        "value": "Victoria Peterson"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "z.baratz@gmail.com",
        "type": "String",
        "value": "Zvi Baratz"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "alessandro.tonin@wysscenter.ch",
        "type": "String",
        "value": "Alessandro Tonin"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "alexander.kovrig@gmail.com",
        "type": "String",
        "value": "Alexander Kovrig"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "a.pascarella@iac.cnr.it",
        "type": "String",
        "value": "Annalisa Pascarella"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Apoorva Karekal"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Carlos de la Torre"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Chetan Gohil"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "zhaotc@uw.edu",
        "type": "String",
        "value": "Christina Zhao"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "raymon92@gmail.com",
        "type": "String",
        "value": "Dominik Krzemi\u0144ski"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "dom.mak19@gmail.com",
        "type": "String",
        "value": "Dominique Makowski"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "e.mikulan@gmail.com",
        "type": "String",
        "value": "Ezequiel Mikulan"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Gennadiy Belonosov"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "jean.baptiste.schiratti@gmail.com",
        "type": "String",
        "value": "Jean-Baptiste Schiratti"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Jen Evans"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "johnv@uchicago.edu",
        "type": "String",
        "value": "John Veillette"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Jordan Drew"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "jbtevespro@gmail.com",
        "type": "String",
        "value": "Joshua Teves"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "kylemath@gmail.com",
        "type": "String",
        "value": "Kyle Mathewson"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "lgwilliams90@gmail.com",
        "type": "String",
        "value": "Laura Gwilliams"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Lenny Varghese"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Liberty Hamilton"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "lukas.gemein@gmx.de",
        "type": "String",
        "value": "Lukas Gemein"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Lukas Hecker"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "capmanip@DESKTOP-TLIFEG1.localdomain",
        "type": "String",
        "value": " Lx37"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "mats.vanes@psych.ox.ac.uk",
        "type": "String",
        "value": "Mats van Es"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Matt Boggess"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Matthias Eberlein"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Michal \u017d\u00e1k"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "molpsychistb@gmail.com",
        "type": "String",
        "value": "Mohamed Sherif"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "natakozh22@gmail.com",
        "type": "String",
        "value": "Nataliia Kozhemiako"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Naveen Srinivasan"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "niklas.wilming@gmail.com",
        "type": "String",
        "value": "Niklas Wilming"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Oleh Kozynets"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "pmolfese@gmail.com",
        "type": "String",
        "value": "Peter J Molfese"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "pierreablin@gmail.com",
        "type": "String",
        "value": "Pierre Ablin"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Qian Chu"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "quentinbertrand54@gmail.com",
        "type": "String",
        "value": "Quentin Bertrand"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "r.shoorangiz@live.com",
        "type": "String",
        "value": "Reza Shoorangiz"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "rhubner@gmail.com",
        "type": "String",
        "value": "Rodrigo H\u00fcbner"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "sommariva@dima.unige.it",
        "type": "String",
        "value": "Sara Sommariva"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Sena Er"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "sheraz@nmr.mgh.harvard.edu",
        "type": "String",
        "value": "Sheraz Khan"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Sumalyo Datta"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "Theodore.Papadopoulo@inria.fr",
        "type": "String",
        "value": "Theodore Papadopoulo"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "tdonoghue.research@gmail.com",
        "type": "String",
        "value": "Thomas Donoghue"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Thomas Jochmann"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "timon.merk@charite.de",
        "type": "String",
        "value": "Timon Merk"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Tod Flak"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "tom.dupre-la-tour@m4x.org",
        "type": "String",
        "value": "Tom Dupr\u00e9 la Tour"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "tzionan@mail.tau.ac.il",
        "type": "String",
        "value": "Tziona NessAiver"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "akshay0724@gmail.com",
        "type": "String",
        "value": " akshay0724"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "sviter33@gmail.com",
        "type": "String",
        "value": " sviter"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "Jakdaxter31@gmail.com",
        "type": "String",
        "value": "Aaron Earle-Richardson"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "abram.hindle@softwareprocess.es",
        "type": "String",
        "value": "Abram Hindle"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "achilleas.k@gmail.com",
        "type": "String",
        "value": "Achilleas Koutsou"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Adeline Fecker"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "adina.wagner@t-online.de",
        "type": "String",
        "value": "Adina Wagner"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Alex Ciok"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Alexander Kiefer"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "7andy121@gmail.com",
        "type": "String",
        "value": "Andy Gilbert"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "aniket17133@iiitd.ac.in",
        "type": "String",
        "value": "Aniket Pradhan"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "anna.padee@gmail.com",
        "type": "String",
        "value": "Anna Padee"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "as_dub@hotmail.com",
        "type": "String",
        "value": "Anne-Sophie Dubarry"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Anton Nikolas Waniek"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Archit Singhal"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "arokem@gmail.com",
        "type": "String",
        "value": "Ariel Rokem"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "arne.pelzer@idmt.fraunhofer.de",
        "type": "String",
        "value": "Arne Pelzer"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "mynameisaustinhurst@gmail.com",
        "type": "String",
        "value": "Austin Hurst"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "code@musicinmybrain.net",
        "type": "String",
        "value": "Ben Beasley"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "bruno.nicenboim@gmail.com",
        "type": "String",
        "value": "Bruno Nicenboim"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "ctorre@mailbox.org",
        "type": "String",
        "value": "Carlos de la Torre"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "cclauss@me.com",
        "type": "String",
        "value": "Christian Clauss"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "cmista@ingenieria.uner.edu.ar",
        "type": "String",
        "value": "Christian Mista"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Chun-Hui Li"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "claire@guakamole.org",
        "type": "String",
        "value": "Claire Braboszcz"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "daniel.c.schad@protonmail.com",
        "type": "String",
        "value": "Daniel C Schad"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "danielhasegan@gmail.com",
        "type": "String",
        "value": "Daniel Hasegan"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "xiezhibin.0.0.superman@gmail.com",
        "type": "String",
        "value": "Daniel Tse"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "darin.sleiter@gmail.com",
        "type": "String",
        "value": "Darin Erat Sleiter"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "haslacherdavid@gmail.com",
        "type": "String",
        "value": "David Haslacher"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "dav.sabbagh@gmail.com",
        "type": "String",
        "value": "David Sabbagh"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Demetres Kostas"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "desislavka@gmail.com",
        "type": "String",
        "value": "Desislava Petkova"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Dinara Issagaliyeva"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Diptyajit Das"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "dimonok@web.de",
        "type": "String",
        "value": "Dominik Wetzel"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "e.eich@fz-juelich.de",
        "type": "String",
        "value": "Eberhard Eich"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "emd222@cornell.edu",
        "type": "String",
        "value": "Elizabeth DuPre"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "ellenlau@umd.edu",
        "type": "String",
        "value": "Ellen Lau"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "emanuele@relativita.com",
        "type": "String",
        "value": "Emanuele Olivetti"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "enricovarano@gmail.com",
        "type": "String",
        "value": "Enrico Varano"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "enzo.alt@gmail.com",
        "type": "String",
        "value": "Enzo Altamiranda"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "eric.brayet@mybraintech.com",
        "type": "String",
        "value": "Eric Brayet"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Etienne de Montalivet"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Evgeny Goldstein"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "farzin.negahbani@gmail.com",
        "type": "String",
        "value": "Farzin Negahbani"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Federico Zamberlan"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "hofaflo@gmail.com",
        "type": "String",
        "value": "Florian Hofer"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "florinpop@me.com",
        "type": "String",
        "value": "Florin Pop"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Frederik D Weber"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Gansheng Tan"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "Geoff.Brookshire@gmail.com",
        "type": "String",
        "value": "Geoff Brookshire"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "george.oneill.90@gmail.com",
        "type": "String",
        "value": "George O'Neill"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "gack94@gmail.com",
        "type": "String",
        "value": " Giulio"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Gonzalo Reina"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Hamid Maymandi"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "hasrat407@gmail.com",
        "type": "String",
        "value": "Hasrat Ali Arzoo"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "hermann.sonntag@gmail.com",
        "type": "String",
        "value": "Hermann Sonntag"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "rubyyhj@gmail.com",
        "type": "String",
        "value": "Hongjiang Ye"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Hyonyoung Shin"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "huseyinorkunelmas@gmail.com",
        "type": "String",
        "value": "H\u00fcseyin Orkun Elmas"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Ilian AZZ"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Ilias Machairas"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "ivan.zubarev@aalto.fi",
        "type": "String",
        "value": "Ivan Zubarev"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "ivopascal@gmail.com",
        "type": "String",
        "value": "Ivo de Jong"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Jakub Kaczmarzyk"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Jan Zerfowski"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "japsai@gmail.com",
        "type": "String",
        "value": "Jasper J F van den Bosch"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Jeroen Van Der Donckt"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "johanvandermeer@gmail.com",
        "type": "String",
        "value": "Johan van der Meer"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Johannes Niediek"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "koen.joshua@gmail.com",
        "type": "String",
        "value": "Josh Koen"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Joshua J Bear"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "j.dammers@fz-juelich.de",
        "type": "String",
        "value": "Juergen Dammers"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "guiomar.niso@ctb.upm.es",
        "type": "String",
        "value": "Julia Guiomar Niso Gal\u00e1n"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Julius Welzel"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "slama@berkeley.edu",
        "type": "String",
        "value": "Katarina Slama"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Katrin Leinweber"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "laetitia.grabot@gmail.com",
        "type": "String",
        "value": "Laetitia Grabot"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "ualsbombe@protonmail.com",
        "type": "String",
        "value": "Lau M\u00f8ller Andersen"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "lsbarbosa@gmail.com",
        "type": "String",
        "value": "Leonardo S Barbosa"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "lorenzo.alfine@gmail.com",
        "type": "String",
        "value": "Lorenzo Alfine"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "hejtmy@gmail.com",
        "type": "String",
        "value": "Luk\u00e1\u0161 Hejtm\u00e1nek"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "mbalatsko@gmail.com",
        "type": "String",
        "value": "Maksym Balatsko"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "manfredg@nmr.mgh.harvard.edu",
        "type": "String",
        "value": "Manfred Kitzbichler"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "manojkumarsivaraj334@gmail.com",
        "type": "String",
        "value": "Manoj Kumar"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Manorama Kadwani"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "manu.sutela@gmail.com",
        "type": "String",
        "value": "Manu Sutela"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "koculak.marcin@gmail.com",
        "type": "String",
        "value": "Marcin Koculak"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "mah@optoceutics.com",
        "type": "String",
        "value": "Mark Henney"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "Martinb.nmb@gmail.com",
        "type": "String",
        "value": "Martin BaBer"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Martin Oberg"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Martin van Harmelen"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Matt Courtemanche"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "matt.tucker@nyu.edu",
        "type": "String",
        "value": "Matt Tucker"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "matteo.visconti.gr@dartmouth.edu",
        "type": "String",
        "value": "Matteo Visconti di Oleggio Castello"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "matthias.dold@gmx.net",
        "type": "String",
        "value": "Matthias Dold"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Matti Toivonen"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Maureen Shader"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Mauricio Cespedes"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "krause@mpib-berlin.mpg.de",
        "type": "String",
        "value": "Michael Krause"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "kontakt@milanrybar.cz",
        "type": "String",
        "value": "Milan Ryb\u00e1\u0159"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Mingjian He"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Mohammad Daneshzand"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "celicolimmo@free.fr",
        "type": "String",
        "value": "Nicolas Fourcaud-Trocm\u00e9"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "nicolas.gensollen@gmail.com",
        "type": "String",
        "value": "Nicolas Gensollen"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "nh.proulx@gmail.com",
        "type": "String",
        "value": "Nicole Proulx"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "nfocke@uni-goettingen.de",
        "type": "String",
        "value": "Niels Focke"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "nikos.ch01@gmail.com",
        "type": "String",
        "value": "Nikolas Chalas"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Noah Markowitz"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "omer.shubi@gmail.com",
        "type": "String",
        "value": "Omer Shubi"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "pablomainar.pm@gmail.com",
        "type": "String",
        "value": "Pablo Mainar"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "tottochan@gmail.com",
        "type": "String",
        "value": "Padma Sundaram"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "pedrobnsilva@gmail.com",
        "type": "String",
        "value": "Pedro Silva"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "proloy@umd.edu",
        "type": "String",
        "value": "Proloy Das"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "glia@dtu.dk",
        "type": "String",
        "value": "Quanliang Li"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "q.barthelemy@gmail.com",
        "type": "String",
        "value": "Quentin Barth\u00e9lemy"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "rahuln@cs.washington.edu",
        "type": "String",
        "value": "Rahul Nadkarni"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "rmrgatti@gmail.com",
        "type": "String",
        "value": "Ramiro Gatti"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "moncho_apa@hotmail.com",
        "type": "String",
        "value": "Ramonapariciog Apariciogarcia"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "raagaard97@gmail.com",
        "type": "String",
        "value": "Rasmus Aagaard"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "reza@ddpo.ir",
        "type": "String",
        "value": "Reza Nasri"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "richard.koehler@outlook.de",
        "type": "String",
        "value": "Richard Koehler"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Richard Scholz"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "rie.acad@gmail.com",
        "type": "String",
        "value": "Riessarius Stargardsky"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "r.oostenveld@gmail.com",
        "type": "String",
        "value": "Robert Oostenveld"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "robbyseymour@gmail.com",
        "type": "String",
        "value": "Robert Seymour"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "robintibor@gmail.com",
        "type": "String",
        "value": "Robin Tibor Schirrmeister"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "ryan.law@mpi.nl",
        "type": "String",
        "value": "Ryan Law"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "sagung.pai@gmail.com",
        "type": "String",
        "value": "Sagun Pai"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "u1265119@unimail.hud.ac.uk",
        "type": "String",
        "value": "Sam Perry"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Samuel Louviot"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Sawradip Saha"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "s.mathot@cogsci.nl",
        "type": "String",
        "value": "Sebastiaan Mathot"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Sebastian Major"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "sfox@riseup.net",
        "type": "String",
        "value": "Sebastien Treguer"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "sebastian.castano@blbt.uni-freiburg.de",
        "type": "String",
        "value": "Sebasti\u00e1n Casta\u00f1o"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Senwen Deng"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "s.antopolsky@gmail.com",
        "type": "String",
        "value": "Sergey Antopolskiy"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "shirazi@ieee.org",
        "type": "String",
        "value": "Seyed (Yahya) Shirazi"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Simeon Wong"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Simeon Wong"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Simon-Shlomo Poil"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "sondre.foslien@gmail.com",
        "type": "String",
        "value": "Sondre Foslien"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Sourav Singh"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "stan.chambon@gmail.com",
        "type": "String",
        "value": "Stanislas Chambon"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "bethard@email.arizona.edu",
        "type": "String",
        "value": "Steven Bethard"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "s.m.gutstein@gmail.com",
        "type": "String",
        "value": "Steven M Gutstein"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Svea Marie Meyer"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "twang5@swarthmore.edu",
        "type": "String",
        "value": "T Wang"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "thomas.moreau.2010@gmail.com",
        "type": "String",
        "value": "Thomas Moreau"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "radman.thomas@gmail.com",
        "type": "String",
        "value": "Thomas Radman"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "tim.gates@iress.com",
        "type": "String",
        "value": "Timothy Gates"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "myd7349@gmail.com",
        "type": "String",
        "value": "Tom Ma"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "TASTONE@mgh.harvard.edu",
        "type": "String",
        "value": "Tom Stone"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Tommy Clausner"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "toomaserikanijarv@gmail.com",
        "type": "String",
        "value": "Toomas Erik Anij\u00e4rv"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": "Velu Prabhakar Kumaravel"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "williamfrancisturner@gmail.com",
        "type": "String",
        "value": "Will Turner"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "xabier@zuazo.org",
        "type": "String",
        "value": "Xabier de Zuazo"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "xia@xiaokai.me",
        "type": "String",
        "value": "Xiaokai Xia"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "frostime@foxmail.com",
        "type": "String",
        "value": "Yiping Zuo"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "850734033@qq.com",
        "type": "String",
        "value": "Zhi Zhang"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "btk.codedev@gmail.com",
        "type": "String",
        "value": " btkcodedev"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": " buildqa"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "email": "",
        "type": "String",
        "value": " luzpaz"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "author": [
          {
            "family_name": "Larson",
            "given_name": "Eric",
            "name": "Eric Larson",
            "type": "Agent"
          },
          {
            "family_name": "Gramfort",
            "given_name": "Alexandre",
            "name": "Alexandre Gramfort",
            "type": "Agent"
          },
          {
            "family_name": "Engemann",
            "given_name": "Denis A",
            "name": "Denis A Engemann",
            "type": "Agent"
          },
          {
            "family_name": "Leppakangas",
            "given_name": "Jaakko",
            "name": "Jaakko Leppakangas",
            "type": "Agent"
          },
          {
            "family_name": "Brodbeck",
            "given_name": "Christian",
            "name": "Christian Brodbeck",
            "type": "Agent"
          },
          {
            "family_name": "Jas",
            "given_name": "Mainak",
            "name": "Mainak Jas",
            "type": "Agent"
          },
          {
            "family_name": "Brooks",
            "given_name": "Teon L",
            "name": "Teon L Brooks",
            "type": "Agent"
          },
          {
            "family_name": "Sassenhagen",
            "given_name": "Jona",
            "name": "Jona Sassenhagen",
            "type": "Agent"
          },
          {
            "family_name": "McCloy",
            "given_name": "Daniel",
            "name": "Daniel McCloy",
            "type": "Agent"
          },
          {
            "family_name": "Luessi",
            "given_name": "Martin",
            "name": "Martin Luessi",
            "type": "Agent"
          },
          {
            "family_name": "King",
            "given_name": "Jean-Remi",
            "name": "Jean-Remi King",
            "type": "Agent"
          },
          {
            "family_name": "H\u00f6chenberger",
            "given_name": "Richard",
            "name": "Richard H\u00f6chenberger",
            "type": "Agent"
          },
          {
            "family_name": "Goj",
            "given_name": "Roman",
            "name": "Roman Goj",
            "type": "Agent"
          },
          {
            "family_name": "Favelier",
            "given_name": "Guillaume",
            "name": "Guillaume Favelier",
            "type": "Agent"
          },
          {
            "family_name": "Brunner",
            "given_name": "Clemens",
            "name": "Clemens Brunner",
            "type": "Agent"
          },
          {
            "family_name": "van Vliet",
            "given_name": "Marijn",
            "name": "Marijn van Vliet",
            "type": "Agent"
          },
          {
            "family_name": "Wronkiewicz",
            "given_name": "Mark",
            "name": "Mark Wronkiewicz",
            "type": "Agent"
          },
          {
            "family_name": "Rockhill",
            "given_name": "Alex",
            "name": "Alex Rockhill",
            "type": "Agent"
          },
          {
            "family_name": "Holdgraf",
            "given_name": "Chris",
            "name": "Chris Holdgraf",
            "type": "Agent"
          },
          {
            "family_name": "Massich",
            "given_name": "Joan",
            "name": "Joan Massich",
            "type": "Agent"
          },
          {
            "family_name": "Bekhti",
            "given_name": "Yousra",
            "name": "Yousra Bekhti",
            "type": "Agent"
          },
          {
            "family_name": "Scheltienne",
            "given_name": "Mathieu",
            "name": "Mathieu Scheltienne",
            "type": "Agent"
          },
          {
            "family_name": "Appelhoff",
            "given_name": "Stefan",
            "name": "Stefan Appelhoff",
            "type": "Agent"
          },
          {
            "family_name": "Leggitt",
            "given_name": "Alan",
            "name": "Alan Leggitt",
            "type": "Agent"
          },
          {
            "family_name": "Dykstra",
            "given_name": "Andrew",
            "name": "Andrew Dykstra",
            "type": "Agent"
          },
          {
            "family_name": "Luke",
            "given_name": "Rob",
            "name": "Rob Luke",
            "type": "Agent"
          },
          {
            "family_name": "Trachel",
            "given_name": "Romain",
            "name": "Romain Trachel",
            "type": "Agent"
          },
          {
            "family_name": "De Santis",
            "given_name": "Lorenzo",
            "name": "Lorenzo De Santis",
            "type": "Agent"
          },
          {
            "family_name": "Panda",
            "given_name": "Asish",
            "name": "Asish Panda",
            "type": "Agent"
          },
          {
            "family_name": "Magnuski",
            "given_name": "Miko\u0142aj",
            "name": "Miko\u0142aj Magnuski",
            "type": "Agent"
          },
          {
            "family_name": "Westner",
            "given_name": "Britta",
            "name": "Britta Westner",
            "type": "Agent"
          },
          {
            "family_name": "Wakeman",
            "given_name": "Dan G",
            "name": "Dan G Wakeman",
            "type": "Agent"
          },
          {
            "family_name": "Strohmeier",
            "given_name": "Daniel",
            "name": "Daniel Strohmeier",
            "type": "Agent"
          },
          {
            "family_name": "Bharadwaj",
            "given_name": "Hari",
            "name": "Hari Bharadwaj",
            "type": "Agent"
          },
          {
            "family_name": "Linzen",
            "given_name": "Tal",
            "name": "Tal Linzen",
            "type": "Agent"
          },
          {
            "family_name": "Barachant",
            "given_name": "Alexandre",
            "name": "Alexandre Barachant",
            "type": "Agent"
          },
          {
            "family_name": "Ruzich",
            "given_name": "Emily",
            "name": "Emily Ruzich",
            "type": "Agent"
          },
          {
            "family_name": "Bailey",
            "given_name": "Christopher J",
            "name": "Christopher J Bailey",
            "type": "Agent"
          },
          {
            "family_name": "Li",
            "given_name": "Adam",
            "name": "Adam Li",
            "type": "Agent"
          },
          {
            "family_name": "Moutard",
            "given_name": "Cl\u00e9ment",
            "name": "Cl\u00e9ment Moutard",
            "type": "Agent"
          },
          {
            "family_name": "Bloy",
            "given_name": "Luke",
            "name": "Luke Bloy",
            "type": "Agent"
          },
          {
            "family_name": "Raimondo",
            "given_name": "Fede",
            "name": "Fede Raimondo",
            "type": "Agent"
          },
          {
            "family_name": "Nurminen",
            "given_name": "Jussi",
            "name": "Jussi Nurminen",
            "type": "Agent"
          },
          {
            "family_name": "Billinger",
            "given_name": "Martin",
            "name": "Martin Billinger",
            "type": "Agent"
          },
          {
            "family_name": "Montoya",
            "given_name": "Jair",
            "name": "Jair Montoya",
            "type": "Agent"
          },
          {
            "family_name": "Woodman",
            "given_name": "Marmaduke",
            "name": "Marmaduke Woodman",
            "type": "Agent"
          },
          {
            "family_name": "Lee",
            "given_name": "Ingoo",
            "name": "Ingoo Lee",
            "type": "Agent"
          },
          {
            "family_name": "Schulz",
            "given_name": "Martin",
            "name": "Martin Schulz",
            "type": "Agent"
          },
          {
            "family_name": "Huberty",
            "given_name": "Scott",
            "name": "Scott Huberty",
            "type": "Agent"
          },
          {
            "family_name": "Foti",
            "given_name": "Nick",
            "name": "Nick Foti",
            "type": "Agent"
          },
          {
            "family_name": "Nangini",
            "given_name": "Cathy",
            "name": "Cathy Nangini",
            "type": "Agent"
          },
          {
            "family_name": "Garc\u00eda Alanis",
            "given_name": "Jos\u00e9 C",
            "name": "Jos\u00e9 C Garc\u00eda Alanis",
            "type": "Agent"
          },
          {
            "family_name": "Orfanos",
            "given_name": "Dimitri Papadopoulos",
            "name": "Dimitri Papadopoulos Orfanos",
            "type": "Agent"
          },
          {
            "family_name": "Hauk",
            "given_name": "Olaf",
            "name": "Olaf Hauk",
            "type": "Agent"
          },
          {
            "family_name": "Maddox",
            "given_name": "Ross",
            "name": "Ross Maddox",
            "type": "Agent"
          },
          {
            "family_name": "LaPlante",
            "given_name": "Roan",
            "name": "Roan LaPlante",
            "type": "Agent"
          },
          {
            "family_name": "Drew",
            "given_name": "Ashley",
            "name": "Ashley Drew",
            "type": "Agent"
          },
          {
            "family_name": "Dinh",
            "given_name": "Christoph",
            "name": "Christoph Dinh",
            "type": "Agent"
          },
          {
            "family_name": "Dumas",
            "given_name": "Guillaume",
            "name": "Guillaume Dumas",
            "type": "Agent"
          },
          {
            "name": "Martin",
            "type": "Agent"
          },
          {
            "family_name": "Benerradi",
            "given_name": "Johann",
            "name": "Johann Benerradi",
            "type": "Agent"
          },
          {
            "family_name": "Hartmann",
            "given_name": "Thomas",
            "name": "Thomas Hartmann",
            "type": "Agent"
          },
          {
            "family_name": "Ort",
            "given_name": "Eduard",
            "name": "Eduard Ort",
            "type": "Agent"
          },
          {
            "family_name": "Billinger",
            "given_name": "Martin",
            "name": "Martin Billinger",
            "type": "Agent"
          },
          {
            "family_name": "Pasler",
            "given_name": "Paul",
            "name": "Paul Pasler",
            "type": "Agent"
          },
          {
            "family_name": "Repplinger",
            "given_name": "Stefan",
            "name": "Stefan Repplinger",
            "type": "Agent"
          },
          {
            "family_name": "Rudiuk",
            "given_name": "Alexander",
            "name": "Alexander Rudiuk",
            "type": "Agent"
          },
          {
            "family_name": "Radanovic",
            "given_name": "Ana",
            "name": "Ana Radanovic",
            "type": "Agent"
          },
          {
            "family_name": "Buran",
            "given_name": "Brad",
            "name": "Brad Buran",
            "type": "Agent"
          },
          {
            "family_name": "Massias",
            "given_name": "Mathurin",
            "name": "Mathurin Massias",
            "type": "Agent"
          },
          {
            "family_name": "H\u00e4m\u00e4l\u00e4inen",
            "given_name": "Matti",
            "name": "Matti H\u00e4m\u00e4l\u00e4inen",
            "type": "Agent"
          },
          {
            "family_name": "Sripad",
            "given_name": "Praveen",
            "name": "Praveen Sripad",
            "type": "Agent"
          },
          {
            "family_name": "Chirkov",
            "given_name": "Valerii",
            "name": "Valerii Chirkov",
            "type": "Agent"
          },
          {
            "family_name": "Mullins",
            "given_name": "Christopher",
            "name": "Christopher Mullins",
            "type": "Agent"
          },
          {
            "family_name": "Raimundo",
            "given_name": "F\u00e9lix",
            "name": "F\u00e9lix Raimundo",
            "type": "Agent"
          },
          {
            "family_name": "Woessner",
            "given_name": "Jacob",
            "name": "Jacob Woessner",
            "type": "Agent"
          },
          {
            "family_name": "Kaneda",
            "given_name": "Michiru",
            "name": "Michiru Kaneda",
            "type": "Agent"
          },
          {
            "family_name": "Alday",
            "given_name": "Phillip",
            "name": "Phillip Alday",
            "type": "Agent"
          },
          {
            "family_name": "Pari",
            "given_name": "Ram",
            "name": "Ram Pari",
            "type": "Agent"
          },
          {
            "family_name": "Kornblith",
            "given_name": "Simon",
            "name": "Simon Kornblith",
            "type": "Agent"
          },
          {
            "family_name": "Halchenko",
            "given_name": "Yaroslav",
            "name": "Yaroslav Halchenko",
            "type": "Agent"
          },
          {
            "family_name": "Luo",
            "given_name": "Yu-Han",
            "name": "Yu-Han Luo",
            "type": "Agent"
          },
          {
            "family_name": "Gramfort",
            "given_name": "Alexandre",
            "name": "Alexandre Gramfort",
            "type": "Agent"
          },
          {
            "family_name": "Kasper",
            "given_name": "Johannes",
            "name": "Johannes Kasper",
            "type": "Agent"
          },
          {
            "family_name": "Doelling",
            "given_name": "Keith",
            "name": "Keith Doelling",
            "type": "Agent"
          },
          {
            "family_name": "Jensen",
            "given_name": "Mads",
            "name": "Mads Jensen",
            "type": "Agent"
          },
          {
            "family_name": "Gahlot",
            "given_name": "Tanay",
            "name": "Tanay Gahlot",
            "type": "Agent"
          },
          {
            "family_name": "Nunes",
            "given_name": "Adonay",
            "name": "Adonay Nunes",
            "type": "Agent"
          },
          {
            "family_name": "G\u00fctlin",
            "given_name": "Dirk",
            "name": "Dirk G\u00fctlin",
            "type": "Agent"
          },
          {
            "family_name": "Heinila",
            "given_name": "Erkka",
            "name": "Erkka Heinila",
            "type": "Agent"
          },
          {
            "family_name": "Armeni",
            "given_name": "Kristijan",
            "name": "Kristijan Armeni",
            "type": "Agent"
          },
          {
            "name": "kjs",
            "type": "Agent"
          },
          {
            "family_name": "Weinstein",
            "given_name": "Alejandro",
            "name": "Alejandro Weinstein",
            "type": "Agent"
          },
          {
            "family_name": "Lamus",
            "given_name": "Camilo",
            "name": "Camilo Lamus",
            "type": "Agent"
          },
          {
            "family_name": "Galv\u00e1n",
            "given_name": "Catalina Mar\u00eda",
            "name": "Catalina Mar\u00eda Galv\u00e1n",
            "type": "Agent"
          },
          {
            "family_name": "Mo\u00ebnne-Loccoz",
            "given_name": "Crist\u00f3bal",
            "name": "Crist\u00f3bal Mo\u00ebnne-Loccoz",
            "type": "Agent"
          },
          {
            "family_name": "Altukhov",
            "given_name": "Dmitrii",
            "name": "Dmitrii Altukhov",
            "type": "Agent"
          },
          {
            "family_name": "Peterson",
            "given_name": "Erica",
            "name": "Erica Peterson",
            "type": "Agent"
          },
          {
            "family_name": "Hanna",
            "given_name": "Jevri",
            "name": "Jevri Hanna",
            "type": "Agent"
          },
          {
            "family_name": "Houck",
            "given_name": "Jon",
            "name": "Jon Houck",
            "type": "Agent"
          },
          {
            "family_name": "Klein",
            "given_name": "Natalie",
            "name": "Natalie Klein",
            "type": "Agent"
          },
          {
            "family_name": "Roujansky",
            "given_name": "Paul",
            "name": "Paul Roujansky",
            "type": "Agent"
          },
          {
            "family_name": "Kern",
            "given_name": "Simon",
            "name": "Simon Kern",
            "type": "Agent"
          },
          {
            "family_name": "Rantala",
            "given_name": "Antti",
            "name": "Antti Rantala",
            "type": "Agent"
          },
          {
            "family_name": "Maess",
            "given_name": "Burkhard",
            "name": "Burkhard Maess",
            "type": "Agent"
          },
          {
            "family_name": "Forster",
            "given_name": "Carina",
            "name": "Carina Forster",
            "type": "Agent"
          },
          {
            "family_name": "O'Reilly",
            "given_name": "Christian",
            "name": "Christian O'Reilly",
            "type": "Agent"
          },
          {
            "family_name": "Welke",
            "given_name": "Dominik",
            "name": "Dominik Welke",
            "type": "Agent"
          },
          {
            "family_name": "Kolkhorst",
            "given_name": "Henrich",
            "name": "Henrich Kolkhorst",
            "type": "Agent"
          },
          {
            "family_name": "Banville",
            "given_name": "Hubert",
            "name": "Hubert Banville",
            "type": "Agent"
          },
          {
            "family_name": "Zhang",
            "given_name": "Jack",
            "name": "Jack Zhang",
            "type": "Agent"
          },
          {
            "family_name": "Maksymenko",
            "given_name": "Kostiantyn",
            "name": "Kostiantyn Maksymenko",
            "type": "Agent"
          },
          {
            "family_name": "Clarke",
            "given_name": "Maggie",
            "name": "Maggie Clarke",
            "type": "Agent"
          },
          {
            "family_name": "Anelli",
            "given_name": "Matteo",
            "name": "Matteo Anelli",
            "type": "Agent"
          },
          {
            "family_name": "Chapochnikov",
            "given_name": "Nikolai",
            "name": "Nikolai Chapochnikov",
            "type": "Agent"
          },
          {
            "family_name": "Bannier",
            "given_name": "Pierre-Antoine",
            "name": "Pierre-Antoine Bannier",
            "type": "Agent"
          },
          {
            "family_name": "Choudhary",
            "given_name": "Saket",
            "name": "Saket Choudhary",
            "type": "Agent"
          },
          {
            "family_name": "Kim",
            "given_name": "Cora",
            "name": "Cora Kim",
            "type": "Agent"
          },
          {
            "family_name": "Klotzsche",
            "given_name": "Felix",
            "name": "Felix Klotzsche",
            "type": "Agent"
          },
          {
            "family_name": "Wong",
            "given_name": "Fu-Te",
            "name": "Fu-Te Wong",
            "type": "Agent"
          },
          {
            "family_name": "Kojcic",
            "given_name": "Ivana",
            "name": "Ivana Kojcic",
            "type": "Agent"
          },
          {
            "family_name": "Nielsen",
            "given_name": "Jesper Duemose",
            "name": "Jesper Duemose Nielsen",
            "type": "Agent"
          },
          {
            "family_name": "Lankinen",
            "given_name": "Kaisu",
            "name": "Kaisu Lankinen",
            "type": "Agent"
          },
          {
            "family_name": "Tabavi",
            "given_name": "Kambiz",
            "name": "Kambiz Tabavi",
            "type": "Agent"
          },
          {
            "family_name": "Thibault",
            "given_name": "Louis",
            "name": "Louis Thibault",
            "type": "Agent"
          },
          {
            "family_name": "Gerster",
            "given_name": "Moritz",
            "name": "Moritz Gerster",
            "type": "Agent"
          },
          {
            "family_name": "Alibou",
            "given_name": "Nabil",
            "name": "Nabil Alibou",
            "type": "Agent"
          },
          {
            "family_name": "Gayraud",
            "given_name": "Nathalie",
            "name": "Nathalie Gayraud",
            "type": "Agent"
          },
          {
            "family_name": "Ward",
            "given_name": "Nick",
            "name": "Nick Ward",
            "type": "Agent"
          },
          {
            "family_name": "Ruuskanen",
            "given_name": "Santeri",
            "name": "Santeri Ruuskanen",
            "type": "Agent"
          },
          {
            "family_name": "Herbst",
            "given_name": "Sophie",
            "name": "Sophie Herbst",
            "type": "Agent"
          },
          {
            "family_name": "Radanovic",
            "given_name": "Ana",
            "name": "Ana Radanovic",
            "type": "Agent"
          },
          {
            "family_name": "Quinn",
            "given_name": "Andrew",
            "name": "Andrew Quinn",
            "type": "Agent"
          },
          {
            "family_name": "Gauthier",
            "given_name": "Antoine",
            "name": "Antoine Gauthier",
            "type": "Agent"
          },
          {
            "family_name": "Pinsard",
            "given_name": "Basile",
            "name": "Basile Pinsard",
            "type": "Agent"
          },
          {
            "family_name": "Welke",
            "given_name": "Dominik",
            "name": "Dominik Welke",
            "type": "Agent"
          },
          {
            "family_name": "Stephen",
            "given_name": "Emily",
            "name": "Emily Stephen",
            "type": "Agent"
          },
          {
            "family_name": "Hornberger",
            "given_name": "Erik",
            "name": "Erik Hornberger",
            "type": "Agent"
          },
          {
            "family_name": "Hathaway",
            "given_name": "Evan",
            "name": "Evan Hathaway",
            "type": "Agent"
          },
          {
            "family_name": "Kalenkovich",
            "given_name": "Evgenii",
            "name": "Evgenii Kalenkovich",
            "type": "Agent"
          },
          {
            "family_name": "Mamashli",
            "given_name": "Fahimeh",
            "name": "Fahimeh Mamashli",
            "type": "Agent"
          },
          {
            "family_name": "O'Neill",
            "given_name": "George",
            "name": "George O'Neill",
            "type": "Agent"
          },
          {
            "family_name": "Marinato",
            "given_name": "Giorgio",
            "name": "Giorgio Marinato",
            "type": "Agent"
          },
          {
            "family_name": "Anevar",
            "given_name": "Hafeza",
            "name": "Hafeza Anevar",
            "type": "Agent"
          },
          {
            "family_name": "Abdelhedi",
            "given_name": "Hamza",
            "name": "Hamza Abdelhedi",
            "type": "Agent"
          },
          {
            "family_name": "Sosulski",
            "given_name": "Jan",
            "name": "Jan Sosulski",
            "type": "Agent"
          },
          {
            "family_name": "Stout",
            "given_name": "Jeff",
            "name": "Jeff Stout",
            "type": "Agent"
          },
          {
            "family_name": "Calder-Travis",
            "given_name": "Joshua",
            "name": "Joshua Calder-Travis",
            "type": "Agent"
          },
          {
            "family_name": "Zhu",
            "given_name": "Judy D",
            "name": "Judy D Zhu",
            "type": "Agent"
          },
          {
            "family_name": "Eisenman",
            "given_name": "Larry",
            "name": "Larry Eisenman",
            "type": "Agent"
          },
          {
            "family_name": "Esch",
            "given_name": "Lorenz",
            "name": "Lorenz Esch",
            "type": "Agent"
          },
          {
            "family_name": "Dovgialo",
            "given_name": "Marian",
            "name": "Marian Dovgialo",
            "type": "Agent"
          },
          {
            "family_name": "Barascud",
            "given_name": "Nicolas",
            "name": "Nicolas Barascud",
            "type": "Agent"
          },
          {
            "family_name": "Legrand",
            "given_name": "Nicolas",
            "name": "Nicolas Legrand",
            "type": "Agent"
          },
          {
            "family_name": "Kapralov",
            "given_name": "Nikolai",
            "name": "Nikolai Kapralov",
            "type": "Agent"
          },
          {
            "family_name": "Falach",
            "given_name": "Rotem",
            "name": "Rotem Falach",
            "type": "Agent"
          },
          {
            "family_name": "Deslauriers-Gauthier",
            "given_name": "Samuel",
            "name": "Samuel Deslauriers-Gauthier",
            "type": "Agent"
          },
          {
            "family_name": "Cotroneo",
            "given_name": "Silvia",
            "name": "Silvia Cotroneo",
            "type": "Agent"
          },
          {
            "family_name": "Matindi",
            "given_name": "Steve",
            "name": "Steve Matindi",
            "type": "Agent"
          },
          {
            "family_name": "Bierer",
            "given_name": "Steven",
            "name": "Steven Bierer",
            "type": "Agent"
          },
          {
            "family_name": "Binns",
            "given_name": "Thomas S",
            "name": "Thomas S Binns",
            "type": "Agent"
          },
          {
            "family_name": "Binns",
            "given_name": "Thomas Samuel",
            "name": "Thomas Samuel Binns",
            "type": "Agent"
          },
          {
            "family_name": "Stenner",
            "given_name": "Tristan",
            "name": "Tristan Stenner",
            "type": "Agent"
          },
          {
            "family_name": "F\u00e9rat",
            "given_name": "Victor",
            "name": "Victor F\u00e9rat",
            "type": "Agent"
          },
          {
            "family_name": "Peterson",
            "given_name": "Victoria",
            "name": "Victoria Peterson",
            "type": "Agent"
          },
          {
            "family_name": "Baratz",
            "given_name": "Zvi",
            "name": "Zvi Baratz",
            "type": "Agent"
          },
          {
            "family_name": "Tonin",
            "given_name": "Alessandro",
            "name": "Alessandro Tonin",
            "type": "Agent"
          },
          {
            "family_name": "Kovrig",
            "given_name": "Alexander",
            "name": "Alexander Kovrig",
            "type": "Agent"
          },
          {
            "family_name": "Pascarella",
            "given_name": "Annalisa",
            "name": "Annalisa Pascarella",
            "type": "Agent"
          },
          {
            "family_name": "Karekal",
            "given_name": "Apoorva",
            "name": "Apoorva Karekal",
            "type": "Agent"
          },
          {
            "family_name": "de la Torre",
            "given_name": "Carlos",
            "name": "Carlos de la Torre",
            "type": "Agent"
          },
          {
            "family_name": "Gohil",
            "given_name": "Chetan",
            "name": "Chetan Gohil",
            "type": "Agent"
          },
          {
            "family_name": "Zhao",
            "given_name": "Christina",
            "name": "Christina Zhao",
            "type": "Agent"
          },
          {
            "family_name": "Krzemi\u0144ski",
            "given_name": "Dominik",
            "name": "Dominik Krzemi\u0144ski",
            "type": "Agent"
          },
          {
            "family_name": "Makowski",
            "given_name": "Dominique",
            "name": "Dominique Makowski",
            "type": "Agent"
          },
          {
            "family_name": "Mikulan",
            "given_name": "Ezequiel",
            "name": "Ezequiel Mikulan",
            "type": "Agent"
          },
          {
            "family_name": "Belonosov",
            "given_name": "Gennadiy",
            "name": "Gennadiy Belonosov",
            "type": "Agent"
          },
          {
            "family_name": "Schiratti",
            "given_name": "Jean-Baptiste",
            "name": "Jean-Baptiste Schiratti",
            "type": "Agent"
          },
          {
            "family_name": "Evans",
            "given_name": "Jen",
            "name": "Jen Evans",
            "type": "Agent"
          },
          {
            "family_name": "Veillette",
            "given_name": "John",
            "name": "John Veillette",
            "type": "Agent"
          },
          {
            "family_name": "Drew",
            "given_name": "Jordan",
            "name": "Jordan Drew",
            "type": "Agent"
          },
          {
            "family_name": "Teves",
            "given_name": "Joshua",
            "name": "Joshua Teves",
            "type": "Agent"
          },
          {
            "family_name": "Mathewson",
            "given_name": "Kyle",
            "name": "Kyle Mathewson",
            "type": "Agent"
          },
          {
            "family_name": "Gwilliams",
            "given_name": "Laura",
            "name": "Laura Gwilliams",
            "type": "Agent"
          },
          {
            "family_name": "Varghese",
            "given_name": "Lenny",
            "name": "Lenny Varghese",
            "type": "Agent"
          },
          {
            "family_name": "Hamilton",
            "given_name": "Liberty",
            "name": "Liberty Hamilton",
            "type": "Agent"
          },
          {
            "family_name": "Gemein",
            "given_name": "Lukas",
            "name": "Lukas Gemein",
            "type": "Agent"
          },
          {
            "family_name": "Hecker",
            "given_name": "Lukas",
            "name": "Lukas Hecker",
            "type": "Agent"
          },
          {
            "name": "Lx37",
            "type": "Agent"
          },
          {
            "family_name": "van Es",
            "given_name": "Mats",
            "name": "Mats van Es",
            "type": "Agent"
          },
          {
            "family_name": "Boggess",
            "given_name": "Matt",
            "name": "Matt Boggess",
            "type": "Agent"
          },
          {
            "family_name": "Eberlein",
            "given_name": "Matthias",
            "name": "Matthias Eberlein",
            "type": "Agent"
          },
          {
            "family_name": "\u017d\u00e1k",
            "given_name": "Michal",
            "name": "Michal \u017d\u00e1k",
            "type": "Agent"
          },
          {
            "family_name": "Sherif",
            "given_name": "Mohamed",
            "name": "Mohamed Sherif",
            "type": "Agent"
          },
          {
            "family_name": "Kozhemiako",
            "given_name": "Nataliia",
            "name": "Nataliia Kozhemiako",
            "type": "Agent"
          },
          {
            "family_name": "Srinivasan",
            "given_name": "Naveen",
            "name": "Naveen Srinivasan",
            "type": "Agent"
          },
          {
            "family_name": "Wilming",
            "given_name": "Niklas",
            "name": "Niklas Wilming",
            "type": "Agent"
          },
          {
            "family_name": "Kozynets",
            "given_name": "Oleh",
            "name": "Oleh Kozynets",
            "type": "Agent"
          },
          {
            "family_name": "Molfese",
            "given_name": "Peter J",
            "name": "Peter J Molfese",
            "type": "Agent"
          },
          {
            "family_name": "Ablin",
            "given_name": "Pierre",
            "name": "Pierre Ablin",
            "type": "Agent"
          },
          {
            "family_name": "Chu",
            "given_name": "Qian",
            "name": "Qian Chu",
            "type": "Agent"
          },
          {
            "family_name": "Bertrand",
            "given_name": "Quentin",
            "name": "Quentin Bertrand",
            "type": "Agent"
          },
          {
            "family_name": "Shoorangiz",
            "given_name": "Reza",
            "name": "Reza Shoorangiz",
            "type": "Agent"
          },
          {
            "family_name": "H\u00fcbner",
            "given_name": "Rodrigo",
            "name": "Rodrigo H\u00fcbner",
            "type": "Agent"
          },
          {
            "family_name": "Sommariva",
            "given_name": "Sara",
            "name": "Sara Sommariva",
            "type": "Agent"
          },
          {
            "family_name": "Er",
            "given_name": "Sena",
            "name": "Sena Er",
            "type": "Agent"
          },
          {
            "family_name": "Khan",
            "given_name": "Sheraz",
            "name": "Sheraz Khan",
            "type": "Agent"
          },
          {
            "family_name": "Datta",
            "given_name": "Sumalyo",
            "name": "Sumalyo Datta",
            "type": "Agent"
          },
          {
            "family_name": "Papadopoulo",
            "given_name": "Theodore",
            "name": "Theodore Papadopoulo",
            "type": "Agent"
          },
          {
            "family_name": "Donoghue",
            "given_name": "Thomas",
            "name": "Thomas Donoghue",
            "type": "Agent"
          },
          {
            "family_name": "Jochmann",
            "given_name": "Thomas",
            "name": "Thomas Jochmann",
            "type": "Agent"
          },
          {
            "family_name": "Merk",
            "given_name": "Timon",
            "name": "Timon Merk",
            "type": "Agent"
          },
          {
            "family_name": "Flak",
            "given_name": "Tod",
            "name": "Tod Flak",
            "type": "Agent"
          },
          {
            "family_name": "Dupr\u00e9 la Tour",
            "given_name": "Tom",
            "name": "Tom Dupr\u00e9 la Tour",
            "type": "Agent"
          },
          {
            "family_name": "NessAiver",
            "given_name": "Tziona",
            "name": "Tziona NessAiver",
            "type": "Agent"
          },
          {
            "name": "akshay0724",
            "type": "Agent"
          },
          {
            "name": "sviter",
            "type": "Agent"
          },
          {
            "family_name": "Earle-Richardson",
            "given_name": "Aaron",
            "name": "Aaron Earle-Richardson",
            "type": "Agent"
          },
          {
            "family_name": "Hindle",
            "given_name": "Abram",
            "name": "Abram Hindle",
            "type": "Agent"
          },
          {
            "family_name": "Koutsou",
            "given_name": "Achilleas",
            "name": "Achilleas Koutsou",
            "type": "Agent"
          },
          {
            "family_name": "Fecker",
            "given_name": "Adeline",
            "name": "Adeline Fecker",
            "type": "Agent"
          },
          {
            "family_name": "Wagner",
            "given_name": "Adina",
            "name": "Adina Wagner",
            "type": "Agent"
          },
          {
            "family_name": "Ciok",
            "given_name": "Alex",
            "name": "Alex Ciok",
            "type": "Agent"
          },
          {
            "family_name": "Kiefer",
            "given_name": "Alexander",
            "name": "Alexander Kiefer",
            "type": "Agent"
          },
          {
            "family_name": "Gilbert",
            "given_name": "Andy",
            "name": "Andy Gilbert",
            "type": "Agent"
          },
          {
            "family_name": "Pradhan",
            "given_name": "Aniket",
            "name": "Aniket Pradhan",
            "type": "Agent"
          },
          {
            "family_name": "Padee",
            "given_name": "Anna",
            "name": "Anna Padee",
            "type": "Agent"
          },
          {
            "family_name": "Dubarry",
            "given_name": "Anne-Sophie",
            "name": "Anne-Sophie Dubarry",
            "type": "Agent"
          },
          {
            "family_name": "Waniek",
            "given_name": "Anton Nikolas",
            "name": "Anton Nikolas Waniek",
            "type": "Agent"
          },
          {
            "family_name": "Singhal",
            "given_name": "Archit",
            "name": "Archit Singhal",
            "type": "Agent"
          },
          {
            "family_name": "Rokem",
            "given_name": "Ariel",
            "name": "Ariel Rokem",
            "type": "Agent"
          },
          {
            "family_name": "Pelzer",
            "given_name": "Arne",
            "name": "Arne Pelzer",
            "type": "Agent"
          },
          {
            "family_name": "Hurst",
            "given_name": "Austin",
            "name": "Austin Hurst",
            "type": "Agent"
          },
          {
            "family_name": "Beasley",
            "given_name": "Ben",
            "name": "Ben Beasley",
            "type": "Agent"
          },
          {
            "family_name": "Nicenboim",
            "given_name": "Bruno",
            "name": "Bruno Nicenboim",
            "type": "Agent"
          },
          {
            "family_name": "de la Torre",
            "given_name": "Carlos",
            "name": "Carlos de la Torre",
            "type": "Agent"
          },
          {
            "family_name": "Clauss",
            "given_name": "Christian",
            "name": "Christian Clauss",
            "type": "Agent"
          },
          {
            "family_name": "Mista",
            "given_name": "Christian",
            "name": "Christian Mista",
            "type": "Agent"
          },
          {
            "family_name": "Li",
            "given_name": "Chun-Hui",
            "name": "Chun-Hui Li",
            "type": "Agent"
          },
          {
            "family_name": "Braboszcz",
            "given_name": "Claire",
            "name": "Claire Braboszcz",
            "type": "Agent"
          },
          {
            "family_name": "Schad",
            "given_name": "Daniel C",
            "name": "Daniel C Schad",
            "type": "Agent"
          },
          {
            "family_name": "Hasegan",
            "given_name": "Daniel",
            "name": "Daniel Hasegan",
            "type": "Agent"
          },
          {
            "family_name": "Tse",
            "given_name": "Daniel",
            "name": "Daniel Tse",
            "type": "Agent"
          },
          {
            "family_name": "Sleiter",
            "given_name": "Darin Erat",
            "name": "Darin Erat Sleiter",
            "type": "Agent"
          },
          {
            "family_name": "Haslacher",
            "given_name": "David",
            "name": "David Haslacher",
            "type": "Agent"
          },
          {
            "family_name": "Sabbagh",
            "given_name": "David",
            "name": "David Sabbagh",
            "type": "Agent"
          },
          {
            "family_name": "Kostas",
            "given_name": "Demetres",
            "name": "Demetres Kostas",
            "type": "Agent"
          },
          {
            "family_name": "Petkova",
            "given_name": "Desislava",
            "name": "Desislava Petkova",
            "type": "Agent"
          },
          {
            "family_name": "Issagaliyeva",
            "given_name": "Dinara",
            "name": "Dinara Issagaliyeva",
            "type": "Agent"
          },
          {
            "family_name": "Das",
            "given_name": "Diptyajit",
            "name": "Diptyajit Das",
            "type": "Agent"
          },
          {
            "family_name": "Wetzel",
            "given_name": "Dominik",
            "name": "Dominik Wetzel",
            "type": "Agent"
          },
          {
            "family_name": "Eich",
            "given_name": "Eberhard",
            "name": "Eberhard Eich",
            "type": "Agent"
          },
          {
            "family_name": "DuPre",
            "given_name": "Elizabeth",
            "name": "Elizabeth DuPre",
            "type": "Agent"
          },
          {
            "family_name": "Lau",
            "given_name": "Ellen",
            "name": "Ellen Lau",
            "type": "Agent"
          },
          {
            "family_name": "Olivetti",
            "given_name": "Emanuele",
            "name": "Emanuele Olivetti",
            "type": "Agent"
          },
          {
            "family_name": "Varano",
            "given_name": "Enrico",
            "name": "Enrico Varano",
            "type": "Agent"
          },
          {
            "family_name": "Altamiranda",
            "given_name": "Enzo",
            "name": "Enzo Altamiranda",
            "type": "Agent"
          },
          {
            "family_name": "Brayet",
            "given_name": "Eric",
            "name": "Eric Brayet",
            "type": "Agent"
          },
          {
            "family_name": "de Montalivet",
            "given_name": "Etienne",
            "name": "Etienne de Montalivet",
            "type": "Agent"
          },
          {
            "family_name": "Goldstein",
            "given_name": "Evgeny",
            "name": "Evgeny Goldstein",
            "type": "Agent"
          },
          {
            "family_name": "Negahbani",
            "given_name": "Farzin",
            "name": "Farzin Negahbani",
            "type": "Agent"
          },
          {
            "family_name": "Zamberlan",
            "given_name": "Federico",
            "name": "Federico Zamberlan",
            "type": "Agent"
          },
          {
            "family_name": "Hofer",
            "given_name": "Florian",
            "name": "Florian Hofer",
            "type": "Agent"
          },
          {
            "family_name": "Pop",
            "given_name": "Florin",
            "name": "Florin Pop",
            "type": "Agent"
          },
          {
            "family_name": "Weber",
            "given_name": "Frederik D",
            "name": "Frederik D Weber",
            "type": "Agent"
          },
          {
            "family_name": "Tan",
            "given_name": "Gansheng",
            "name": "Gansheng Tan",
            "type": "Agent"
          },
          {
            "family_name": "Brookshire",
            "given_name": "Geoff",
            "name": "Geoff Brookshire",
            "type": "Agent"
          },
          {
            "family_name": "O'Neill",
            "given_name": "George",
            "name": "George O'Neill",
            "type": "Agent"
          },
          {
            "name": "Giulio",
            "type": "Agent"
          },
          {
            "family_name": "Reina",
            "given_name": "Gonzalo",
            "name": "Gonzalo Reina",
            "type": "Agent"
          },
          {
            "family_name": "Maymandi",
            "given_name": "Hamid",
            "name": "Hamid Maymandi",
            "type": "Agent"
          },
          {
            "family_name": "Arzoo",
            "given_name": "Hasrat Ali",
            "name": "Hasrat Ali Arzoo",
            "type": "Agent"
          },
          {
            "family_name": "Sonntag",
            "given_name": "Hermann",
            "name": "Hermann Sonntag",
            "type": "Agent"
          },
          {
            "family_name": "Ye",
            "given_name": "Hongjiang",
            "name": "Hongjiang Ye",
            "type": "Agent"
          },
          {
            "family_name": "Shin",
            "given_name": "Hyonyoung",
            "name": "Hyonyoung Shin",
            "type": "Agent"
          },
          {
            "family_name": "Elmas",
            "given_name": "H\u00fcseyin Orkun",
            "name": "H\u00fcseyin Orkun Elmas",
            "type": "Agent"
          },
          {
            "family_name": "AZZ",
            "given_name": "Ilian",
            "name": "Ilian AZZ",
            "type": "Agent"
          },
          {
            "family_name": "Machairas",
            "given_name": "Ilias",
            "name": "Ilias Machairas",
            "type": "Agent"
          },
          {
            "family_name": "Zubarev",
            "given_name": "Ivan",
            "name": "Ivan Zubarev",
            "type": "Agent"
          },
          {
            "family_name": "de Jong",
            "given_name": "Ivo",
            "name": "Ivo de Jong",
            "type": "Agent"
          },
          {
            "family_name": "Kaczmarzyk",
            "given_name": "Jakub",
            "name": "Jakub Kaczmarzyk",
            "type": "Agent"
          },
          {
            "family_name": "Zerfowski",
            "given_name": "Jan",
            "name": "Jan Zerfowski",
            "type": "Agent"
          },
          {
            "family_name": "van den Bosch",
            "given_name": "Jasper J F",
            "name": "Jasper J F van den Bosch",
            "type": "Agent"
          },
          {
            "family_name": "Van Der Donckt",
            "given_name": "Jeroen",
            "name": "Jeroen Van Der Donckt",
            "type": "Agent"
          },
          {
            "family_name": "van der Meer",
            "given_name": "Johan",
            "name": "Johan van der Meer",
            "type": "Agent"
          },
          {
            "family_name": "Niediek",
            "given_name": "Johannes",
            "name": "Johannes Niediek",
            "type": "Agent"
          },
          {
            "family_name": "Koen",
            "given_name": "Josh",
            "name": "Josh Koen",
            "type": "Agent"
          },
          {
            "family_name": "Bear",
            "given_name": "Joshua J",
            "name": "Joshua J Bear",
            "type": "Agent"
          },
          {
            "family_name": "Dammers",
            "given_name": "Juergen",
            "name": "Juergen Dammers",
            "type": "Agent"
          },
          {
            "family_name": "Gal\u00e1n",
            "given_name": "Julia Guiomar Niso",
            "name": "Julia Guiomar Niso Gal\u00e1n",
            "type": "Agent"
          },
          {
            "family_name": "Welzel",
            "given_name": "Julius",
            "name": "Julius Welzel",
            "type": "Agent"
          },
          {
            "family_name": "Slama",
            "given_name": "Katarina",
            "name": "Katarina Slama",
            "type": "Agent"
          },
          {
            "family_name": "Leinweber",
            "given_name": "Katrin",
            "name": "Katrin Leinweber",
            "type": "Agent"
          },
          {
            "family_name": "Grabot",
            "given_name": "Laetitia",
            "name": "Laetitia Grabot",
            "type": "Agent"
          },
          {
            "family_name": "Andersen",
            "given_name": "Lau M\u00f8ller",
            "name": "Lau M\u00f8ller Andersen",
            "type": "Agent"
          },
          {
            "family_name": "Barbosa",
            "given_name": "Leonardo S",
            "name": "Leonardo S Barbosa",
            "type": "Agent"
          },
          {
            "family_name": "Alfine",
            "given_name": "Lorenzo",
            "name": "Lorenzo Alfine",
            "type": "Agent"
          },
          {
            "family_name": "Hejtm\u00e1nek",
            "given_name": "Luk\u00e1\u0161",
            "name": "Luk\u00e1\u0161 Hejtm\u00e1nek",
            "type": "Agent"
          },
          {
            "family_name": "Balatsko",
            "given_name": "Maksym",
            "name": "Maksym Balatsko",
            "type": "Agent"
          },
          {
            "family_name": "Kitzbichler",
            "given_name": "Manfred",
            "name": "Manfred Kitzbichler",
            "type": "Agent"
          },
          {
            "family_name": "Kumar",
            "given_name": "Manoj",
            "name": "Manoj Kumar",
            "type": "Agent"
          },
          {
            "family_name": "Kadwani",
            "given_name": "Manorama",
            "name": "Manorama Kadwani",
            "type": "Agent"
          },
          {
            "family_name": "Sutela",
            "given_name": "Manu",
            "name": "Manu Sutela",
            "type": "Agent"
          },
          {
            "family_name": "Koculak",
            "given_name": "Marcin",
            "name": "Marcin Koculak",
            "type": "Agent"
          },
          {
            "family_name": "Henney",
            "given_name": "Mark",
            "name": "Mark Henney",
            "type": "Agent"
          },
          {
            "family_name": "BaBer",
            "given_name": "Martin",
            "name": "Martin BaBer",
            "type": "Agent"
          },
          {
            "family_name": "Oberg",
            "given_name": "Martin",
            "name": "Martin Oberg",
            "type": "Agent"
          },
          {
            "family_name": "van Harmelen",
            "given_name": "Martin",
            "name": "Martin van Harmelen",
            "type": "Agent"
          },
          {
            "family_name": "Courtemanche",
            "given_name": "Matt",
            "name": "Matt Courtemanche",
            "type": "Agent"
          },
          {
            "family_name": "Tucker",
            "given_name": "Matt",
            "name": "Matt Tucker",
            "type": "Agent"
          },
          {
            "family_name": "Visconti di Oleggio Castello",
            "given_name": "Matteo",
            "name": "Matteo Visconti di Oleggio Castello",
            "type": "Agent"
          },
          {
            "family_name": "Dold",
            "given_name": "Matthias",
            "name": "Matthias Dold",
            "type": "Agent"
          },
          {
            "family_name": "Toivonen",
            "given_name": "Matti",
            "name": "Matti Toivonen",
            "type": "Agent"
          },
          {
            "family_name": "Shader",
            "given_name": "Maureen",
            "name": "Maureen Shader",
            "type": "Agent"
          },
          {
            "family_name": "Cespedes",
            "given_name": "Mauricio",
            "name": "Mauricio Cespedes",
            "type": "Agent"
          },
          {
            "family_name": "Krause",
            "given_name": "Michael",
            "name": "Michael Krause",
            "type": "Agent"
          },
          {
            "family_name": "Ryb\u00e1\u0159",
            "given_name": "Milan",
            "name": "Milan Ryb\u00e1\u0159",
            "type": "Agent"
          },
          {
            "family_name": "He",
            "given_name": "Mingjian",
            "name": "Mingjian He",
            "type": "Agent"
          },
          {
            "family_name": "Daneshzand",
            "given_name": "Mohammad",
            "name": "Mohammad Daneshzand",
            "type": "Agent"
          },
          {
            "family_name": "Fourcaud-Trocm\u00e9",
            "given_name": "Nicolas",
            "name": "Nicolas Fourcaud-Trocm\u00e9",
            "type": "Agent"
          },
          {
            "family_name": "Gensollen",
            "given_name": "Nicolas",
            "name": "Nicolas Gensollen",
            "type": "Agent"
          },
          {
            "family_name": "Proulx",
            "given_name": "Nicole",
            "name": "Nicole Proulx",
            "type": "Agent"
          },
          {
            "family_name": "Focke",
            "given_name": "Niels",
            "name": "Niels Focke",
            "type": "Agent"
          },
          {
            "family_name": "Chalas",
            "given_name": "Nikolas",
            "name": "Nikolas Chalas",
            "type": "Agent"
          },
          {
            "family_name": "Markowitz",
            "given_name": "Noah",
            "name": "Noah Markowitz",
            "type": "Agent"
          },
          {
            "family_name": "Shubi",
            "given_name": "Omer",
            "name": "Omer Shubi",
            "type": "Agent"
          },
          {
            "family_name": "Mainar",
            "given_name": "Pablo",
            "name": "Pablo Mainar",
            "type": "Agent"
          },
          {
            "family_name": "Sundaram",
            "given_name": "Padma",
            "name": "Padma Sundaram",
            "type": "Agent"
          },
          {
            "family_name": "Silva",
            "given_name": "Pedro",
            "name": "Pedro Silva",
            "type": "Agent"
          },
          {
            "family_name": "Das",
            "given_name": "Proloy",
            "name": "Proloy Das",
            "type": "Agent"
          },
          {
            "family_name": "Li",
            "given_name": "Quanliang",
            "name": "Quanliang Li",
            "type": "Agent"
          },
          {
            "family_name": "Barth\u00e9lemy",
            "given_name": "Quentin",
            "name": "Quentin Barth\u00e9lemy",
            "type": "Agent"
          },
          {
            "family_name": "Nadkarni",
            "given_name": "Rahul",
            "name": "Rahul Nadkarni",
            "type": "Agent"
          },
          {
            "family_name": "Gatti",
            "given_name": "Ramiro",
            "name": "Ramiro Gatti",
            "type": "Agent"
          },
          {
            "family_name": "Apariciogarcia",
            "given_name": "Ramonapariciog",
            "name": "Ramonapariciog Apariciogarcia",
            "type": "Agent"
          },
          {
            "family_name": "Aagaard",
            "given_name": "Rasmus",
            "name": "Rasmus Aagaard",
            "type": "Agent"
          },
          {
            "family_name": "Nasri",
            "given_name": "Reza",
            "name": "Reza Nasri",
            "type": "Agent"
          },
          {
            "family_name": "Koehler",
            "given_name": "Richard",
            "name": "Richard Koehler",
            "type": "Agent"
          },
          {
            "family_name": "Scholz",
            "given_name": "Richard",
            "name": "Richard Scholz",
            "type": "Agent"
          },
          {
            "family_name": "Stargardsky",
            "given_name": "Riessarius",
            "name": "Riessarius Stargardsky",
            "type": "Agent"
          },
          {
            "family_name": "Oostenveld",
            "given_name": "Robert",
            "name": "Robert Oostenveld",
            "type": "Agent"
          },
          {
            "family_name": "Seymour",
            "given_name": "Robert",
            "name": "Robert Seymour",
            "type": "Agent"
          },
          {
            "family_name": "Schirrmeister",
            "given_name": "Robin Tibor",
            "name": "Robin Tibor Schirrmeister",
            "type": "Agent"
          },
          {
            "family_name": "Law",
            "given_name": "Ryan",
            "name": "Ryan Law",
            "type": "Agent"
          },
          {
            "family_name": "Pai",
            "given_name": "Sagun",
            "name": "Sagun Pai",
            "type": "Agent"
          },
          {
            "family_name": "Perry",
            "given_name": "Sam",
            "name": "Sam Perry",
            "type": "Agent"
          },
          {
            "family_name": "Louviot",
            "given_name": "Samuel",
            "name": "Samuel Louviot",
            "type": "Agent"
          },
          {
            "family_name": "Saha",
            "given_name": "Sawradip",
            "name": "Sawradip Saha",
            "type": "Agent"
          },
          {
            "family_name": "Mathot",
            "given_name": "Sebastiaan",
            "name": "Sebastiaan Mathot",
            "type": "Agent"
          },
          {
            "family_name": "Major",
            "given_name": "Sebastian",
            "name": "Sebastian Major",
            "type": "Agent"
          },
          {
            "family_name": "Treguer",
            "given_name": "Sebastien",
            "name": "Sebastien Treguer",
            "type": "Agent"
          },
          {
            "family_name": "Casta\u00f1o",
            "given_name": "Sebasti\u00e1n",
            "name": "Sebasti\u00e1n Casta\u00f1o",
            "type": "Agent"
          },
          {
            "family_name": "Deng",
            "given_name": "Senwen",
            "name": "Senwen Deng",
            "type": "Agent"
          },
          {
            "family_name": "Antopolskiy",
            "given_name": "Sergey",
            "name": "Sergey Antopolskiy",
            "type": "Agent"
          },
          {
            "family_name": "Shirazi",
            "given_name": "Seyed (Yahya)",
            "name": "Seyed (Yahya) Shirazi",
            "type": "Agent"
          },
          {
            "family_name": "Wong",
            "given_name": "Simeon",
            "name": "Simeon Wong",
            "type": "Agent"
          },
          {
            "family_name": "Wong",
            "given_name": "Simeon",
            "name": "Simeon Wong",
            "type": "Agent"
          },
          {
            "family_name": "Poil",
            "given_name": "Simon-Shlomo",
            "name": "Simon-Shlomo Poil",
            "type": "Agent"
          },
          {
            "family_name": "Foslien",
            "given_name": "Sondre",
            "name": "Sondre Foslien",
            "type": "Agent"
          },
          {
            "family_name": "Singh",
            "given_name": "Sourav",
            "name": "Sourav Singh",
            "type": "Agent"
          },
          {
            "family_name": "Chambon",
            "given_name": "Stanislas",
            "name": "Stanislas Chambon",
            "type": "Agent"
          },
          {
            "family_name": "Bethard",
            "given_name": "Steven",
            "name": "Steven Bethard",
            "type": "Agent"
          },
          {
            "family_name": "Gutstein",
            "given_name": "Steven M",
            "name": "Steven M Gutstein",
            "type": "Agent"
          },
          {
            "family_name": "Meyer",
            "given_name": "Svea Marie",
            "name": "Svea Marie Meyer",
            "type": "Agent"
          },
          {
            "family_name": "Wang",
            "given_name": "T",
            "name": "T Wang",
            "type": "Agent"
          },
          {
            "family_name": "Moreau",
            "given_name": "Thomas",
            "name": "Thomas Moreau",
            "type": "Agent"
          },
          {
            "family_name": "Radman",
            "given_name": "Thomas",
            "name": "Thomas Radman",
            "type": "Agent"
          },
          {
            "family_name": "Gates",
            "given_name": "Timothy",
            "name": "Timothy Gates",
            "type": "Agent"
          },
          {
            "family_name": "Ma",
            "given_name": "Tom",
            "name": "Tom Ma",
            "type": "Agent"
          },
          {
            "family_name": "Stone",
            "given_name": "Tom",
            "name": "Tom Stone",
            "type": "Agent"
          },
          {
            "family_name": "Clausner",
            "given_name": "Tommy",
            "name": "Tommy Clausner",
            "type": "Agent"
          },
          {
            "family_name": "Anij\u00e4rv",
            "given_name": "Toomas Erik",
            "name": "Toomas Erik Anij\u00e4rv",
            "type": "Agent"
          },
          {
            "family_name": "Kumaravel",
            "given_name": "Velu Prabhakar",
            "name": "Velu Prabhakar Kumaravel",
            "type": "Agent"
          },
          {
            "family_name": "Turner",
            "given_name": "Will",
            "name": "Will Turner",
            "type": "Agent"
          },
          {
            "family_name": "Zuazo",
            "given_name": "Xabier de",
            "name": "Xabier de Zuazo",
            "type": "Agent"
          },
          {
            "family_name": "Xia",
            "given_name": "Xiaokai",
            "name": "Xiaokai Xia",
            "type": "Agent"
          },
          {
            "family_name": "Zuo",
            "given_name": "Yiping",
            "name": "Yiping Zuo",
            "type": "Agent"
          },
          {
            "family_name": "Zhang",
            "given_name": "Zhi",
            "name": "Zhi Zhang",
            "type": "Agent"
          },
          {
            "name": "btkcodedev",
            "type": "Agent"
          },
          {
            "name": "buildqa",
            "type": "Agent"
          },
          {
            "name": "luzpaz",
            "type": "Agent"
          }
        ],
        "datePublished": "2024",
        "doi": "10.5281/zenodo.592483",
        "format": "cff",
        "title": "MNE-Python",
        "type": "File_dump",
        "url": "https://doi.org/10.5281/zenodo.592483",
        "value": "cff-version: 1.2.0\ntitle: \"MNE-Python\"\nmessage: \"If you use this software, please cite both the software itself, and the paper listed in the preferred-citation field.\"\nversion: 1.8.0\ndate-released: \"2024-08-18\"\ncommit: 9a760d76971e845b67b619804c1156cc04c9c948\ndoi: 10.5281/zenodo.592483\nkeywords:\n  - MEG\n  - magnetoencephalography\n  - EEG\n  - electroencephalography\n  - fNIRS\n  - \"functional near-infrared spectroscopy\"\n  - iEEG\n  - \"intracranial EEG\"\n  - eCoG\n  - electrocorticography\n  - DBS\n  - \"deep brain stimulation\"\nauthors:\n  - family-names: Larson\n    given-names: Eric\n  - family-names: Gramfort\n    given-names: Alexandre\n  - family-names: Engemann\n    given-names: Denis A\n  - family-names: Leppakangas\n    given-names: Jaakko\n  - family-names: Brodbeck\n    given-names: Christian\n  - family-names: Jas\n    given-names: Mainak\n  - family-names: Brooks\n    given-names: Teon L\n  - family-names: Sassenhagen\n    given-names: Jona\n  - family-names: McCloy\n    given-names: Daniel\n  - family-names: Luessi\n    given-names: Martin\n  - family-names: King\n    given-names: Jean-Remi\n  - family-names: H\u00f6chenberger\n    given-names: Richard\n  - family-names: Goj\n    given-names: Roman\n  - family-names: Favelier\n    given-names: Guillaume\n  - family-names: Brunner\n    given-names: Clemens\n  - family-names: van Vliet\n    given-names: Marijn\n  - family-names: Wronkiewicz\n    given-names: Mark\n  - family-names: Rockhill\n    given-names: Alex\n  - family-names: Holdgraf\n    given-names: Chris\n  - family-names: Massich\n    given-names: Joan\n  - family-names: Bekhti\n    given-names: Yousra\n  - family-names: Scheltienne\n    given-names: Mathieu\n  - family-names: Appelhoff\n    given-names: Stefan\n  - family-names: Leggitt\n    given-names: Alan\n  - family-names: Dykstra\n    given-names: Andrew\n  - family-names: Luke\n    given-names: Rob\n  - family-names: Trachel\n    given-names: Romain\n  - family-names: De Santis\n    given-names: Lorenzo\n  - family-names: Panda\n    given-names: Asish\n  - family-names: Magnuski\n    given-names: Miko\u0142aj\n  - family-names: Westner\n    given-names: Britta\n  - family-names: Wakeman\n    given-names: Dan G\n  - family-names: Strohmeier\n    given-names: Daniel\n  - family-names: Bharadwaj\n    given-names: Hari\n  - family-names: Linzen\n    given-names: Tal\n  - family-names: Barachant\n    given-names: Alexandre\n  - family-names: Ruzich\n    given-names: Emily\n  - family-names: Bailey\n    given-names: Christopher J\n  - family-names: Li\n    given-names: Adam\n  - family-names: Moutard\n    given-names: Cl\u00e9ment\n  - family-names: Bloy\n    given-names: Luke\n  - family-names: Raimondo\n    given-names: Fede\n  - family-names: Nurminen\n    given-names: Jussi\n  - family-names: Billinger\n    given-names: Martin\n  - family-names: Montoya\n    given-names: Jair\n  - family-names: Woodman\n    given-names: Marmaduke\n  - family-names: Lee\n    given-names: Ingoo\n  - family-names: Schulz\n    given-names: Martin\n  - family-names: Huberty\n    given-names: Scott\n  - family-names: Foti\n    given-names: Nick\n  - family-names: Nangini\n    given-names: Cathy\n  - family-names: Garc\u00eda Alanis\n    given-names: Jos\u00e9 C\n  - family-names: Orfanos\n    given-names: Dimitri Papadopoulos\n  - family-names: Hauk\n    given-names: Olaf\n  - family-names: Maddox\n    given-names: Ross\n  - family-names: LaPlante\n    given-names: Roan\n  - family-names: Drew\n    given-names: Ashley\n  - family-names: Dinh\n    given-names: Christoph\n  - family-names: Dumas\n    given-names: Guillaume\n  - name: Martin\n  - family-names: Benerradi\n    given-names: Johann\n  - family-names: Hartmann\n    given-names: Thomas\n  - family-names: Ort\n    given-names: Eduard\n  - family-names: Billinger\n    given-names: Martin\n  - family-names: Pasler\n    given-names: Paul\n  - family-names: Repplinger\n    given-names: Stefan\n  - family-names: Rudiuk\n    given-names: Alexander\n  - family-names: Radanovic\n    given-names: Ana\n  - family-names: Buran\n    given-names: Brad\n  - family-names: Massias\n    given-names: Mathurin\n  - family-names: H\u00e4m\u00e4l\u00e4inen\n    given-names: Matti\n  - family-names: Sripad\n    given-names: Praveen\n  - family-names: Chirkov\n    given-names: Valerii\n  - family-names: Mullins\n    given-names: Christopher\n  - family-names: Raimundo\n    given-names: F\u00e9lix\n  - family-names: Woessner\n    given-names: Jacob\n  - family-names: Kaneda\n    given-names: Michiru\n  - family-names: Alday\n    given-names: Phillip\n  - family-names: Pari\n    given-names: Ram\n  - family-names: Kornblith\n    given-names: Simon\n  - family-names: Halchenko\n    given-names: Yaroslav\n  - family-names: Luo\n    given-names: Yu-Han\n  - family-names: Gramfort\n    given-names: Alexandre\n  - family-names: Kasper\n    given-names: Johannes\n  - family-names: Doelling\n    given-names: Keith\n  - family-names: Jensen\n    given-names: Mads\n  - family-names: Gahlot\n    given-names: Tanay\n  - family-names: Nunes\n    given-names: Adonay\n  - family-names: G\u00fctlin\n    given-names: Dirk\n  - family-names: Heinila\n    given-names: Erkka\n  - family-names: Armeni\n    given-names: Kristijan\n  - name: kjs\n  - family-names: Weinstein\n    given-names: Alejandro\n  - family-names: Lamus\n    given-names: Camilo\n  - family-names: Galv\u00e1n\n    given-names: Catalina Mar\u00eda\n  - family-names: Mo\u00ebnne-Loccoz\n    given-names: Crist\u00f3bal\n  - family-names: Altukhov\n    given-names: Dmitrii\n  - family-names: Peterson\n    given-names: Erica\n  - family-names: Hanna\n    given-names: Jevri\n  - family-names: Houck\n    given-names: Jon\n  - family-names: Klein\n    given-names: Natalie\n  - family-names: Roujansky\n    given-names: Paul\n  - family-names: Kern\n    given-names: Simon\n  - family-names: Rantala\n    given-names: Antti\n  - family-names: Maess\n    given-names: Burkhard\n  - family-names: Forster\n    given-names: Carina\n  - family-names: O'Reilly\n    given-names: Christian\n  - family-names: Welke\n    given-names: Dominik\n  - family-names: Kolkhorst\n    given-names: Henrich\n  - family-names: Banville\n    given-names: Hubert\n  - family-names: Zhang\n    given-names: Jack\n  - family-names: Maksymenko\n    given-names: Kostiantyn\n  - family-names: Clarke\n    given-names: Maggie\n  - family-names: Anelli\n    given-names: Matteo\n  - family-names: Chapochnikov\n    given-names: Nikolai\n  - family-names: Bannier\n    given-names: Pierre-Antoine\n  - family-names: Choudhary\n    given-names: Saket\n  - family-names: Kim\n    given-names: Cora\n  - family-names: Klotzsche\n    given-names: Felix\n  - family-names: Wong\n    given-names: Fu-Te\n  - family-names: Kojcic\n    given-names: Ivana\n  - family-names: Nielsen\n    given-names: Jesper Duemose\n  - family-names: Lankinen\n    given-names: Kaisu\n  - family-names: Tabavi\n    given-names: Kambiz\n  - family-names: Thibault\n    given-names: Louis\n  - family-names: Gerster\n    given-names: Moritz\n  - family-names: Alibou\n    given-names: Nabil\n  - family-names: Gayraud\n    given-names: Nathalie\n  - family-names: Ward\n    given-names: Nick\n  - family-names: Ruuskanen\n    given-names: Santeri\n  - family-names: Herbst\n    given-names: Sophie\n  - family-names: Radanovic\n    given-names: Ana\n  - family-names: Quinn\n    given-names: Andrew\n  - family-names: Gauthier\n    given-names: Antoine\n  - family-names: Pinsard\n    given-names: Basile\n  - family-names: Welke\n    given-names: Dominik\n  - family-names: Stephen\n    given-names: Emily\n  - family-names: Hornberger\n    given-names: Erik\n  - family-names: Hathaway\n    given-names: Evan\n  - family-names: Kalenkovich\n    given-names: Evgenii\n  - family-names: Mamashli\n    given-names: Fahimeh\n  - family-names: O'Neill\n    given-names: George\n  - family-names: Marinato\n    given-names: Giorgio\n  - family-names: Anevar\n    given-names: Hafeza\n  - family-names: Abdelhedi\n    given-names: Hamza\n  - family-names: Sosulski\n    given-names: Jan\n  - family-names: Stout\n    given-names: Jeff\n  - family-names: Calder-Travis\n    given-names: Joshua\n  - family-names: Zhu\n    given-names: Judy D\n  - family-names: Eisenman\n    given-names: Larry\n  - family-names: Esch\n    given-names: Lorenz\n  - family-names: Dovgialo\n    given-names: Marian\n  - family-names: Barascud\n    given-names: Nicolas\n  - family-names: Legrand\n    given-names: Nicolas\n  - family-names: Kapralov\n    given-names: Nikolai\n  - family-names: Falach\n    given-names: Rotem\n  - family-names: Deslauriers-Gauthier\n    given-names: Samuel\n  - family-names: Cotroneo\n    given-names: Silvia\n  - family-names: Matindi\n    given-names: Steve\n  - family-names: Bierer\n    given-names: Steven\n  - family-names: Binns\n    given-names: Thomas S\n  - family-names: Binns\n    given-names: Thomas Samuel\n  - family-names: Stenner\n    given-names: Tristan\n  - family-names: F\u00e9rat\n    given-names: Victor\n  - family-names: Peterson\n    given-names: Victoria\n  - family-names: Baratz\n    given-names: Zvi\n  - family-names: Tonin\n    given-names: Alessandro\n  - family-names: Kovrig\n    given-names: Alexander\n  - family-names: Pascarella\n    given-names: Annalisa\n  - family-names: Karekal\n    given-names: Apoorva\n  - family-names: de la Torre\n    given-names: Carlos\n  - family-names: Gohil\n    given-names: Chetan\n  - family-names: Zhao\n    given-names: Christina\n  - family-names: Krzemi\u0144ski\n    given-names: Dominik\n  - family-names: Makowski\n    given-names: Dominique\n  - family-names: Mikulan\n    given-names: Ezequiel\n  - family-names: Belonosov\n    given-names: Gennadiy\n  - family-names: Schiratti\n    given-names: Jean-Baptiste\n  - family-names: Evans\n    given-names: Jen\n  - family-names: Veillette\n    given-names: John\n  - family-names: Drew\n    given-names: Jordan\n  - family-names: Teves\n    given-names: Joshua\n  - family-names: Mathewson\n    given-names: Kyle\n  - family-names: Gwilliams\n    given-names: Laura\n  - family-names: Varghese\n    given-names: Lenny\n  - family-names: Hamilton\n    given-names: Liberty\n  - family-names: Gemein\n    given-names: Lukas\n  - family-names: Hecker\n    given-names: Lukas\n  - name: Lx37\n  - family-names: van Es\n    given-names: Mats\n  - family-names: Boggess\n    given-names: Matt\n  - family-names: Eberlein\n    given-names: Matthias\n  - family-names: \u017d\u00e1k\n    given-names: Michal\n  - family-names: Sherif\n    given-names: Mohamed\n  - family-names: Kozhemiako\n    given-names: Nataliia\n  - family-names: Srinivasan\n    given-names: Naveen\n  - family-names: Wilming\n    given-names: Niklas\n  - family-names: Kozynets\n    given-names: Oleh\n  - family-names: Molfese\n    given-names: Peter J\n  - family-names: Ablin\n    given-names: Pierre\n  - family-names: Chu\n    given-names: Qian\n  - family-names: Bertrand\n    given-names: Quentin\n  - family-names: Shoorangiz\n    given-names: Reza\n  - family-names: H\u00fcbner\n    given-names: Rodrigo\n  - family-names: Sommariva\n    given-names: Sara\n  - family-names: Er\n    given-names: Sena\n  - family-names: Khan\n    given-names: Sheraz\n  - family-names: Datta\n    given-names: Sumalyo\n  - family-names: Papadopoulo\n    given-names: Theodore\n  - family-names: Donoghue\n    given-names: Thomas\n  - family-names: Jochmann\n    given-names: Thomas\n  - family-names: Merk\n    given-names: Timon\n  - family-names: Flak\n    given-names: Tod\n  - family-names: Dupr\u00e9 la Tour\n    given-names: Tom\n  - family-names: NessAiver\n    given-names: Tziona\n  - name: akshay0724\n  - name: sviter\n  - family-names: Earle-Richardson\n    given-names: Aaron\n  - family-names: Hindle\n    given-names: Abram\n  - family-names: Koutsou\n    given-names: Achilleas\n  - family-names: Fecker\n    given-names: Adeline\n  - family-names: Wagner\n    given-names: Adina\n  - family-names: Ciok\n    given-names: Alex\n  - family-names: Kiefer\n    given-names: Alexander\n  - family-names: Gilbert\n    given-names: Andy\n  - family-names: Pradhan\n    given-names: Aniket\n  - family-names: Padee\n    given-names: Anna\n  - family-names: Dubarry\n    given-names: Anne-Sophie\n  - family-names: Waniek\n    given-names: Anton Nikolas\n  - family-names: Singhal\n    given-names: Archit\n  - family-names: Rokem\n    given-names: Ariel\n  - family-names: Pelzer\n    given-names: Arne\n  - family-names: Hurst\n    given-names: Austin\n  - family-names: Beasley\n    given-names: Ben\n  - family-names: Nicenboim\n    given-names: Bruno\n  - family-names: de la Torre\n    given-names: Carlos\n  - family-names: Clauss\n    given-names: Christian\n  - family-names: Mista\n    given-names: Christian\n  - family-names: Li\n    given-names: Chun-Hui\n  - family-names: Braboszcz\n    given-names: Claire\n  - family-names: Schad\n    given-names: Daniel C\n  - family-names: Hasegan\n    given-names: Daniel\n  - family-names: Tse\n    given-names: Daniel\n  - family-names: Sleiter\n    given-names: Darin Erat\n  - family-names: Haslacher\n    given-names: David\n  - family-names: Sabbagh\n    given-names: David\n  - family-names: Kostas\n    given-names: Demetres\n  - family-names: Petkova\n    given-names: Desislava\n  - family-names: Issagaliyeva\n    given-names: Dinara\n  - family-names: Das\n    given-names: Diptyajit\n  - family-names: Wetzel\n    given-names: Dominik\n  - family-names: Eich\n    given-names: Eberhard\n  - family-names: DuPre\n    given-names: Elizabeth\n  - family-names: Lau\n    given-names: Ellen\n  - family-names: Olivetti\n    given-names: Emanuele\n  - family-names: Varano\n    given-names: Enrico\n  - family-names: Altamiranda\n    given-names: Enzo\n  - family-names: Brayet\n    given-names: Eric\n  - family-names: de Montalivet\n    given-names: Etienne\n  - family-names: Goldstein\n    given-names: Evgeny\n  - family-names: Negahbani\n    given-names: Farzin\n  - family-names: Zamberlan\n    given-names: Federico\n  - family-names: Hofer\n    given-names: Florian\n  - family-names: Pop\n    given-names: Florin\n  - family-names: Weber\n    given-names: Frederik D\n  - family-names: Tan\n    given-names: Gansheng\n  - family-names: Brookshire\n    given-names: Geoff\n  - family-names: O'Neill\n    given-names: George\n  - name: Giulio\n  - family-names: Reina\n    given-names: Gonzalo\n  - family-names: Maymandi\n    given-names: Hamid\n  - family-names: Arzoo\n    given-names: Hasrat Ali\n  - family-names: Sonntag\n    given-names: Hermann\n  - family-names: Ye\n    given-names: Hongjiang\n  - family-names: Shin\n    given-names: Hyonyoung\n  - family-names: Elmas\n    given-names: H\u00fcseyin Orkun\n  - family-names: AZZ\n    given-names: Ilian\n  - family-names: Machairas\n    given-names: Ilias\n  - family-names: Zubarev\n    given-names: Ivan\n  - family-names: de Jong\n    given-names: Ivo\n  - family-names: Kaczmarzyk\n    given-names: Jakub\n  - family-names: Zerfowski\n    given-names: Jan\n  - family-names: van den Bosch\n    given-names: Jasper J F\n  - family-names: Van Der Donckt\n    given-names: Jeroen\n  - family-names: van der Meer\n    given-names: Johan\n  - family-names: Niediek\n    given-names: Johannes\n  - family-names: Koen\n    given-names: Josh\n  - family-names: Bear\n    given-names: Joshua J\n  - family-names: Dammers\n    given-names: Juergen\n  - family-names: Gal\u00e1n\n    given-names: Julia Guiomar Niso\n  - family-names: Welzel\n    given-names: Julius\n  - family-names: Slama\n    given-names: Katarina\n  - family-names: Leinweber\n    given-names: Katrin\n  - family-names: Grabot\n    given-names: Laetitia\n  - family-names: Andersen\n    given-names: Lau M\u00f8ller\n  - family-names: Barbosa\n    given-names: Leonardo S\n  - family-names: Alfine\n    given-names: Lorenzo\n  - family-names: Hejtm\u00e1nek\n    given-names: Luk\u00e1\u0161\n  - family-names: Balatsko\n    given-names: Maksym\n  - family-names: Kitzbichler\n    given-names: Manfred\n  - family-names: Kumar\n    given-names: Manoj\n  - family-names: Kadwani\n    given-names: Manorama\n  - family-names: Sutela\n    given-names: Manu\n  - family-names: Koculak\n    given-names: Marcin\n  - family-names: Henney\n    given-names: Mark\n  - family-names: BaBer\n    given-names: Martin\n  - family-names: Oberg\n    given-names: Martin\n  - family-names: van Harmelen\n    given-names: Martin\n  - family-names: Courtemanche\n    given-names: Matt\n  - family-names: Tucker\n    given-names: Matt\n  - family-names: Visconti di Oleggio Castello\n    given-names: Matteo\n  - family-names: Dold\n    given-names: Matthias\n  - family-names: Toivonen\n    given-names: Matti\n  - family-names: Shader\n    given-names: Maureen\n  - family-names: Cespedes\n    given-names: Mauricio\n  - family-names: Krause\n    given-names: Michael\n  - family-names: Ryb\u00e1\u0159\n    given-names: Milan\n  - family-names: He\n    given-names: Mingjian\n  - family-names: Daneshzand\n    given-names: Mohammad\n  - family-names: Fourcaud-Trocm\u00e9\n    given-names: Nicolas\n  - family-names: Gensollen\n    given-names: Nicolas\n  - family-names: Proulx\n    given-names: Nicole\n  - family-names: Focke\n    given-names: Niels\n  - family-names: Chalas\n    given-names: Nikolas\n  - family-names: Markowitz\n    given-names: Noah\n  - family-names: Shubi\n    given-names: Omer\n  - family-names: Mainar\n    given-names: Pablo\n  - family-names: Sundaram\n    given-names: Padma\n  - family-names: Silva\n    given-names: Pedro\n  - family-names: Das\n    given-names: Proloy\n  - family-names: Li\n    given-names: Quanliang\n  - family-names: Barth\u00e9lemy\n    given-names: Quentin\n  - family-names: Nadkarni\n    given-names: Rahul\n  - family-names: Gatti\n    given-names: Ramiro\n  - family-names: Apariciogarcia\n    given-names: Ramonapariciog\n  - family-names: Aagaard\n    given-names: Rasmus\n  - family-names: Nasri\n    given-names: Reza\n  - family-names: Koehler\n    given-names: Richard\n  - family-names: Scholz\n    given-names: Richard\n  - family-names: Stargardsky\n    given-names: Riessarius\n  - family-names: Oostenveld\n    given-names: Robert\n  - family-names: Seymour\n    given-names: Robert\n  - family-names: Schirrmeister\n    given-names: Robin Tibor\n  - family-names: Law\n    given-names: Ryan\n  - family-names: Pai\n    given-names: Sagun\n  - family-names: Perry\n    given-names: Sam\n  - family-names: Louviot\n    given-names: Samuel\n  - family-names: Saha\n    given-names: Sawradip\n  - family-names: Mathot\n    given-names: Sebastiaan\n  - family-names: Major\n    given-names: Sebastian\n  - family-names: Treguer\n    given-names: Sebastien\n  - family-names: Casta\u00f1o\n    given-names: Sebasti\u00e1n\n  - family-names: Deng\n    given-names: Senwen\n  - family-names: Antopolskiy\n    given-names: Sergey\n  - family-names: Shirazi\n    given-names: Seyed (Yahya)\n  - family-names: Wong\n    given-names: Simeon\n  - family-names: Wong\n    given-names: Simeon\n  - family-names: Poil\n    given-names: Simon-Shlomo\n  - family-names: Foslien\n    given-names: Sondre\n  - family-names: Singh\n    given-names: Sourav\n  - family-names: Chambon\n    given-names: Stanislas\n  - family-names: Bethard\n    given-names: Steven\n  - family-names: Gutstein\n    given-names: Steven M\n  - family-names: Meyer\n    given-names: Svea Marie\n  - family-names: Wang\n    given-names: T\n  - family-names: Moreau\n    given-names: Thomas\n  - family-names: Radman\n    given-names: Thomas\n  - family-names: Gates\n    given-names: Timothy\n  - family-names: Ma\n    given-names: Tom\n  - family-names: Stone\n    given-names: Tom\n  - family-names: Clausner\n    given-names: Tommy\n  - family-names: Anij\u00e4rv\n    given-names: Toomas Erik\n  - family-names: Kumaravel\n    given-names: Velu Prabhakar\n  - family-names: Turner\n    given-names: Will\n  - family-names: Zuazo\n    given-names: Xabier de\n  - family-names: Xia\n    given-names: Xiaokai\n  - family-names: Zuo\n    given-names: Yiping\n  - family-names: Zhang\n    given-names: Zhi\n  - name: btkcodedev\n  - name: buildqa\n  - name: luzpaz\npreferred-citation:\n  title: \"MEG and EEG Data Analysis with MNE-Python\"\n  journal: \"Frontiers in Neuroscience\"\n  type: article\n  year: 2013\n  volume: 7\n  issue: 267\n  start: 1\n  end: 13\n  doi: 10.3389/fnins.2013.00267\n  authors:\n    - family-names: Gramfort\n      given-names: Alexandre\n    - family-names: Luessi\n      given-names: Martin\n    - family-names: Larson\n      given-names: Eric\n    - family-names: Engemann\n      given-names: Denis A.\n    - family-names: Strohmeier\n      given-names: Daniel\n    - family-names: Brodbeck\n      given-names: Christian\n    - family-names: Goj\n      given-names: Roman\n    - family-names: Jas\n      given-names: Mainak\n    - family-names: Brooks\n      given-names: Teon\n    - family-names: Parkkonen\n      given-names: Lauri\n    - family-names: H\u00e4m\u00e4l\u00e4inen\n      given-names: Matti S.\n"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/CITATION.cff",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MatrixAINetworkMan/NeuraMATRIX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "git+https://github.com/mne-tools/mne-python.git"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Contributing to MNE-Python\n==========================\n\nMNE-Python is maintained by a community of scientists and research labs. The project accepts contributions in the form of bug reports, fixes, feature additions, and documentation improvements (including typo corrections). The best way to start contributing is by [opening an issue](https://github.com/mne-tools/mne-python/issues/new/choose) on our GitHub page to discuss ideas for changes or enhancements, or to tell us about behavior that you think might be a bug. For *general troubleshooting* or *usage questions*, please consider posting your questions on our [MNE Forum](https://mne.discourse.group).\n\nUsers and contributors to MNE-Python are expected to follow our [code of conduct](https://github.com/mne-tools/.github/blob/main/CODE_OF_CONDUCT.md).\n\nThe [contributing guide](https://mne.tools/dev/development/contributing.html) has details on the preferred contribution workflow\nand the recommended system configuration for a smooth contribution/development experience.\n"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-02T08:48:33Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2010-12-26"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_published": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2014-08-04"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2025-02-04T10:57:40Z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2024-08-18"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "neura"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MNE-Python project for MEG and EEG data analysis."
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MNE-Python is an open-source Python package for exploring, visualizing, and analyzing human neurophysiological data. It provides methods for data input/output, preprocessing, visualization, source estimation, time-frequency analysis, connectivity analysis, machine learning, and statistics."
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "development_status": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "active"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MatrixAINetworkMan/NeuraMATRIX/tree/main/Algorithm/BCI-LSL/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://mne.tools/"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MatrixAINetworkMan/NeuraMATRIX/releases"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://pypi.org/project/mne/#files"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mne-tools/mne-python/archive/v1.8.0.zip"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MatrixAINetworkMan/NeuraMATRIX/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MatrixAINetworkMan/NeuraMATRIX"
      },
      "technique": "GitHub_API"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "pyproject.toml",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "file_exploration"
    }
  ],
  "has_package_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "pyproject.toml"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/BCI-LSL/fix_mac.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/tools/github_actions_infos.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/tools/github_actions_download.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/tools/setup_xvfb.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/tools/github_actions_test.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/tools/get_testing_version.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/tools/circleci_bash_env.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/tools/github_actions_dependencies.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/tools/azure_dependencies.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/tools/check_qt_import.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/tools/circleci_download.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/tools/github_actions_env_vars.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/tools/install_pre_requirements.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/tools/circleci_dependencies.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/tools/get_minimal_commands.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MatrixAINetworkMan/NeuraMATRIX/issues"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mne-tools/mne-python/issues/"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mne-tools/mne-python/issues"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": [
          "MEG",
          "magnetoencephalography",
          "EEG",
          "electroencephalography",
          "fNIRS",
          "functional near-infrared spectroscopy",
          "iEEG",
          "intracranial EEG",
          "eCoG",
          "electrocorticography",
          "DBS",
          "deep brain stimulation"
        ]
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Attribution 4.0 International\n\nCopyright \u00a9 2022, MNE-Python Contributors\n\n=======================================================================\n\nCreative Commons Corporation (\"Creative Commons\") is not a law firm and\ndoes not provide legal services or legal advice. Distribution of\nCreative Commons public licenses does not create a lawyer-client or\nother relationship. Creative Commons makes its licenses and related\ninformation available on an \"as-is\" basis. Creative Commons gives no\nwarranties regarding its licenses, any material licensed under their\nterms and conditions, or any related information. Creative Commons\ndisclaims all liability for damages resulting from their use to the\nfullest extent possible.\n\nUsing Creative Commons Public Licenses\n\nCreative Commons public licenses provide a standard set of terms and\nconditions that creators and other rights holders may use to share\noriginal works of authorship and other material subject to copyright\nand certain other rights specified in the public license below. The\nfollowing considerations are for informational purposes only, are not\nexhaustive, and do not form part of our licenses.\n\n     Considerations for licensors: Our public licenses are\n     intended for use by those authorized to give the public\n     permission to use material in ways otherwise restricted by\n     copyright and certain other rights. Our licenses are\n     irrevocable. Licensors should read and understand the terms\n     and conditions of the license they choose before applying it.\n     Licensors should also secure all rights necessary before\n     applying our licenses so that the public can reuse the\n     material as expected. Licensors should clearly mark any\n     material not subject to the license. This includes other CC-\n     licensed material, or material used under an exception or\n     limitation to copyright. More considerations for licensors:\n    wiki.creativecommons.org/Considerations_for_licensors\n\n     Considerations for the public: By using one of our public\n     licenses, a licensor grants the public permission to use the\n     licensed material under specified terms and conditions. If\n     the licensor's permission is not necessary for any reason--for\n     example, because of any applicable exception or limitation to\n     copyright--then that use is not regulated by the license. Our\n     licenses grant only permissions under copyright and certain\n     other rights that a licensor has authority to grant. Use of\n     the licensed material may still be restricted for other\n     reasons, including because others have copyright or other\n     rights in the material. A licensor may make special requests,\n     such as asking that all changes be marked or described.\n     Although not required by our licenses, you are encouraged to\n     respect those requests where reasonable. More considerations\n     for the public:\n    wiki.creativecommons.org/Considerations_for_licensees\n\n=======================================================================\n\nCreative Commons Attribution 4.0 International Public License\n\nBy exercising the Licensed Rights (defined below), You accept and agree\nto be bound by the terms and conditions of this Creative Commons\nAttribution 4.0 International Public License (\"Public License\"). To the\nextent this Public License may be interpreted as a contract, You are\ngranted the Licensed Rights in consideration of Your acceptance of\nthese terms and conditions, and the Licensor grants You such rights in\nconsideration of benefits the Licensor receives from making the\nLicensed Material available under these terms and conditions.\n\n\nSection 1 -- Definitions.\n\n  a. Adapted Material means material subject to Copyright and Similar\n     Rights that is derived from or based upon the Licensed Material\n     and in which the Licensed Material is translated, altered,\n     arranged, transformed, or otherwise modified in a manner requiring\n     permission under the Copyright and Similar Rights held by the\n     Licensor. For purposes of this Public License, where the Licensed\n     Material is a musical work, performance, or sound recording,\n     Adapted Material is always produced where the Licensed Material is\n     synched in timed relation with a moving image.\n\n  b. Adapter's License means the license You apply to Your Copyright\n     and Similar Rights in Your contributions to Adapted Material in\n     accordance with the terms and conditions of this Public License.\n\n  c. Copyright and Similar Rights means copyright and/or similar rights\n     closely related to copyright including, without limitation,\n     performance, broadcast, sound recording, and Sui Generis Database\n     Rights, without regard to how the rights are labeled or\n     categorized. For purposes of this Public License, the rights\n     specified in Section 2(b)(1)-(2) are not Copyright and Similar\n     Rights.\n\n  d. Effective Technological Measures means those measures that, in the\n     absence of proper authority, may not be circumvented under laws\n     fulfilling obligations under Article 11 of the WIPO Copyright\n     Treaty adopted on December 20, 1996, and/or similar international\n     agreements.\n\n  e. Exceptions and Limitations means fair use, fair dealing, and/or\n     any other exception or limitation to Copyright and Similar Rights\n     that applies to Your use of the Licensed Material.\n\n  f. Licensed Material means the artistic or literary work, database,\n     or other material to which the Licensor applied this Public\n     License.\n\n  g. Licensed Rights means the rights granted to You subject to the\n     terms and conditions of this Public License, which are limited to\n     all Copyright and Similar Rights that apply to Your use of the\n     Licensed Material and that the Licensor has authority to license.\n\n  h. Licensor means the individual(s) or entity(ies) granting rights\n     under this Public License.\n\n  i. Share means to provide material to the public by any means or\n     process that requires permission under the Licensed Rights, such\n     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  j. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n     the Council of 11 March 1996 on the legal protection of databases,\n     as amended and/or succeeded, as well as other essentially\n     equivalent rights anywhere in the world.\n\n  k. You means the individual or entity exercising the Licensed Rights\n     under this Public License. Your has a corresponding meaning.\n\n\nSection 2 -- Scope.\n\n  a. License grant.\n\n       1. Subject to the terms and conditions of this Public License,\n          the Licensor hereby grants You a worldwide, royalty-free,\n          non-sublicensable, non-exclusive, irrevocable license to\n          exercise the Licensed Rights in the Licensed Material to:\n\n            a. reproduce and Share the Licensed Material, in whole or\n               in part; and\n\n            b. produce, reproduce, and Share Adapted Material.\n\n       2. Exceptions and Limitations. For the avoidance of doubt, where\n          Exceptions and Limitations apply to Your use, this Public\n          License does not apply, and You do not need to comply with\n          its terms and conditions.\n\n       3. Term. The term of this Public License is specified in Section\n          6(a).\n\n       4. Media and formats; technical modifications allowed. The\n          Licensor authorizes You to exercise the Licensed Rights in\n          all media and formats whether now known or hereafter created,\n          and to make technical modifications necessary to do so. The\n          Licensor waives and/or agrees not to assert any right or\n          authority to forbid You from making technical modifications\n          necessary to exercise the Licensed Rights, including\n          technical modifications necessary to circumvent Effective\n          Technological Measures. For purposes of this Public License,\n          simply making modifications authorized by this Section 2(a)\n          (4) never produces Adapted Material.\n\n       5. Downstream recipients.\n\n            a. Offer from the Licensor -- Licensed Material. Every\n               recipient of the Licensed Material automatically\n               receives an offer from the Licensor to exercise the\n               Licensed Rights under the terms and conditions of this\n               Public License.\n\n            b. No downstream restrictions. You may not offer or impose\n               any additional or different terms or conditions on, or\n               apply any Effective Technological Measures to, the\n               Licensed Material if doing so restricts exercise of the\n               Licensed Rights by any recipient of the Licensed\n               Material.\n\n       6. No endorsement. Nothing in this Public License constitutes or\n          may be construed as permission to assert or imply that You\n          are, or that Your use of the Licensed Material is, connected\n          with, or sponsored, endorsed, or granted official status by,\n          the Licensor or others designated to receive attribution as\n          provided in Section 3(a)(1)(A)(i).\n\n  b. Other rights.\n\n       1. Moral rights, such as the right of integrity, are not\n          licensed under this Public License, nor are publicity,\n          privacy, and/or other similar personality rights; however, to\n          the extent possible, the Licensor waives and/or agrees not to\n          assert any such rights held by the Licensor to the limited\n          extent necessary to allow You to exercise the Licensed\n          Rights, but not otherwise.\n\n       2. Patent and trademark rights are not licensed under this\n          Public License.\n\n       3. To the extent possible, the Licensor waives any right to\n          collect royalties from You for the exercise of the Licensed\n          Rights, whether directly or through a collecting society\n          under any voluntary or waivable statutory or compulsory\n          licensing scheme. In all other cases the Licensor expressly\n          reserves any right to collect such royalties.\n\n\nSection 3 -- License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the\nfollowing conditions.\n\n  a. Attribution.\n\n       1. If You Share the Licensed Material (including in modified\n          form), You must:\n\n            a. retain the following if it is supplied by the Licensor\n               with the Licensed Material:\n\n                 i. identification of the creator(s) of the Licensed\n                    Material and any others designated to receive\n                    attribution, in any reasonable manner requested by\n                    the Licensor (including by pseudonym if\n                    designated);\n\n                ii. a copyright notice;\n\n               iii. a notice that refers to this Public License;\n\n                iv. a notice that refers to the disclaimer of\n                    warranties;\n\n                 v. a URI or hyperlink to the Licensed Material to the\n                    extent reasonably practicable;\n\n            b. indicate if You modified the Licensed Material and\n               retain an indication of any previous modifications; and\n\n            c. indicate the Licensed Material is licensed under this\n               Public License, and include the text of, or the URI or\n               hyperlink to, this Public License.\n\n       2. You may satisfy the conditions in Section 3(a)(1) in any\n          reasonable manner based on the medium, means, and context in\n          which You Share the Licensed Material. For example, it may be\n          reasonable to satisfy the conditions by providing a URI or\n          hyperlink to a resource that includes the required\n          information.\n\n       3. If requested by the Licensor, You must remove any of the\n          information required by Section 3(a)(1)(A) to the extent\n          reasonably practicable.\n\n       4. If You Share Adapted Material You produce, the Adapter's\n          License You apply must not prevent recipients of the Adapted\n          Material from complying with this Public License.\n\n\nSection 4 -- Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that\napply to Your use of the Licensed Material:\n\n  a. for the avoidance of doubt, Section 2(a)(1) grants You the right\n     to extract, reuse, reproduce, and Share all or a substantial\n     portion of the contents of the database;\n\n  b. if You include all or a substantial portion of the database\n     contents in a database in which You have Sui Generis Database\n     Rights, then the database in which You have Sui Generis Database\n     Rights (but not its individual contents) is Adapted Material; and\n\n  c. You must comply with the conditions in Section 3(a) if You Share\n     all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not\nreplace Your obligations under this Public License where the Licensed\nRights include other Copyright and Similar Rights.\n\n\nSection 5 -- Disclaimer of Warranties and Limitation of Liability.\n\n  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE\n     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS\n     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF\n     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,\n     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,\n     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR\n     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,\n     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT\n     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT\n     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\n\n  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE\n     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,\n     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,\n     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,\n     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR\n     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN\n     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR\n     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR\n     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\n\n  c. The disclaimer of warranties and limitation of liability provided\n     above shall be interpreted in a manner that, to the extent\n     possible, most closely approximates an absolute disclaimer and\n     waiver of all liability.\n\n\nSection 6 -- Term and Termination.\n\n  a. This Public License applies for the term of the Copyright and\n     Similar Rights licensed here. However, if You fail to comply with\n     this Public License, then Your rights under this Public License\n     terminate automatically.\n\n  b. Where Your right to use the Licensed Material has terminated under\n     Section 6(a), it reinstates:\n\n       1. automatically as of the date the violation is cured, provided\n          it is cured within 30 days of Your discovery of the\n          violation; or\n\n       2. upon express reinstatement by the Licensor.\n\n     For the avoidance of doubt, this Section 6(b) does not affect any\n     right the Licensor may have to seek remedies for Your violations\n     of this Public License.\n\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n     License.\n\n\nSection 7 -- Other Terms and Conditions.\n\n  a. The Licensor shall not be bound by any additional or different\n     terms or conditions communicated by You unless expressly agreed.\n\n  b. Any arrangements, understandings, or agreements regarding the\n     Licensed Material not stated herein are separate from and\n     independent of the terms and conditions of this Public License.\n\n\nSection 8 -- Interpretation.\n\n  a. For the avoidance of doubt, this Public License does not, and\n     shall not be interpreted to, reduce, limit, restrict, or impose\n     conditions on any use of the Licensed Material that could lawfully\n     be made without permission under this Public License.\n\n  b. To the extent possible, if any provision of this Public License is\n     deemed unenforceable, it shall be automatically reformed to the\n     minimum extent necessary to make it enforceable. If the provision\n     cannot be reformed, it shall be severed from this Public License\n     without affecting the enforceability of the remaining terms and\n     conditions.\n\n  c. No term or condition of this Public License will be waived and no\n     failure to comply consented to unless expressly agreed to by the\n     Licensor.\n\n  d. Nothing in this Public License constitutes or may be interpreted\n     as a limitation upon, or waiver of, any privileges and immunities\n     that apply to the Licensor or You, including from the legal\n     processes of any jurisdiction or authority.\n\n\n=======================================================================\n\nCreative Commons is not a party to its public\nlicenses. Notwithstanding, Creative Commons may elect to apply one of\nits public licenses to material it publishes and in those instances\nwill be considered the \u201cLicensor.\u201d The text of the Creative Commons\npublic licenses is dedicated to the public domain under the CC0 Public\nDomain Dedication. Except for the limited purpose of indicating that\nmaterial is shared under a Creative Commons public license or as\notherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\nto any of its public licenses or any other arrangements,\nunderstandings, or agreements concerning use of licensed material. For\nthe avoidance of doubt, this paragraph does not form part of the\npublic licenses.\n\nCreative Commons may be contacted at creativecommons.org.\n"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/logo/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "identifier": "https://spdx.org/licenses/https://spdx.org/licenses/BSD-3-Clause",
        "spdx_id": "https://spdx.org/licenses/BSD-3-Clause",
        "type": "License",
        "value": "https://spdx.org/licenses/BSD-3-Clause"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NeuraMATRIX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MNE-Python"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "MatrixAINetworkMan"
      },
      "technique": "GitHub_API"
    }
  ],
  "package_id": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mne"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 11675606,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 91807,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dart",
        "size": 45397,
        "type": "Programming_language",
        "value": "Dart"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jinja",
        "size": 25569,
        "type": "Programming_language",
        "value": "Jinja"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Csound Document",
        "size": 24999,
        "type": "Programming_language",
        "value": "Csound Document"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 24302,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "BitBake",
        "size": 16171,
        "type": "Programming_language",
        "value": "BitBake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 10625,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 8909,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 6897,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 4448,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 2721,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 2403,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "jq",
        "size": 1060,
        "type": "Programming_language",
        "value": "jq"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 795,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "type": "Programming_language",
        "value": "Python",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "reference_publication": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "https://doi.org/10.3389/fnins.2013.00267"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://mne.tools/"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://mne.discourse.group/"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mne-tools/mne-python/"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "name": "numpy",
        "type": "Software_application",
        "value": "numpy>=1.23,<3",
        "version": ">=1.23,<3"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "scipy",
        "type": "Software_application",
        "value": "scipy>=1.9",
        "version": ">=1.9"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "matplotlib",
        "type": "Software_application",
        "value": "matplotlib>=3.6",
        "version": ">=3.6"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "tqdm",
        "type": "Software_application",
        "value": "tqdm",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "pooch",
        "type": "Software_application",
        "value": "pooch>=1.5",
        "version": ">=1.5"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "decorator",
        "type": "Software_application",
        "value": "decorator",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "packaging",
        "type": "Software_application",
        "value": "packaging",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "jinja2",
        "type": "Software_application",
        "value": "jinja2",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "lazy_loader",
        "type": "Software_application",
        "value": "lazy_loader>=0.3",
        "version": ">=0.3"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "hatchling",
        "type": "Software_application",
        "value": "hatchling",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "hatch-vcs",
        "type": "Software_application",
        "value": "hatch-vcs",
        "version": ""
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/pyproject.toml",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "python",
        "type": "Software_application",
        "value": "python>=3.9",
        "version": ">=3.9"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "numpy",
        "type": "Software_application",
        "value": "numpy>=1.23,<3",
        "version": ">=1.23,<3"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "scipy",
        "type": "Software_application",
        "value": "scipy>=1.9",
        "version": ">=1.9"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "matplotlib",
        "type": "Software_application",
        "value": "matplotlib>=3.6",
        "version": ">=3.6"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "tqdm",
        "type": "Software_application",
        "value": "tqdm",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "pooch",
        "type": "Software_application",
        "value": "pooch>=1.5",
        "version": ">=1.5"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "decorator",
        "type": "Software_application",
        "value": "decorator",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "packaging",
        "type": "Software_application",
        "value": "packaging",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "jinja2",
        "type": "Software_application",
        "value": "jinja2",
        "version": null
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    },
    {
      "confidence": 1,
      "result": {
        "name": "lazy_loader",
        "type": "Software_application",
        "value": "lazy_loader>=0.3",
        "version": ">=0.3"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2025-09-19 01:11:22",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.12"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "version": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "1.8.0"
      },
      "source": "https://raw.githubusercontent.com/MatrixAINetworkMan/NeuraMATRIX/main/Algorithm/MNE-Python/codemeta.json",
      "technique": "code_parser"
    }
  ]
}